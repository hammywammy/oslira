{
  "version": 3,
  "sources": ["../../../src/utils/logger.ts", "../../../src/utils/response.ts", "../../../src/config/analysis-pipeline.ts", "../../../src/utils/helpers.ts", "../../../src/services/aws-secrets-manager.ts", "../../../src/services/enhanced-config-manager.ts", "../../../src/services/universal-ai-adapter.ts", "../../../src/test/gpt5-test.ts", "../../../src/utils/validation.ts", "../../../src/services/micro-snapshot.ts", "../../../src/services/prompts.ts", "../../../src/services/triage.ts", "../../../src/services/preprocessor.ts", "../../../src/config/models.ts", "../../../src/services/ai-analysis.ts", "../../../src/services/analysis-orchestrator.ts", "../../../src/services/database.ts", "../../../src/services/instagram-scraper.ts", "../../../src/handlers/analyze.ts", "../../../src/handlers/bulk-analyze.ts", "../../../src/handlers/legacy.ts", "../../../src/handlers/billing.ts", "../../../src/services/analytics.ts", "../../../src/handlers/analytics.ts", "../../../src/handlers/debug.ts", "../../../src/handlers/test.ts", "../../../src/test/orchestration-integration.ts", "../../../src/handlers/enhanced-admin.ts", "../../../src/handlers/admin.ts", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/request/constants.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/hono.js", "../../../node_modules/hono/dist/middleware/cors/index.js", "../../../src/index.ts"],
  "sourceRoot": "C:\\Users\\Hwmod\\oslira\\cloudflare-workers\\.wrangler\\tmp\\deploy-LIHQJ8",
  "sourcesContent": ["export function generateRequestId(): string {\r\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\nexport function logger(level: 'info' | 'warn' | 'error', message: string, data?: any, requestId?: string) {\r\n  const timestamp = new Date().toISOString();\r\n  const logData = { timestamp, level, message, requestId, ...data };\r\n  console.log(JSON.stringify(logData));\r\n}\r\n", "export function createStandardResponse(success: boolean, data?: any, error?: string, requestId?: string) {\r\n  return {\r\n    success,\r\n    data,\r\n    error,\r\n    timestamp: new Date().toISOString(),\r\n    version: 'v3.0.0-enterprise-perfect',\r\n    requestId\r\n  };\r\n}\r\n", "// Universal Analysis Pipeline Configuration\r\nexport interface WorkflowConfig {\r\n  name: string;\r\n  description: string;\r\n  stages: AnalysisStage[];\r\n  conditions?: WorkflowCondition[];\r\n}\r\n\r\nexport interface AnalysisStage {\r\n  name: string;\r\n  type: 'triage' | 'preprocessor' | 'analysis' | 'context';\r\n  required: boolean;\r\n  model_tier?: 'premium' | 'balanced' | 'economy';\r\n  conditions?: StageCondition[];\r\n}\r\n\r\nexport interface WorkflowCondition {\r\n  field: string;\r\n  operator: '>' | '<' | '==' | 'contains';\r\n  value: any;\r\n}\r\n\r\nexport interface StageCondition extends WorkflowCondition {\r\n  skip_if_true?: boolean;\r\n}\r\n\r\nexport interface ModelConfig {\r\n  name: string;\r\n  provider: 'openai' | 'claude';\r\n  intelligence: number;\r\n  cost_per_1k_in: number;\r\n  cost_per_1k_out: number;\r\n  max_context: number;\r\n  api_format: 'gpt5_responses' | 'gpt_chat' | 'claude_messages';\r\n  backup?: string;\r\n}\r\n\r\n// Master Pipeline Configuration\r\nexport const ANALYSIS_PIPELINE_CONFIG = {\r\n  // Workflow Definitions\r\n  workflows: {\r\n    // Quick assessment only\r\n    micro_only: {\r\n      name: 'micro_only',\r\n      description: 'Triage and basic analysis only',\r\n      stages: [\r\n        { name: 'triage', type: 'triage', required: true, model_tier: 'economy' },\r\n        { \r\n          name: 'light_analysis', \r\n          type: 'analysis', \r\n          required: true, \r\n          model_tier: 'economy',\r\n          conditions: [{ field: 'analysis_type', operator: '==', value: 'light' }]\r\n        }\r\n      ]\r\n    } as WorkflowConfig,\r\n\r\n    // AI-driven conditional execution\r\n    auto: {\r\n      name: 'auto',\r\n      description: 'AI decides preprocessing based on data quality',\r\n      stages: [\r\n        { name: 'context_generation', type: 'context', required: true, model_tier: 'economy' },\r\n        { name: 'triage', type: 'triage', required: true, model_tier: 'economy' },\r\n        { \r\n          name: 'preprocessor', \r\n          type: 'preprocessor', \r\n          required: false, \r\n          model_tier: 'economy',\r\n          conditions: [\r\n            { field: 'triage.data_richness', operator: '>', value: 70 },\r\n            { field: 'analysis_type', operator: '==', value: 'deep', skip_if_true: false }\r\n          ]\r\n        },\r\n        { \r\n          name: 'main_analysis', \r\n          type: 'analysis', \r\n          required: true,\r\n          model_tier: 'balanced', // Default tier\r\n          conditions: [\r\n            { field: 'triage.lead_score', operator: '>', value: 70, /* upgrade to premium if high score */ },\r\n          ]\r\n        }\r\n      ]\r\n    } as WorkflowConfig,\r\n\r\n    // Run everything regardless\r\n    full: {\r\n      name: 'full',\r\n      description: 'Complete analysis pipeline - all stages',\r\n      stages: [\r\n        { name: 'context_generation', type: 'context', required: true, model_tier: 'economy' },\r\n        { name: 'triage', type: 'triage', required: true, model_tier: 'economy' },\r\n        { name: 'preprocessor', type: 'preprocessor', required: true, model_tier: 'economy' },\r\n        { name: 'main_analysis', type: 'analysis', required: true, model_tier: 'balanced' }\r\n      ]\r\n    } as WorkflowConfig\r\n  },\r\n\r\n  // Model Configurations\r\n  models: {\r\n    // Premium Tier Models\r\n    'claude-opus-4.1': {\r\n      name: 'claude-opus-4.1',\r\n      provider: 'claude',\r\n      intelligence: 100,\r\n      cost_per_1k_in: 15.00,\r\n      cost_per_1k_out: 75.00,\r\n      max_context: 200000,\r\n      api_format: 'claude_messages',\r\n      backup: 'gpt-5'\r\n    } as ModelConfig,\r\n\r\n    'gpt-5': {\r\n      name: 'gpt-5',\r\n      provider: 'openai',\r\n      intelligence: 96,\r\n      cost_per_1k_in: 1.25,\r\n      cost_per_1k_out: 10.00,\r\n      max_completion_tokens: 128000,\r\n      api_format: 'gpt5_responses',\r\n      backup: 'claude-sonnet-4'\r\n    } as ModelConfig,\r\n\r\n    // Balanced Tier Models\r\n    'claude-sonnet-4': {\r\n      name: 'claude-sonnet-4',\r\n      provider: 'claude',\r\n      intelligence: 90,\r\n      cost_per_1k_in: 3.00,\r\n      cost_per_1k_out: 15.00,\r\n      max_context: 200000,\r\n      api_format: 'claude_messages',\r\n      backup: 'gpt-4o'\r\n    } as ModelConfig,\r\n\r\n    'gpt-4o': {\r\n      name: 'gpt-4o',\r\n      provider: 'openai',\r\n      intelligence: 88,\r\n      cost_per_1k_in: 2.50,\r\n      cost_per_1k_out: 10.00,\r\n      max_context: 128000,\r\n      api_format: 'gpt_chat'\r\n    } as ModelConfig,\r\n\r\n    // Economy Tier Models\r\n    'gpt-5-nano': {\r\n      name: 'gpt-5-nano',\r\n      provider: 'openai',\r\n      intelligence: 64,\r\n      cost_per_1k_in: 0.05,\r\n      cost_per_1k_out: 0.40,\r\n      max_completion_tokens: 64000,\r\n      api_format: 'gpt5_responses',\r\n      backup: 'gpt-5-mini'\r\n    } as ModelConfig,\r\n\r\n    'gpt-5-mini': {\r\n      name: 'gpt-5-mini',\r\n      provider: 'openai',\r\n      intelligence: 80,\r\n      cost_per_1k_in: 0.25,\r\n      cost_per_1k_out: 2.00,\r\n      max_completion_tokens: 64000,\r\n      api_format: 'gpt5_responses'\r\n    } as ModelConfig\r\n  },\r\n\r\n  // Analysis Type to Model Mappings\r\n  analysis_mappings: {\r\n    triage: {\r\n      premium: 'gpt-5-nano',\r\n      balanced: 'gpt-5-nano', \r\n      economy: 'gpt-5-nano'\r\n    },\r\n    preprocessor: {\r\n      premium: 'gpt-5-mini',\r\n      balanced: 'gpt-5-mini',\r\n      economy: 'gpt-5-nano'\r\n    },\r\n    light: {\r\n      premium: 'gpt-5',\r\n      balanced: 'gpt-4o',\r\n      economy: 'gpt-5-mini'\r\n    },\r\n    deep: {\r\n      premium: 'claude-opus-4.1',\r\n      balanced: 'gpt-5',\r\n      economy: 'claude-sonnet-4'\r\n    },\r\n    xray: {\r\n      premium: 'claude-opus-4.1',\r\n      balanced: 'claude-sonnet-4', \r\n      economy: 'gpt-5'\r\n    },\r\n    context: {\r\n      premium: 'gpt-5-mini',\r\n      balanced: 'gpt-5-mini',\r\n      economy: 'gpt-5-nano'\r\n    }\r\n  },\r\n\r\n  // Default Settings\r\n  defaults: {\r\n    workflow: 'auto',\r\n    model_tier: 'balanced',\r\n    max_retries: 3,\r\n    timeout_ms: 30000\r\n  }\r\n};\r\n", "import { logger } from './logger.js';\r\nexport async function fetchJson<T>(url: string, options: RequestInit, timeoutMs: number = 10000): Promise<T> {\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      signal: controller.signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const text = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${text}`);\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      return {} as T;\r\n    }\r\n\r\n    const responseText = await response.text();\r\n    if (!responseText.trim()) {\r\n      return {} as T;\r\n    }\r\n\r\n    return JSON.parse(responseText);\r\n  } finally {\r\n    clearTimeout(timeoutId);\r\n  }\r\n}\r\n\r\nexport async function callWithRetry<T>(\r\n  url: string,\r\n  options: RequestInit,\r\n  retries: number = 3,\r\n  delay: number = 1000,\r\n  timeoutMs: number = 30000\r\n): Promise<T> {\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\r\n\r\n  try {\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        const res = await fetch(url, {\r\n          ...options,\r\n          signal: controller.signal\r\n        });\r\n\r\n        if (!res.ok) {\r\n          const text = await res.text();\r\n          throw new Error(`HTTP ${res.status}: ${text}`);\r\n        }\r\n\r\n        const contentType = res.headers.get('content-type');\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n          return {} as T;\r\n        }\r\n\r\n        const responseText = await res.text();\r\n        if (!responseText.trim()) {\r\n          return {} as T;\r\n        }\r\n\r\n        return JSON.parse(responseText);\r\n      } catch (error: any) {\r\n        if (attempt === retries || error.name === 'AbortError') {\r\n          throw error;\r\n        }\r\n        \r\n        logger('warn', `Retry attempt ${attempt}/${retries} failed`, { url, error: error.message });\r\n        await new Promise(resolve => setTimeout(resolve, delay * attempt));\r\n      }\r\n    }\r\n  } finally {\r\n    clearTimeout(timeoutId);\r\n  }\r\n  \r\n  throw new Error(`All ${retries} attempts failed for ${url}`);\r\n}\r\n\r\nexport function extractPostThemes(posts: PostData[]): string {\r\n  if (!posts || posts.length === 0) return 'content themes not available';\r\n  \r\n  const allHashtags = posts.flatMap(post => post.hashtags || []);\r\n  const hashtagCounts = allHashtags.reduce((acc, tag) => {\r\n    acc[tag] = (acc[tag] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n  \r\n  const topHashtags = Object.entries(hashtagCounts)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .slice(0, 3)\r\n    .map(([tag]) => tag.replace('#', ''));\r\n    \r\n  return topHashtags.length > 0 ? topHashtags.join(', ') : 'content themes not available';\r\n}\r\n", "import type { Env } from '../types/interfaces.js';\r\n\r\n// Local logging function to avoid import issues in Worker environment\r\nfunction logger(level: 'info' | 'warn' | 'error', message: string, data?: any) {\r\n  const timestamp = new Date().toISOString();\r\n  const logData = { timestamp, level, message, ...data };\r\n  console.log(JSON.stringify(logData));\r\n}\r\n\r\ninterface SecretValue {\r\n  apiKey: string;\r\n  createdAt: string;\r\n  version: string;\r\n  rotatedBy?: string;\r\n}\r\n\r\nexport class AWSSecretsManager {\r\n  private accessKeyId: string;\r\n  private secretAccessKey: string;\r\n  private region: string;\r\n\r\nconstructor(env: Env) {\r\n  console.log('AWSSecretsManager constructor called with env type:', typeof env);\r\n  console.log('Env keys available:', Object.keys(env));\r\n  \r\n  // Try to access each property individually\r\n  try {\r\n    this.accessKeyId = env.AWS_ACCESS_KEY_ID;\r\n    console.log('Access Key ID retrieved:', !!this.accessKeyId);\r\n  } catch (e) {\r\n    console.error('Failed to get AWS_ACCESS_KEY_ID:', e);\r\n    throw new Error(`Cannot access AWS_ACCESS_KEY_ID: ${e}`);\r\n  }\r\n  \r\n  try {\r\n    this.secretAccessKey = env.AWS_SECRET_ACCESS_KEY;\r\n    console.log('Secret Access Key retrieved:', !!this.secretAccessKey);\r\n  } catch (e) {\r\n    console.error('Failed to get AWS_SECRET_ACCESS_KEY:', e);\r\n    throw new Error(`Cannot access AWS_SECRET_ACCESS_KEY: ${e}`);\r\n  }\r\n  \r\n  this.region = env.AWS_REGION || 'us-east-1';\r\n  console.log('Region set to:', this.region);\r\n\r\n  if (!this.accessKeyId || !this.secretAccessKey) {\r\n    throw new Error(`AWS credentials not configured - Access Key: ${!!this.accessKeyId}, Secret Key: ${!!this.secretAccessKey}`);\r\n  }\r\n  \r\n  console.log('AWS credentials successfully configured');\r\n}\r\n\r\n  async getSecret(secretName: string): Promise<string> {\r\n    try {\r\n      const response = await this.makeAWSRequest('GetSecretValue', {\r\n        SecretId: `Oslira/${secretName}`,\r\n        VersionStage: 'AWSCURRENT'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`AWS API error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!data.SecretString) {\r\n        throw new Error('Secret has no string value');\r\n      }\r\n\r\n      const secretValue: SecretValue = JSON.parse(data.SecretString);\r\n      \r\n      logger('info', 'Retrieved secret from AWS Secrets Manager', { \r\n        secretName,\r\n        version: secretValue.version,\r\n        rotatedBy: secretValue.rotatedBy\r\n      });\r\n\r\n      return secretValue.apiKey;\r\n\r\n    } catch (error: any) {\r\n      logger('error', 'Failed to retrieve secret from AWS', { \r\n        secretName, \r\n        error: error.message \r\n      });\r\n      throw new Error(`AWS Secrets retrieval failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async putSecret(secretName: string, secretValue: string, rotatedBy: string = 'manual'): Promise<void> {\r\n    try {\r\n      const payload = {\r\n        SecretId: `Oslira/${secretName}`,\r\n        SecretString: JSON.stringify({\r\n          apiKey: secretValue,\r\n          createdAt: new Date().toISOString(),\r\n          version: `v${Date.now()}`,\r\n          rotatedBy: rotatedBy\r\n        } as SecretValue)\r\n      };\r\n\r\n      const response = await this.makeAWSRequest('PutSecretValue', payload);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`AWS API error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      logger('info', 'Successfully updated secret in AWS', { \r\n        secretName, \r\n        rotatedBy \r\n      });\r\n\r\n    } catch (error: any) {\r\n      logger('error', 'Failed to store secret in AWS', { \r\n        secretName, \r\n        error: error.message \r\n      });\r\n      throw new Error(`AWS Secrets storage failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async createSecret(secretName: string, secretValue: string, description: string): Promise<void> {\r\n    try {\r\n      const payload = {\r\n        Name: `Oslira/${secretName}`,\r\n        Description: description,\r\n        SecretString: JSON.stringify({\r\n          apiKey: secretValue,\r\n          createdAt: new Date().toISOString(),\r\n          version: 'v1',\r\n          rotatedBy: 'initial_setup'\r\n        } as SecretValue)\r\n      };\r\n\r\n      const response = await this.makeAWSRequest('CreateSecret', payload);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        \r\n        // If secret already exists, update it instead\r\n        if (errorText.includes('already exists')) {\r\n          logger('info', 'Secret exists, updating instead', { secretName });\r\n          await this.putSecret(secretName, secretValue, 'migration');\r\n          return;\r\n        }\r\n        \r\n        throw new Error(`AWS API error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      logger('info', 'Successfully created secret in AWS', { secretName });\r\n\r\n    } catch (error: any) {\r\n      logger('error', 'Failed to create secret in AWS', { \r\n        secretName, \r\n        error: error.message \r\n      });\r\n      throw new Error(`AWS Secrets creation failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async listSecrets(): Promise<string[]> {\r\n    try {\r\n      const response = await this.makeAWSRequest('ListSecrets', {\r\n        Filters: [\r\n          {\r\n            Key: 'name',\r\n            Values: ['Oslira/']\r\n          }\r\n        ],\r\n        MaxResults: 20\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`AWS API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const secretNames = data.SecretList?.map((secret: any) => \r\n        secret.Name.replace('Oslira/', '')\r\n      ) || [];\r\n\r\n      logger('info', 'Listed AWS secrets', { count: secretNames.length });\r\n      return secretNames;\r\n\r\n    } catch (error: any) {\r\n      logger('error', 'Failed to list AWS secrets', { error: error.message });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async enableRotation(secretName: string, lambdaArn: string): Promise<void> {\r\n    try {\r\n      const payload = {\r\n        SecretId: `Oslira/${secretName}`,\r\n        RotationLambdaARN: lambdaArn,\r\n        RotationRules: {\r\n          ScheduleExpression: 'rate(7 days)', // Weekly rotation\r\n          Duration: 'PT30M' // 30 minutes rotation window\r\n        }\r\n      };\r\n\r\n      const response = await this.makeAWSRequest('RotateSecret', payload);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`AWS API error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      logger('info', 'Enabled rotation for secret', { secretName, lambdaArn });\r\n\r\n    } catch (error: any) {\r\n      logger('error', 'Failed to enable rotation', { \r\n        secretName, \r\n        error: error.message \r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeAWSRequest(action: string, payload: any): Promise<Response> {\r\n    const endpoint = `https://secretsmanager.${this.region}.amazonaws.com/`;\r\n    const headers = await this.createAuthHeaders(action, JSON.stringify(payload));\r\n\r\n    return fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/x-amz-json-1.1',\r\n        'X-Amz-Target': `secretsmanager.${action}`\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n  }\r\n\r\n  private async createAuthHeaders(action: string, payload: string): Promise<Record<string, string>> {\r\n    const now = new Date();\r\n    const amzDate = now.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\r\n    const dateStamp = amzDate.substr(0, 8);\r\n\r\n    // Create canonical request\r\n    const canonicalHeaders = [\r\n      `host:secretsmanager.${this.region}.amazonaws.com`,\r\n      `x-amz-date:${amzDate}`,\r\n      `x-amz-target:secretsmanager.${action}`\r\n    ].join('\\n');\r\n\r\n    const signedHeaders = 'host;x-amz-date;x-amz-target';\r\n    const payloadHash = await this.sha256(payload);\r\n\r\n    const canonicalRequest = [\r\n      'POST',\r\n      '/',\r\n      '',\r\n      canonicalHeaders,\r\n      '',\r\n      signedHeaders,\r\n      payloadHash\r\n    ].join('\\n');\r\n\r\n    // Create string to sign\r\n    const algorithm = 'AWS4-HMAC-SHA256';\r\n    const credentialScope = `${dateStamp}/${this.region}/secretsmanager/aws4_request`;\r\n    const stringToSign = [\r\n      algorithm,\r\n      amzDate,\r\n      credentialScope,\r\n      await this.sha256(canonicalRequest)\r\n    ].join('\\n');\r\n\r\n    // Calculate signature\r\n    const signature = await this.calculateSignature(stringToSign, dateStamp);\r\n\r\n    // Create authorization header\r\n    const authorization = [\r\n      `${algorithm} Credential=${this.accessKeyId}/${credentialScope}`,\r\n      `SignedHeaders=${signedHeaders}`,\r\n      `Signature=${signature}`\r\n    ].join(', ');\r\n\r\n    return {\r\n      'Authorization': authorization,\r\n      'X-Amz-Date': amzDate,\r\n      'X-Amz-Target': `secretsmanager.${action}`\r\n    };\r\n  }\r\n\r\n  private async calculateSignature(stringToSign: string, dateStamp: string): Promise<string> {\r\n    const kDate = await this.hmac(`AWS4${this.secretAccessKey}`, dateStamp);\r\n    const kRegion = await this.hmac(kDate, this.region);\r\n    const kService = await this.hmac(kRegion, 'secretsmanager');\r\n    const kSigning = await this.hmac(kService, 'aws4_request');\r\n    \r\n    const signature = await this.hmac(kSigning, stringToSign);\r\n    return Array.from(new Uint8Array(signature))\r\n      .map(b => b.toString(16).padStart(2, '0'))\r\n      .join('');\r\n  }\r\n\r\n  private async hmac(key: string | ArrayBuffer, data: string): Promise<ArrayBuffer> {\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      typeof key === 'string' ? new TextEncoder().encode(key) : key,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n\r\n    return await crypto.subtle.sign('HMAC', cryptoKey, new TextEncoder().encode(data));\r\n  }\r\n\r\n  private async sha256(data: string): Promise<string> {\r\n    const hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(data));\r\n    return Array.from(new Uint8Array(hash))\r\n      .map(b => b.toString(16).padStart(2, '0'))\r\n      .join('');\r\n  }\r\n}\r\n\r\n// Helper function to get singleton instance\r\nlet awsSecretsInstance: AWSSecretsManager | null = null;\r\n\r\nexport function getAWSSecretsManager(env: Env): AWSSecretsManager {\r\n  if (!awsSecretsInstance) {\r\n    awsSecretsInstance = new AWSSecretsManager(env);\r\n  }\r\n  return awsSecretsInstance;\r\n}\r\n", "import type { Env } from '../types/interfaces.js';\r\nimport { fetchJson } from '../utils/helpers.js';\r\nimport { getAWSSecretsManager } from './aws-secrets-manager.js';\r\n\r\n// Local logging function to avoid import issues in Worker environment\r\nfunction logger(level: 'info' | 'warn' | 'error', message: string, data?: any, requestId?: string) {\r\n  const timestamp = new Date().toISOString();\r\n  const logData = { timestamp, level, message, requestId, ...data };\r\n  console.log(JSON.stringify(logData));\r\n}\r\n\r\ninterface ConfigItem {\r\n  key_name: string;\r\n  key_value: string;\r\n  environment: string;\r\n  updated_at: string;\r\n  source: 'supabase' | 'aws' | 'env';\r\n}\r\n\r\nclass EnhancedConfigManager {\r\n  private cache: Map<string, { value: string; expires: number; source: string }> = new Map();\r\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\r\n  private awsSecrets: any;\r\n  \r\n  // Keys that should be stored in AWS Secrets Manager\r\n  private readonly AWS_MANAGED_KEYS = [\r\n    'OPENAI_API_KEY',\r\n    'CLAUDE_API_KEY', \r\n    'APIFY_API_TOKEN',\r\n    'STRIPE_SECRET_KEY',\r\n    'STRIPE_WEBHOOK_SECRET',\r\n    'SUPABASE_SERVICE_ROLE',\r\n    'SUPABASE_ANON_KEY'\r\n  ];\r\n\r\nconstructor(private env: Env) {\r\n  // Log what we actually receive\r\n  console.log('EnhancedConfigManager env keys:', Object.keys(env));\r\n  console.log('AWS vars check:', {\r\n    AWS_ACCESS_KEY_ID: typeof env.AWS_ACCESS_KEY_ID,\r\n    AWS_SECRET_ACCESS_KEY: typeof env.AWS_SECRET_ACCESS_KEY,\r\n    values: {\r\n      accessKey: env.AWS_ACCESS_KEY_ID?.substring(0, 4) + '...',\r\n      secretKey: env.AWS_SECRET_ACCESS_KEY?.substring(0, 4) + '...'\r\n    }\r\n  });\r\n\r\n  try {\r\n    this.awsSecrets = getAWSSecretsManager(env);\r\n    logger('info', 'AWS Secrets Manager initialized successfully');\r\n  } catch (error: any) {\r\n    logger('error', 'AWS Secrets Manager initialization failed', { \r\n      error: error.message,\r\n      hasAccessKey: !!env.AWS_ACCESS_KEY_ID,\r\n      hasSecretKey: !!env.AWS_SECRET_ACCESS_KEY,\r\n      region: env.AWS_REGION\r\n    });\r\n    this.awsSecrets = null;\r\n  }\r\n}\r\n\r\n  async getConfig(keyName: string): Promise<string> {\r\n    // Check cache first\r\n    const cached = this.cache.get(keyName);\r\n    if (cached && cached.expires > Date.now()) {\r\n      logger('info', `Config cache hit for ${keyName}`, { source: cached.source });\r\n      return cached.value;\r\n    }\r\n\r\n    try {\r\n      let value: string = '';\r\n      let source: string = 'env';\r\n\r\n      // For sensitive keys, try AWS first\r\n      if (this.AWS_MANAGED_KEYS.includes(keyName) && this.awsSecrets) {\r\n        try {\r\n          value = await this.awsSecrets.getSecret(keyName);\r\n          source = 'aws';\r\n          logger('info', `Retrieved ${keyName} from AWS Secrets Manager`);\r\n        } catch (awsError: any) {\r\n          logger('warn', `AWS retrieval failed for ${keyName}, trying Supabase fallback`, { \r\n            error: awsError.message \r\n          });\r\n          \r\n          // Fallback to Supabase\r\n          value = await this.getFromSupabase(keyName);\r\n          source = 'supabase';\r\n        }\r\n      } else {\r\n        // Non-sensitive keys use Supabase\r\n        try {\r\n          value = await this.getFromSupabase(keyName);\r\n          source = 'supabase';\r\n        } catch (supabaseError: any) {\r\n          logger('warn', `Supabase retrieval failed for ${keyName}, trying environment`, {\r\n            error: supabaseError.message\r\n          });\r\n          \r\n          // Final fallback to environment variable\r\n          value = this.env[keyName as keyof Env] || '';\r\n          source = 'env';\r\n        }\r\n      }\r\n\r\n      if (!value) {\r\n        logger('error', `No value found for config key: ${keyName}`);\r\n        return '';\r\n      }\r\n\r\n      // Cache the result\r\n      this.cache.set(keyName, {\r\n        value,\r\n        expires: Date.now() + this.CACHE_TTL,\r\n        source\r\n      });\r\n\r\n      logger('info', `Config retrieved successfully`, { keyName, source });\r\n\r\n      logger('info', 'Config retrieved with details', { \r\n  keyName, \r\n  source,\r\n  hasValue: !!value,\r\n  valueLength: value?.length || 0,\r\n  valuePrefix: value?.substring(0, 10) || 'NONE',\r\n  isValidOpenAIFormat: value?.startsWith('sk-') || false\r\n});\r\n      return value;\r\n\r\n    } catch (error: any) {\r\n      logger('error', `Failed to retrieve config for ${keyName}`, { error: error.message });\r\n      \r\n      // Last resort: environment variable\r\n      const envValue = this.env[keyName as keyof Env] || '';\r\n      if (envValue) {\r\n        logger('info', `Using environment fallback for ${keyName}`);\r\n        return envValue;\r\n      }\r\n      \r\n      return '';\r\n    }\r\n  }\r\n\r\n  async updateConfig(keyName: string, newValue: string, updatedBy: string = 'system'): Promise<void> {\r\n    try {\r\n      // For sensitive keys, update AWS first, then Supabase as backup\r\n      if (this.AWS_MANAGED_KEYS.includes(keyName) && this.awsSecrets) {\r\n        try {\r\n          await this.awsSecrets.putSecret(keyName, newValue, updatedBy);\r\n          logger('info', `Updated ${keyName} in AWS Secrets Manager`);\r\n          \r\n          // Also update Supabase as backup\r\n          await this.updateSupabase(keyName, newValue, updatedBy);\r\n          logger('info', `Updated ${keyName} in Supabase as backup`);\r\n          \r\n        } catch (awsError: any) {\r\n          logger('error', `Failed to update ${keyName} in AWS, using Supabase only`, {\r\n            error: awsError.message\r\n          });\r\n          \r\n          // If AWS fails, at least update Supabase\r\n          await this.updateSupabase(keyName, newValue, updatedBy);\r\n        }\r\n      } else {\r\n        // Non-sensitive keys only go to Supabase\r\n        await this.updateSupabase(keyName, newValue, updatedBy);\r\n        logger('info', `Updated ${keyName} in Supabase`);\r\n      }\r\n\r\n      // Clear cache for this key\r\n      this.cache.delete(keyName);\r\n      \r\n      // Trigger auto-sync notifications\r\n      await this.notifyConfigChange(keyName, updatedBy);\r\n\r\n    } catch (error: any) {\r\n      logger('error', `Failed to update config: ${keyName}`, { error: error.message });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async migrateToAWS(keyName: string): Promise<void> {\r\n    if (!this.AWS_MANAGED_KEYS.includes(keyName)) {\r\n      throw new Error(`${keyName} is not configured for AWS migration`);\r\n    }\r\n\r\n    if (!this.awsSecrets) {\r\n      throw new Error('AWS Secrets Manager not available');\r\n    }\r\n\r\n    try {\r\n      // Get current value from Supabase\r\n      const currentValue = await this.getFromSupabase(keyName);\r\n      \r\n      if (!currentValue) {\r\n        throw new Error(`No value found in Supabase for ${keyName}`);\r\n      }\r\n\r\n      // Create/update in AWS\r\n      await this.awsSecrets.createSecret(keyName, currentValue, `Oslira ${keyName} - migrated from Supabase`);\r\n      \r\n      logger('info', `Successfully migrated ${keyName} to AWS Secrets Manager`);\r\n\r\n      // Clear cache to force re-fetch from AWS\r\n      this.cache.delete(keyName);\r\n\r\n    } catch (error: any) {\r\n      logger('error', `Failed to migrate ${keyName} to AWS`, { error: error.message });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getConfigStatus(): Promise<Record<string, any>> {\r\n    const status: Record<string, any> = {};\r\n\r\n    for (const keyName of this.AWS_MANAGED_KEYS) {\r\n      try {\r\n        // Check AWS\r\n        let awsStatus = 'not_configured';\r\n        let awsLastUpdated = 'N/A';\r\n        \r\n        if (this.awsSecrets) {\r\n          try {\r\n            const awsValue = await this.awsSecrets.getSecret(keyName);\r\n            awsStatus = awsValue ? 'configured' : 'empty';\r\n          } catch {\r\n            awsStatus = 'error';\r\n          }\r\n        }\r\n\r\n        // Check Supabase\r\n        let supabaseStatus = 'not_configured';\r\n        let supabaseLastUpdated = 'N/A';\r\n        \r\n        try {\r\n          const supabaseValue = await this.getFromSupabase(keyName);\r\n          supabaseStatus = supabaseValue ? 'configured' : 'empty';\r\n          \r\n          // Get last updated timestamp\r\n          const configItem = await this.getSupabaseMetadata(keyName);\r\n          supabaseLastUpdated = configItem?.updated_at || 'N/A';\r\n        } catch {\r\n          supabaseStatus = 'error';\r\n        }\r\n\r\n        // Check environment variable\r\n        const envValue = this.env[keyName as keyof Env];\r\n        const envStatus = envValue ? 'configured' : 'not_configured';\r\n\r\n        status[keyName] = {\r\n          aws: {\r\n            status: awsStatus,\r\n            lastUpdated: awsLastUpdated\r\n          },\r\n          supabase: {\r\n            status: supabaseStatus,\r\n            lastUpdated: supabaseLastUpdated\r\n          },\r\n          environment: {\r\n            status: envStatus\r\n          },\r\n          recommended_source: this.AWS_MANAGED_KEYS.includes(keyName) ? 'aws' : 'supabase',\r\n          migration_needed: awsStatus !== 'configured' && this.AWS_MANAGED_KEYS.includes(keyName)\r\n        };\r\n\r\n      } catch (error: any) {\r\n        status[keyName] = {\r\n          error: error.message,\r\n          aws: { status: 'error' },\r\n          supabase: { status: 'error' },\r\n          environment: { status: 'unknown' }\r\n        };\r\n      }\r\n    }\r\n\r\n    return status;\r\n  }\r\n\r\nprivate async getFromSupabase(keyName: string): Promise<string> {\r\n  // Get the service role key from AWS first\r\n  const serviceRoleKey = await this.getConfig('SUPABASE_SERVICE_ROLE');\r\n  \r\n  const headers = {\r\n    apikey: serviceRoleKey,\r\n    Authorization: `Bearer ${serviceRoleKey}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n    const response = await fetchJson<ConfigItem[]>(\r\n      `${this.env.SUPABASE_URL}/rest/v1/app_config?key_name=eq.${keyName}&environment=eq.production&select=key_value`,\r\n      { headers }\r\n    );\r\n\r\n    if (!response.length) {\r\n      return '';\r\n    }\r\n\r\n    return this.decryptValue(response[0].key_value);\r\n  }\r\n\r\n  private async updateSupabase(keyName: string, newValue: string, updatedBy: string): Promise<void> {\r\n    const headers = {\r\n      apikey: this.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${this.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    const encryptedValue = this.encryptValue(newValue);\r\n\r\n    await fetchJson(\r\n      `${this.env.SUPABASE_URL}/rest/v1/app_config?key_name=eq.${keyName}&environment=eq.production`,\r\n      {\r\n        method: 'PATCH',\r\n        headers,\r\n        body: JSON.stringify({\r\n          key_value: encryptedValue,\r\n          updated_at: new Date().toISOString(),\r\n          updated_by: updatedBy\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  private async getSupabaseMetadata(keyName: string): Promise<ConfigItem | null> {\r\n    const headers = {\r\n      apikey: this.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${this.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    const response = await fetchJson<ConfigItem[]>(\r\n      `${this.env.SUPABASE_URL}/rest/v1/app_config?key_name=eq.${keyName}&environment=eq.production&select=*`,\r\n      { headers }\r\n    );\r\n\r\n    return response.length > 0 ? response[0] : null;\r\n  }\r\n\r\n  private async notifyConfigChange(keyName: string, updatedBy: string): Promise<void> {\r\n    try {\r\n      // Trigger your existing auto-sync system\r\n      const notificationPromises = [];\r\n\r\n      // Trigger Netlify rebuild\r\n      if (this.env.NETLIFY_BUILD_HOOK_URL) {\r\n        notificationPromises.push(\r\n          fetch(this.env.NETLIFY_BUILD_HOOK_URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              trigger: 'aws_config_update',\r\n              keyName,\r\n              updatedBy,\r\n              timestamp: new Date().toISOString()\r\n            })\r\n          })\r\n        );\r\n      }\r\n\r\n      // Clear CDN cache\r\n      if (this.env.CLOUDFLARE_ZONE_ID && this.env.CLOUDFLARE_API_TOKEN) {\r\n        notificationPromises.push(\r\n          fetch(`https://api.cloudflare.com/client/v4/zones/${this.env.CLOUDFLARE_ZONE_ID}/purge_cache`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Authorization': `Bearer ${this.env.CLOUDFLARE_API_TOKEN}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              files: [\r\n                `${this.env.WORKER_URL || ''}/config`,\r\n                `${this.env.WORKER_URL || ''}/v1/config`\r\n              ]\r\n            })\r\n          })\r\n        );\r\n      }\r\n\r\n      await Promise.allSettled(notificationPromises);\r\n      \r\n      logger('info', 'Config change notifications sent', { keyName, updatedBy });\r\n\r\n    } catch (error: any) {\r\n      logger('warn', 'Failed to send config change notifications', { \r\n        keyName, \r\n        error: error.message \r\n      });\r\n    }\r\n  }\r\n\r\n  private decryptValue(encryptedValue: string): string {\r\n    try {\r\n      return atob(encryptedValue);\r\n    } catch {\r\n      return encryptedValue;\r\n    }\r\n  }\r\n\r\n  private encryptValue(value: string): string {\r\n    return btoa(value);\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nlet enhancedConfigManager: EnhancedConfigManager | null = null;\r\n\r\nexport function getEnhancedConfigManager(env: Env): EnhancedConfigManager {\r\n  if (!enhancedConfigManager) {\r\n    enhancedConfigManager = new EnhancedConfigManager(env);\r\n  }\r\n  return enhancedConfigManager;\r\n}\r\n\r\n// Backward compatibility - replace your existing exports\r\nexport const getConfigManager = getEnhancedConfigManager;\r\nexport async function getApiKey(keyName: string, env: Env): Promise<string> {\r\n  const manager = getEnhancedConfigManager(env);\r\n  return await manager.getConfig(keyName);\r\n}\r\n", "import { ANALYSIS_PIPELINE_CONFIG } from '../config/analysis-pipeline.js';\r\nimport type { ModelConfig } from '../config/analysis-pipeline.js';\r\nimport { getApiKey } from './enhanced-config-manager.js';\r\nimport { logger } from '../utils/logger.js';\r\n\r\nexport interface UniversalRequest {\r\n  model_name: string;\r\n  system_prompt: string;\r\n  user_prompt: string;\r\n  max_tokens: number;\r\n  temperature?: number;\r\n  json_schema?: any;\r\n  response_format?: 'json' | 'text';\r\n}\r\n\r\nexport interface UniversalResponse {\r\n  content: string;\r\n  usage: {\r\n    input_tokens: number;\r\n    output_tokens: number;\r\n    total_cost: number;\r\n  };\r\n  model_used: string;\r\n  provider: string;\r\n}\r\n\r\nexport class UniversalAIAdapter {\r\n  private env: any;\r\n  private requestId: string;\r\n\r\n  constructor(env: any, requestId: string) {\r\n    this.env = env;\r\n    this.requestId = requestId;\r\n  }\r\n\r\n  async executeRequest(request: UniversalRequest): Promise<UniversalResponse> {\r\n    const modelConfig = ANALYSIS_PIPELINE_CONFIG.models[request.model_name];\r\n    if (!modelConfig) {\r\n      throw new Error(`Unknown model: ${request.model_name}`);\r\n    }\r\n\r\n    try {\r\n      return await this.callModel(modelConfig, request);\r\n    } catch (error: any) {\r\n      logger('warn', `Primary model ${request.model_name} failed, trying backup`, { \r\n        error: error.message,\r\n        requestId: this.requestId \r\n      });\r\n\r\n      if (modelConfig.backup) {\r\n        const backupConfig = ANALYSIS_PIPELINE_CONFIG.models[modelConfig.backup];\r\n        if (backupConfig) {\r\n          return await this.callModel(backupConfig, request);\r\n        }\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async callModel(config: ModelConfig, request: UniversalRequest): Promise<UniversalResponse> {\r\n    switch (config.api_format) {\r\n      case 'gpt5_responses':\r\n        return await this.callGPT5Responses(config, request);\r\n      case 'gpt_chat':\r\n        return await this.callGPTChat(config, request);\r\n      case 'claude_messages':\r\n        return await this.callClaudeMessages(config, request);\r\n      default:\r\n        throw new Error(`Unsupported API format: ${config.api_format}`);\r\n    }\r\n  }\r\n\r\nprivate async callGPT5Responses(config: ModelConfig, request: UniversalRequest): Promise<UniversalResponse> {\r\n  const openaiKey = await getApiKey('OPENAI_API_KEY', this.env);\r\n  if (!openaiKey) throw new Error('OpenAI API key not available');\r\n\r\n  logger('info', '\uD83D\uDE80 GPT-5 Request Starting', {\r\n    model: config.name,\r\n    max_tokens: request.max_tokens,\r\n    has_json_schema: !!request.json_schema,\r\n    response_format: request.response_format,\r\n    temperature: request.temperature,\r\n    requestId: this.requestId\r\n  });\r\n\r\nconst body = {\r\n  model: config.name,\r\n  messages: [  // \u2705 CORRECT\r\n    { role: 'system', content: request.system_prompt },\r\n    { role: 'user', content: request.user_prompt }\r\n  ],\r\n  max_completion_tokens: request.max_tokens, // \u2705 CORRECT\r\n  ...(request.json_schema && {\r\n    response_format: {\r\n      type: 'json_schema',\r\n      json_schema: request.json_schema\r\n    }\r\n  })\r\n};\r\n\r\n  logger('info', '\uD83D\uDCE4 GPT-5 Request Body', {\r\n    model: body.model,\r\n    input_length: body.input?.length,\r\n    max_output_tokens: body.max_output_tokens,\r\n    has_response_format: !!body.response_format,\r\n    response_format_type: body.response_format?.type,\r\n    temperature: body.temperature,\r\n    requestId: this.requestId\r\n  });\r\n\r\nconst response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n  method: 'POST',\r\n  headers: {\r\n    'Authorization': `Bearer ${openaiKey}`,\r\n    'Content-Type': 'application/json'\r\n  },\r\n  body: JSON.stringify(body)\r\n});\r\n\r\n  logger('info', '\uD83D\uDCE5 GPT-5 Response Status', {\r\n    status: response.status,\r\n    statusText: response.statusText,\r\n    ok: response.ok,\r\n    headers: Object.fromEntries(response.headers.entries()),\r\n    requestId: this.requestId\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorBody = await response.text();\r\n    logger('error', '\u274C GPT-5 API Error Details', {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      errorBody: errorBody,\r\n      requestId: this.requestId\r\n    });\r\n    throw new Error(`GPT-5 API error: ${response.status} - ${errorBody}`);\r\n  }\r\n\r\n  const data = await response.json();\r\n  logger('info', '\u2705 GPT-5 Response Success', {\r\n    has_choices: !!data.choices,\r\n    choices_length: data.choices?.length,\r\n    has_usage: !!data.usage,\r\n    first_choice_content_length: data.choices?.[0]?.message?.content?.length,\r\n    usage_tokens: data.usage,\r\n    requestId: this.requestId\r\n  });\r\n\r\n  const content = data.choices?.[0]?.message?.content || '';\r\n  const usage = data.usage || {};\r\n\r\n  return {\r\n    content,\r\n    usage: {\r\n      input_tokens: usage.prompt_tokens || 0,\r\n      output_tokens: usage.completion_tokens || 0,\r\n      total_cost: this.calculateCost(usage.prompt_tokens || 0, usage.completion_tokens || 0, config)\r\n    },\r\n    model_used: config.name,\r\n    provider: config.provider\r\n  };\r\n}\r\n\r\n  private async callClaudeMessages(config: ModelConfig, request: UniversalRequest): Promise<UniversalResponse> {\r\n    const claudeKey = await getApiKey('CLAUDE_API_KEY', this.env);\r\n    if (!claudeKey) throw new Error('Claude API key not available');\r\n\r\n    const body = {\r\n      model: config.name,\r\n      system: request.system_prompt,\r\n      messages: [\r\n        { role: 'user', content: request.user_prompt }\r\n      ],\r\n      max_tokens: request.max_tokens,\r\n      temperature: request.temperature || 0.7\r\n    };\r\n\r\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'x-api-key': claudeKey,\r\n        'anthropic-version': '2023-06-01',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Claude API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const content = data.content?.[0]?.text || '';\r\n    const usage = data.usage || {};\r\n\r\n    return {\r\n      content,\r\n      usage: {\r\n        input_tokens: usage.input_tokens || 0,\r\n        output_tokens: usage.output_tokens || 0,\r\n        total_cost: this.calculateCost(usage.input_tokens || 0, usage.output_tokens || 0, config)\r\n      },\r\n      model_used: config.name,\r\n      provider: config.provider\r\n    };\r\n  }\r\n\r\n  private calculateCost(inputTokens: number, outputTokens: number, config: ModelConfig): number {\r\n    const inputCost = (inputTokens / 1000) * config.cost_per_1k_in;\r\n    const outputCost = (outputTokens / 1000) * config.cost_per_1k_out;\r\n    return inputCost + outputCost;\r\n  }\r\n}\r\n\r\n// Model Selection Logic\r\nexport function selectModel(\r\n  stage: string, \r\n  modelTier: 'premium' | 'balanced' | 'economy',\r\n  context?: { triage?: { lead_score: number } }\r\n): string {\r\n  const mapping = ANALYSIS_PIPELINE_CONFIG.analysis_mappings[stage];\r\n  if (!mapping) {\r\n    throw new Error(`No model mapping found for stage: ${stage}`);\r\n  }\r\n\r\n  // Dynamic tier upgrade for high-value leads\r\n  if (context?.triage?.lead_score && context.triage.lead_score > 70 && modelTier === 'balanced') {\r\n    return mapping.premium || mapping.balanced;\r\n  }\r\n\r\n  return mapping[modelTier];\r\n}\r\n", "import { getApiKey } from '../services/enhanced-config-manager.js';\r\n\r\nexport async function testGPT5Direct(env: any, requestId: string) {\r\n  console.log('\uD83E\uDDEA Testing GPT-5 direct API call');\r\n  \r\n  try {\r\n    const apiKey = await getApiKey('OPENAI_API_KEY', env);\r\n    if (!apiKey) throw new Error('OpenAI API key not available');\r\n\r\n    // Test 1: Try gpt-5-nano\r\n    console.log('Testing gpt-5-nano...');\r\n    const response1 = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-5-nano',\r\n        messages: [\r\n          { role: 'system', content: 'You are a helpful assistant.' },\r\n          { role: 'user', content: 'Say hello in JSON format with a \"message\" field.' }\r\n        ],\r\n        max_completion_tokens: 50,\r\n        response_format: { type: 'json_object' }\r\n      })\r\n    });\r\n\r\n    if (response1.ok) {\r\n      const data1 = await response1.json();\r\n      console.log('\u2705 gpt-5-nano works:', data1);\r\n      return { success: true, model: 'gpt-5-nano', data: data1 };\r\n    } else {\r\n      const error1 = await response1.text();\r\n      console.log('\u274C gpt-5-nano failed:', response1.status, error1);\r\n    }\r\n\r\n    // Test 2: Try gpt-5-mini\r\n    console.log('Testing gpt-5-mini...');\r\n    const response2 = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-5-mini',\r\n        messages: [\r\n          { role: 'system', content: 'You are a helpful assistant.' },\r\n          { role: 'user', content: 'Say hello in JSON format with a \"message\" field.' }\r\n        ],\r\n        max_completion_tokens: 50,\r\n        response_format: { type: 'json_object' }\r\n      })\r\n    });\r\n\r\n    if (response2.ok) {\r\n      const data2 = await response2.json();\r\n      console.log('\u2705 gpt-5-mini works:', data2);\r\n      return { success: true, model: 'gpt-5-mini', data: data2 };\r\n    } else {\r\n      const error2 = await response2.text();\r\n      console.log('\u274C gpt-5-mini failed:', response2.status, error2);\r\n    }\r\n\r\n    // Test 3: Try gpt-5\r\n    console.log('Testing gpt-5...');\r\n    const response3 = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-5',\r\n        messages: [\r\n          { role: 'system', content: 'You are a helpful assistant.' },\r\n          { role: 'user', content: 'Say hello in JSON format with a \"message\" field.' }\r\n        ],\r\n        max_completion_tokens: 50,\r\n        response_format: { type: 'json_object' }\r\n      })\r\n    });\r\n\r\n    if (response3.ok) {\r\n      const data3 = await response3.json();\r\n      console.log('\u2705 gpt-5 works:', data3);\r\n      return { success: true, model: 'gpt-5', data: data3 };\r\n    } else {\r\n      const error3 = await response3.text();\r\n      console.log('\u274C gpt-5 failed:', response3.status, error3);\r\n    }\r\n\r\n    // Fallback: Test working model\r\n    console.log('Testing fallback gpt-4o-mini...');\r\n    const response4 = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-4o-mini',\r\n        messages: [\r\n          { role: 'system', content: 'You are a helpful assistant.' },\r\n          { role: 'user', content: 'Say hello in JSON format with a \"message\" field.' }\r\n        ],\r\n        max_tokens: 50,\r\n        response_format: { type: 'json_object' }\r\n      })\r\n    });\r\n\r\n    if (response4.ok) {\r\n      const data4 = await response4.json();\r\n      console.log('\u2705 gpt-4o-mini works as fallback:', data4);\r\n      return { success: true, model: 'gpt-4o-mini', data: data4, note: 'fallback' };\r\n    } else {\r\n      const error4 = await response4.text();\r\n      console.log('\u274C gpt-4o-mini also failed:', response4.status, error4);\r\n      return { success: false, error: 'All models failed' };\r\n    }\r\n\r\n  } catch (error: any) {\r\n    console.error('\uD83E\uDDEA GPT-5 test failed:', error.message);\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n", "import { logger } from '../utils/logger.js';\r\nimport type { PostData, EngagementData, AnalysisType } from '../types/interfaces.js';\r\n\r\nexport function validateAnalysisResult(result: any): AnalysisResult {\r\n  return {\r\n    score: Math.round(parseFloat(result.score) || 0),\r\n    engagement_score: Math.round(parseFloat(result.engagement_score) || 0),\r\n    niche_fit: Math.round(parseFloat(result.niche_fit) || 0),\r\n    audience_quality: result.audience_quality || 'Unknown',\r\n    engagement_insights: result.engagement_insights || 'No insights available',\r\n    selling_points: Array.isArray(result.selling_points) ? result.selling_points : [],\r\n    reasons: Array.isArray(result.reasons) ? result.reasons : (Array.isArray(result.selling_points) ? result.selling_points : [])\r\n  };\r\n}\r\n\r\nexport function extractUsername(input: string): string {\r\n  try {\r\n    const cleaned = input.trim().replace(/^@/, '').toLowerCase();\r\n    if (cleaned.includes('instagram.com')) {\r\n      const url = new URL(cleaned);\r\n      const pathSegments = url.pathname.split('/').filter(Boolean);\r\n      return pathSegments[0] || '';\r\n    }\r\n    return cleaned.replace(/[^a-z0-9._]/g, '');\r\n  } catch {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function extractHashtags(text: string): string[] {\r\n  if (!text) return [];\r\n  const hashtagRegex = /#[\\w\\u0590-\\u05ff]+/g;\r\n  const matches = text.match(hashtagRegex);\r\n  return matches ? matches.map(tag => tag.toLowerCase()) : [];\r\n}\r\n\r\nexport function extractMentions(text: string): string[] {\r\n  if (!text) return [];\r\n  const mentionRegex = /@[\\w.]+/g;\r\n  const matches = text.match(mentionRegex);\r\n  return matches ? matches.map(mention => mention.toLowerCase()) : [];\r\n}\r\n\r\nexport function normalizeRequest(body: AnalysisRequest) {\r\n  const errors: string[] = [];\r\n  \r\n  let profile_url = body.profile_url;\r\n  if (!profile_url && body.username) {\r\n    const username = extractUsername(body.username);\r\n    profile_url = username ? `https://instagram.com/${username}` : '';\r\n  }\r\n  \r\n  const analysis_type = body.analysis_type || body.type;\r\n  const business_id = body.business_id;\r\n  const user_id = body.user_id;\r\n\r\n  if (!profile_url) errors.push('profile_url or username is required');\r\nif (!analysis_type || !['light', 'deep', 'xray'].includes(analysis_type)) {\r\n  errors.push('analysis_type must be \"light\", \"deep\", or \"xray\"');\r\n}\r\n  if (!business_id) errors.push('business_id is required');\r\n  if (!user_id) errors.push('user_id is required');\r\n\r\n  if (errors.length > 0) {\r\n    throw new Error(errors.join(', '));\r\n  }\r\n\r\n  return {\r\n    profile_url: profile_url!,\r\n    username: extractUsername(profile_url!),\r\n    analysis_type: analysis_type as AnalysisType,\r\n    business_id,\r\n    user_id\r\n  };\r\n}\r\nexport function validateProfileData(responseData: any, analysisType?: string): ProfileData {\r\n  if (!responseData) {\r\n    throw new Error('No response data received from scraper');\r\n  }\r\n  \r\n  if (typeof responseData !== 'object') {\r\n    throw new Error(`Invalid response data type: ${typeof responseData}`);\r\n  }\r\n\r\n  // Check for profile not found case\r\n  if (Array.isArray(responseData) && responseData.length > 0) {\r\n    const profile = responseData[0];\r\n    const hasOnlyUsername = Object.keys(profile).length <= 2 && profile.username && !profile.followersCount;\r\n    if (hasOnlyUsername) {\r\n      throw new Error('PROFILE_NOT_FOUND');\r\n    }\r\n  } else if (!Array.isArray(responseData)) {\r\n    const hasOnlyUsername = Object.keys(responseData).length <= 2 && responseData.username && !responseData.followersCount;\r\n    if (hasOnlyUsername) {\r\n      throw new Error('PROFILE_NOT_FOUND');\r\n    }\r\n  }\r\n\r\n  try {\r\n    logger('info', 'Starting CORRECTED profile data validation for nested posts structure', { \r\n      analysisType, \r\n      isArray: Array.isArray(responseData),\r\n      length: Array.isArray(responseData) ? responseData.length : 'not-array',\r\n      dataType: typeof responseData\r\n    });\r\n\r\n    if (analysisType === 'deep') {\r\n      let profileItem;\r\n      let posts = [];\r\n\r\n      // Handle different response structures\r\n      if (Array.isArray(responseData)) {\r\n        // Find profile item in array\r\n        profileItem = responseData.find(item => \r\n          item.username || item.ownerUsername || \r\n          (item.followersCount !== undefined && item.postsCount !== undefined) ||\r\n          (item.latestPosts !== undefined)\r\n        );\r\n        \r\n        // Also check for posts as separate array items (fallback)\r\n        const separatePosts = responseData.filter(item => \r\n          item.shortCode && (item.likesCount !== undefined || item.likes !== undefined)\r\n        );\r\n        \r\n        if (separatePosts.length > 0) {\r\n          posts = separatePosts;\r\n          logger('info', 'Found posts as separate array items', { postsCount: posts.length });\r\n        }\r\n      } else {\r\n        // Single object response\r\n        profileItem = responseData;\r\n      }\r\n\r\n      if (!profileItem) {\r\n        throw new Error('No profile data found in scraper response');\r\n      }\r\n\r\n      // \u2705 CRITICAL FIX: Check for nested posts in latestPosts field\r\n      if (profileItem.latestPosts && Array.isArray(profileItem.latestPosts) && profileItem.latestPosts.length > 0) {\r\n        posts = profileItem.latestPosts;\r\n        logger('info', 'Found posts in nested latestPosts field', { \r\n          nestedPostsCount: posts.length,\r\n          samplePost: posts[0] ? {\r\n            keys: Object.keys(posts[0]),\r\n            shortCode: posts[0].shortCode || posts[0].code,\r\n            likes: posts[0].likesCount || posts[0].likes,\r\n            comments: posts[0].commentsCount || posts[0].comments\r\n          } : 'no-sample'\r\n        });\r\n      }\r\n\r\n      logger('info', 'Profile and posts detection completed', {\r\n        profileFound: !!profileItem,\r\n        postsSource: posts.length > 0 ? (profileItem.latestPosts ? 'nested_latestPosts' : 'separate_array_items') : 'none',\r\n        postsCount: posts.length,\r\n        profilePostsCount: profileItem.postsCount,\r\n        latestPostsLength: profileItem.latestPosts?.length || 0\r\n      });\r\n\r\n      let engagement: EngagementData | undefined;\r\n      if (posts.length > 0) {\r\n        logger('info', 'Starting MANUAL ENGAGEMENT CALCULATION with nested posts data');\r\n        \r\n        // Enhanced post validation with multiple field name support\r\n        const validPosts = posts.filter(post => {\r\n          const likes = parseInt(String(\r\n            post.likesCount || post.likes || post.like_count || \r\n            post.likeCount || post.likescount || 0\r\n          )) || 0;\r\n          \r\n          const comments = parseInt(String(\r\n            post.commentsCount || post.comments || post.comment_count || \r\n            post.commentCount || post.commentscount || post.commentCounts || 0\r\n          )) || 0;\r\n          \r\n          const isValid = likes > 0 || comments > 0;\r\n          \r\n          if (!isValid) {\r\n            logger('warn', 'Post filtered out - no engagement data', {\r\n              shortCode: post.shortCode || post.code || post.id,\r\n              availableFields: Object.keys(post),\r\n              rawLikesFields: {\r\n                likesCount: post.likesCount,\r\n                likes: post.likes,\r\n                like_count: post.like_count\r\n              },\r\n              rawCommentsFields: {\r\n                commentsCount: post.commentsCount,\r\n                comments: post.comments,\r\n                comment_count: post.comment_count\r\n              },\r\n              parsedLikes: likes,\r\n              parsedComments: comments\r\n            });\r\n          }\r\n          \r\n          return isValid;\r\n        });\r\n\r\n        logger('info', 'Manual calculation - Step 1: Filter valid posts from nested data', {\r\n          totalPosts: posts.length,\r\n          validPosts: validPosts.length,\r\n          filteredOut: posts.length - validPosts.length,\r\n          validPostsSample: validPosts.slice(0, 3).map(post => ({\r\n            shortCode: post.shortCode || post.code || post.id,\r\n            likes: parseInt(String(post.likesCount || post.likes || post.like_count || 0)) || 0,\r\n            comments: parseInt(String(post.commentsCount || post.comments || post.comment_count || 0)) || 0,\r\n            caption: (post.caption || '').substring(0, 50)\r\n          }))\r\n        });\r\n\r\n        if (validPosts.length > 0) {\r\n          // Calculate totals from valid posts\r\n          let totalLikes = 0;\r\n          let totalComments = 0;\r\n\r\n          for (const post of validPosts) {\r\n            const likes = parseInt(String(\r\n              post.likesCount || post.likes || post.like_count || \r\n              post.likeCount || post.likescount || 0\r\n            )) || 0;\r\n            \r\n            const comments = parseInt(String(\r\n              post.commentsCount || post.comments || post.comment_count || \r\n              post.commentCount || post.commentscount || post.commentCounts || 0\r\n            )) || 0;\r\n            \r\n            totalLikes += likes;\r\n            totalComments += comments;\r\n          }\r\n\r\n          logger('info', 'Manual calculation - Step 2: Calculate totals from nested posts', {\r\n            totalLikes,\r\n            totalComments,\r\n            validPostsCount: validPosts.length,\r\n            averageLikesCalc: `${totalLikes} / ${validPosts.length} = ${Math.round(totalLikes / validPosts.length)}`,\r\n            averageCommentsCalc: `${totalComments} / ${validPosts.length} = ${Math.round(totalComments / validPosts.length)}`\r\n          });\r\n\r\n          // Calculate averages\r\n          const avgLikes = validPosts.length > 0 ? Math.round(totalLikes / validPosts.length) : 0;\r\n          const avgComments = validPosts.length > 0 ? Math.round(totalComments / validPosts.length) : 0;\r\n\r\n          // Calculate engagement rate\r\n          const totalEngagement = avgLikes + avgComments;\r\n          const followers = parseInt(String(\r\n            profileItem.followersCount || profileItem.followers || \r\n            profileItem.follower_count || profileItem.followerscount || 0\r\n          )) || 0;\r\n          \r\n          const engagementRate = followers > 0 ? \r\n            Math.round((totalEngagement / followers) * 10000) / 100 : 0;\r\n\r\n          logger('info', 'Manual calculation - Steps 3-4: Calculate averages and engagement rate', {\r\n            avgLikes,\r\n            avgComments,\r\n            totalEngagement,\r\n            followers,\r\n            followersSource: profileItem.followersCount ? 'followersCount' : profileItem.followers ? 'followers' : 'other',\r\n            engagementRate,\r\n            engagementCalc: `(${totalEngagement} / ${followers}) * 100 = ${engagementRate}%`\r\n          });\r\n\r\n          // Create engagement object\r\n          if (avgLikes > 0 || avgComments > 0) {\r\n            engagement = {\r\n              avgLikes,\r\n              avgComments,\r\n              engagementRate,\r\n              totalEngagement,\r\n              postsAnalyzed: validPosts.length\r\n            };\r\n\r\n            logger('info', '\u2705 MANUAL ENGAGEMENT CALCULATION SUCCESSFUL with nested posts', {\r\n              postsAnalyzed: engagement.postsAnalyzed,\r\n              avgLikes: engagement.avgLikes,\r\n              avgComments: engagement.avgComments,\r\n              engagementRate: engagement.engagementRate,\r\n              totalEngagement: engagement.totalEngagement,\r\n              dataSource: 'nested_latestPosts_field',\r\n              calculationMethod: 'manual_from_individual_posts'\r\n            });\r\n          } else {\r\n            logger('error', '\u274C ENGAGEMENT CALCULATION FAILED - All calculated values are zero', {\r\n              avgLikes,\r\n              avgComments,\r\n              totalLikes,\r\n              totalComments,\r\n              validPostsCount: validPosts.length,\r\n              followers,\r\n              debugInfo: 'Check if posts have valid engagement data'\r\n            });\r\n          }\r\n        } else {\r\n          logger('error', '\u274C No valid posts with engagement found in nested data', {\r\n            totalPostsInLatestPosts: posts.length,\r\n            samplePostStructures: posts.slice(0, 2).map(post => ({\r\n              allKeys: Object.keys(post),\r\n              shortCode: post.shortCode || post.code,\r\n              possibleLikesValues: {\r\n                likesCount: post.likesCount,\r\n                likes: post.likes,\r\n                like_count: post.like_count\r\n              },\r\n              possibleCommentsValues: {\r\n                commentsCount: post.commentsCount,\r\n                comments: post.comments,\r\n                comment_count: post.comment_count\r\n              }\r\n            }))\r\n          });\r\n        }\r\n      } else {\r\n        logger('error', '\u274C No posts found in nested latestPosts field', {\r\n          profilePostsCount: profileItem.postsCount,\r\n          latestPostsExists: !!profileItem.latestPosts,\r\n          latestPostsType: Array.isArray(profileItem.latestPosts) ? 'array' : typeof profileItem.latestPosts,\r\n          latestPostsLength: profileItem.latestPosts?.length || 0,\r\n          profileKeys: Object.keys(profileItem).slice(0, 20)\r\n        });\r\n      }\r\n\r\n      // Process latestPosts for return (regardless of engagement calculation success)\r\n      const latestPosts: PostData[] = posts.slice(0, 12).map(post => {\r\n        const caption = post.caption || post.edge_media_to_caption?.edges?.[0]?.node?.text || post.title || '';\r\n        const hashtags = extractHashtags(caption);\r\n        const mentions = extractMentions(caption);\r\n\r\n        return {\r\n          id: post.id || post.shortCode || post.code || post.pk || '',\r\n          shortCode: post.shortCode || post.code || post.pk || '',\r\n          caption: caption,\r\n          likesCount: parseInt(String(post.likesCount || post.likes || post.like_count || 0)) || 0,\r\n          commentsCount: parseInt(String(post.commentsCount || post.comments || post.comment_count || 0)) || 0,\r\n          timestamp: post.timestamp || post.taken_at || post.created_time || new Date().toISOString(),\r\n          url: post.url || `https://instagram.com/p/${post.shortCode || post.code}/`,\r\n          type: post.type || post.__typename || (post.isVideo ? 'video' : 'photo'),\r\n          hashtags,\r\n          mentions,\r\n          viewCount: parseInt(String(post.viewCount || post.views || post.video_view_count || 0)) || undefined,\r\n          isVideo: Boolean(post.isVideo || post.type === 'video' || post.__typename === 'GraphVideo')\r\n        };\r\n      });\r\n\r\n      // Build final result\r\n      const result = {\r\n        username: (profileItem.username || profileItem.ownerUsername || '').toLowerCase(),\r\n        displayName: profileItem.fullName || profileItem.displayName || profileItem.full_name || '',\r\n        bio: profileItem.biography || profileItem.bio || '',\r\n        followersCount: parseInt(String(profileItem.followersCount || profileItem.followers || 0)) || 0,\r\n        followingCount: parseInt(String(profileItem.followingCount || profileItem.following || 0)) || 0,\r\n        postsCount: parseInt(String(profileItem.postsCount || profileItem.posts || latestPosts.length)) || 0,\r\n        isVerified: Boolean(profileItem.verified || profileItem.isVerified || profileItem.is_verified),\r\n        isPrivate: Boolean(profileItem.private || profileItem.isPrivate || profileItem.is_private),\r\n        profilePicUrl: profileItem.profilePicUrl || profileItem.profilePicture || profileItem.profile_pic_url || '',\r\n        externalUrl: profileItem.externalUrl || profileItem.website || profileItem.external_url || '',\r\n        isBusinessAccount: Boolean(profileItem.isBusinessAccount || profileItem.is_business_account),\r\n        latestPosts,\r\n        engagement\r\n      };\r\n\r\n      logger('info', '\u2705 Profile validation completed with nested posts support', {\r\n        username: result.username,\r\n        followers: result.followersCount,\r\n        postsFound: result.latestPosts.length,\r\n        hasRealEngagement: !!result.engagement,\r\n        engagementSummary: result.engagement ? {\r\n          avgLikes: result.engagement.avgLikes,\r\n          avgComments: result.engagement.avgComments,\r\n          engagementRate: result.engagement.engagementRate,\r\n          postsAnalyzed: result.engagement.postsAnalyzed\r\n        } : 'NO_ENGAGEMENT_DATA'\r\n      });\r\n\r\n      return result;\r\n\r\n    } else {\r\n      // Light analysis remains the same\r\n      const profile = Array.isArray(responseData) ? responseData[0] : responseData;\r\n      \r\n      if (!profile || !profile.username) {\r\n        throw new Error('Invalid profile data received');\r\n      }\r\n\r\n      return {\r\n        username: profile.username,\r\n        displayName: profile.fullName || profile.displayName || '',\r\n        bio: profile.biography || profile.bio || '',\r\n        followersCount: parseInt(profile.followersCount?.toString() || '0') || 0,\r\n        followingCount: parseInt(profile.followingCount?.toString() || '0') || 0,\r\n        postsCount: parseInt(profile.postsCount?.toString() || '0') || 0,\r\n        isVerified: Boolean(profile.verified || profile.isVerified),\r\n        isPrivate: Boolean(profile.private || profile.isPrivate),\r\n        profilePicUrl: profile.profilePicUrl || profile.profilePicture || '',\r\n        externalUrl: profile.externalUrl || profile.website || '',\r\n        isBusinessAccount: Boolean(profile.isBusinessAccount),\r\n        latestPosts: [],\r\n        engagement: undefined\r\n      };\r\n    }\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'Profile validation failed', { \r\n      error: error.message, \r\n      responseDataType: typeof responseData,\r\n      responseDataKeys: typeof responseData === 'object' && responseData ? Object.keys(responseData).slice(0, 20) : 'not-object'\r\n    });\r\n    throw new Error(`Profile validation failed: ${error.message}`);\r\n  }\r\n}\r\nexport function calculateConfidenceLevel(profile: ProfileData, analysisType: string): number {\r\n  let confidence = 50;\r\n  if (profile.dataQuality === 'high') confidence += 30;\r\n  else if (profile.dataQuality === 'medium') confidence += 15;\r\n  if (profile.isVerified) confidence += 10;\r\n  if ((profile.engagement?.postsAnalyzed || 0) > 0) {\r\n    confidence += 20;\r\n    if ((profile.engagement?.postsAnalyzed || 0) >= 5) confidence += 5;\r\n    if ((profile.engagement?.postsAnalyzed || 0) >= 10) confidence += 5;\r\n  }\r\n  if (analysisType === 'deep') confidence += 10;\r\n  if (profile.isPrivate) confidence -= 15;\r\n  return Math.min(95, Math.max(20, confidence));\r\n}\r\n\r\nexport function extractPostThemes(posts: PostData[]): string {\r\n  if (!posts || posts.length === 0) return 'content themes not available';\r\n  const allHashtags = posts.flatMap(post => post.hashtags || []);\r\n  const hashtagCounts = allHashtags.reduce((acc, tag) => {\r\n    acc[tag] = (acc[tag] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n  const topHashtags = Object.entries(hashtagCounts)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .slice(0, 3)\r\n    .map(([tag]) => tag.replace('#', ''));\r\n  return topHashtags.length > 0 ? \r\n    topHashtags.join(', ') : 'content themes not available';\r\n}\r\n", "import type { ProfileData } from '../types/interfaces.js';\r\n\r\nexport interface MicroSnapshot {\r\n  username: string;\r\n  followers: number;\r\n  verified: boolean;\r\n  private: boolean;\r\n  bio_short: string;\r\n  external_domains: string[];\r\n  posts_30d: number;\r\n  top_captions: string[];\r\n  engagement_signals: {\r\n    avg_likes: number;\r\n    avg_comments: number;\r\n    posts_analyzed: number;\r\n  } | null;\r\n}\r\n\r\nexport function createMicroSnapshot(profile: ProfileData): MicroSnapshot {\r\n  // Extract domains from external URL\r\n  const domains: string[] = [];\r\n  if (profile.externalUrl) {\r\n    try {\r\n      const url = new URL(profile.externalUrl);\r\n      domains.push(url.hostname.replace('www.', ''));\r\n    } catch {\r\n      // Invalid URL, skip\r\n    }\r\n  }\r\n\r\n  // Get top 3 captions, truncated to 50 chars each\r\n  const topCaptions = (profile.latestPosts || [])\r\n    .slice(0, 3)\r\n    .map(post => (post.caption || '').slice(0, 50).trim())\r\n    .filter(caption => caption.length > 0);\r\n\r\n  // Estimate posts in last 30 days based on account age and total posts\r\n  // Simplified: assume recent activity if posts > followers/100\r\n  const estimatedRecentPosts = profile.followersCount > 0 \r\n    ? Math.min(profile.postsCount, Math.max(1, Math.floor(profile.postsCount / 12))) // Rough monthly estimate\r\n    : Math.min(profile.postsCount, 10);\r\n\r\n  return {\r\n    username: profile.username,\r\n    followers: profile.followersCount,\r\n    verified: profile.isVerified,\r\n    private: profile.isPrivate,\r\n    bio_short: (profile.bio || '').slice(0, 120).trim(), // Truncate to 120 chars\r\n    external_domains: domains,\r\n    posts_30d: estimatedRecentPosts,\r\n    top_captions: topCaptions,\r\n    engagement_signals: profile.engagement ? {\r\n      avg_likes: profile.engagement.avgLikes,\r\n      avg_comments: profile.engagement.avgComments,\r\n      posts_analyzed: profile.engagement.postsAnalyzed\r\n    } : null\r\n  };\r\n}\r\n\r\nexport function getSnapshotTokenCount(snapshot: MicroSnapshot): number {\r\n  // Rough token estimation for budget control\r\n  const bioTokens = Math.ceil(snapshot.bio_short.length / 4);\r\n  const captionTokens = snapshot.top_captions.reduce((sum, cap) => sum + Math.ceil(cap.length / 4), 0);\r\n  const structureTokens = 50; // JSON structure overhead\r\n  \r\n  return bioTokens + captionTokens + structureTokens;\r\n}\r\n", "import type { ProfileData, BusinessProfile } from '../types/interfaces.js';\r\n\r\n// ===============================================================================\r\n// JSON SCHEMAS FOR NEW PAYLOAD STRUCTURE\r\n// ===============================================================================\r\n\r\nexport function getLightAnalysisJsonSchema() {\r\n  return {\r\n    name: 'LightAnalysisResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        // Core scores (for runs table)\r\n        score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        engagement_score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        niche_fit: { type: 'integer', minimum: 0, maximum: 100 },\r\n        quick_summary: { \r\n          type: 'string', \r\n          maxLength: 200,\r\n          description: 'Short 1-2 sentence summary for dashboard lists'\r\n        },\r\n        confidence_level: { \r\n          type: 'number', \r\n          minimum: 0, \r\n          maximum: 1,\r\n          description: 'Confidence in analysis from 0.0 to 1.0'\r\n        },\r\n        \r\n        // Light payload structure (for payloads table)\r\n        light_payload: {\r\n          type: 'object',\r\n          additionalProperties: false,\r\n          properties: {\r\n            insights: { \r\n              type: 'array', \r\n              items: { type: 'string' }, \r\n              minItems: 2, \r\n              maxItems: 5,\r\n              description: 'Key insights about this profile for quick decision making'\r\n            },\r\n            audience_quality: { \r\n              type: 'string',\r\n              enum: ['High', 'Medium', 'Low'],\r\n              description: 'Assessment of audience quality and engagement'\r\n            },\r\n            basic_demographics: { \r\n              type: 'string',\r\n              description: 'Basic audience demographics and characteristics'\r\n            },\r\n            engagement_summary: { \r\n              type: 'string',\r\n              description: 'Summary of engagement patterns and metrics'\r\n            }\r\n          },\r\nrequired: ['insights', 'audience_quality', 'basic_demographics', 'engagement_summary']\r\n        }\r\n      },\r\n      required: ['score', 'engagement_score', 'niche_fit', 'quick_summary', 'confidence_level', 'light_payload']\r\n    }\r\n  };\r\n}\r\n\r\nexport function getDeepAnalysisJsonSchema() {\r\n  return {\r\n    name: 'DeepAnalysisResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        // Core scores (for runs table)\r\n        score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        engagement_score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        niche_fit: { type: 'integer', minimum: 0, maximum: 100 },\r\n        quick_summary: { \r\n          type: 'string', \r\n          maxLength: 200,\r\n          description: 'Short 1-2 sentence summary for dashboard lists'\r\n        },\r\n        confidence_level: { \r\n          type: 'number', \r\n          minimum: 0, \r\n          maximum: 1,\r\n          description: 'Confidence in analysis from 0.0 to 1.0'\r\n        },\r\n        \r\n        // Deep payload structure (for payloads table)\r\n        deep_payload: {\r\n          type: 'object',\r\n          additionalProperties: false,\r\n          properties: {\r\n            deep_summary: { \r\n              type: 'string',\r\n              description: 'Comprehensive analysis of the profile and partnership potential'\r\n            },\r\n            selling_points: { \r\n              type: 'array', \r\n              items: { type: 'string' }, \r\n              minItems: 3, \r\n              maxItems: 8,\r\n              description: 'Key selling points for why this influencer is valuable'\r\n            },\r\n            outreach_message: { \r\n              type: 'string',\r\n              description: 'Personalized outreach message for this specific influencer'\r\n            },\r\n            engagement_breakdown: {\r\n              type: 'object',\r\n              additionalProperties: false,\r\n              properties: {\r\n                avg_likes: { type: 'integer', minimum: 0 },\r\n                avg_comments: { type: 'integer', minimum: 0 },\r\n                engagement_rate: { type: 'number', minimum: 0, maximum: 100 }\r\n              },\r\n              required: ['avg_likes', 'avg_comments', 'engagement_rate'],\r\n              description: 'Detailed engagement metrics breakdown'\r\n            },\r\n            audience_insights: { \r\n              type: 'string',\r\n              description: 'Detailed audience analysis and insights'\r\n            },\r\n            reasons: { \r\n              type: 'array', \r\n              items: { type: 'string' }, \r\n              minItems: 3, \r\n              maxItems: 10,\r\n              description: 'Specific reasons why this profile is a good/bad fit'\r\n            }\r\n          },\r\n          required: ['deep_summary', 'selling_points', 'outreach_message', 'engagement_breakdown', 'audience_insights', 'reasons']\r\n        }\r\n      },\r\n      required: ['score', 'engagement_score', 'niche_fit', 'quick_summary', 'confidence_level', 'deep_payload']\r\n    }\r\n  };\r\n}\r\n\r\nexport function getXRayAnalysisJsonSchema() {\r\n  return {\r\n    name: 'XRayAnalysisResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        // Core scores (for runs table)\r\n        score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        engagement_score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        niche_fit: { type: 'integer', minimum: 0, maximum: 100 },\r\n        quick_summary: { \r\n          type: 'string', \r\n          maxLength: 200,\r\n          description: 'Short 1-2 sentence summary for dashboard lists'\r\n        },\r\n        confidence_level: { \r\n          type: 'number', \r\n          minimum: 0, \r\n          maximum: 1,\r\n          description: 'Confidence in analysis from 0.0 to 1.0'\r\n        },\r\n        \r\n        // X-Ray payload structure (for payloads table)\r\n        xray_payload: {\r\n          type: 'object',\r\n          additionalProperties: false,\r\n          properties: {\r\n            copywriter_profile: {\r\n              type: 'object',\r\n              additionalProperties: false,\r\n              properties: {\r\n                demographics: { \r\n                  type: 'string',\r\n                  description: 'Age, gender, location, lifestyle demographics'\r\n                },\r\n                psychographics: { \r\n                  type: 'string',\r\n                  description: 'Personality traits, values, interests, motivations'\r\n                },\r\n                pain_points: { \r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  minItems: 2,\r\n                  maxItems: 6,\r\n                  description: 'Key problems and frustrations this person faces'\r\n                },\r\n                dreams_desires: { \r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  minItems: 2,\r\n                  maxItems: 6,\r\n                  description: 'Goals, aspirations, and desired outcomes'\r\n                }\r\n              },\r\n              required: ['demographics', 'psychographics', 'pain_points', 'dreams_desires']\r\n            },\r\n            commercial_intelligence: {\r\n              type: 'object',\r\n              additionalProperties: false,\r\n              properties: {\r\n                budget_tier: { \r\n                  type: 'string',\r\n                  enum: ['low-budget', 'mid-market', 'premium', 'luxury'],\r\n                  description: 'Estimated spending capacity based on lifestyle indicators'\r\n                },\r\n                decision_role: { \r\n                  type: 'string',\r\n                  enum: ['primary', 'influencer', 'gatekeeper', 'researcher'],\r\n                  description: 'Role in purchasing decisions'\r\n                },\r\n                buying_stage: { \r\n                  type: 'string',\r\n                  enum: ['unaware', 'problem-aware', 'solution-aware', 'product-aware', 'ready-to-buy'],\r\n                  description: 'Current stage in buying journey'\r\n                },\r\n                objections: { \r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  minItems: 2,\r\n                  maxItems: 5,\r\n                  description: 'Likely objections and concerns about purchasing'\r\n                }\r\n              },\r\n              required: ['budget_tier', 'decision_role', 'buying_stage', 'objections']\r\n            },\r\n            persuasion_strategy: {\r\n              type: 'object',\r\n              additionalProperties: false,\r\n              properties: {\r\n                primary_angle: { \r\n                  type: 'string',\r\n                  enum: ['transformation', 'status', 'convenience', 'fear-of-missing-out', 'social-proof', 'authority'],\r\n                  description: 'Primary persuasion angle to use'\r\n                },\r\n                hook_style: { \r\n                  type: 'string',\r\n                  enum: ['problem-agitation', 'curiosity-gap', 'social-proof', 'authority-positioning', 'story-based'],\r\n                  description: 'Most effective hook style for this person'\r\n                },\r\n                proof_elements: { \r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  minItems: 3,\r\n                  maxItems: 7,\r\n                  description: 'Types of proof that would be most convincing'\r\n                },\r\n                communication_style: { \r\n                  type: 'string',\r\n                  enum: ['casual-friendly', 'professional', 'authoritative', 'empathetic', 'energetic'],\r\n                  description: 'Communication tone that would resonate best'\r\n                }\r\n              },\r\n              required: ['primary_angle', 'hook_style', 'proof_elements', 'communication_style']\r\n            }\r\n          },\r\n          required: ['copywriter_profile', 'commercial_intelligence', 'persuasion_strategy']\r\n        }\r\n      },\r\n      required: ['score', 'engagement_score', 'niche_fit', 'quick_summary', 'confidence_level', 'xray_payload']\r\n    }\r\n  };\r\n}\r\n\r\n// ===============================================================================\r\n// LIGHT ANALYSIS PROMPTS\r\n// ===============================================================================\r\n\r\nexport function buildLightAnalysisPrompt(\r\n  profile: ProfileData, \r\n  business: BusinessProfile,\r\n  context?: {\r\n    triage?: any;\r\n    preprocessor?: any;\r\n  }\r\n): string {\r\n  const engagementInfo = (profile.engagement?.postsAnalyzed || 0) > 0 \r\n    ? `Real engagement data: ${profile.engagement?.engagementRate}% rate (${profile.engagement?.avgLikes} avg likes, ${profile.engagement?.avgComments} avg comments across ${profile.engagement?.postsAnalyzed} posts)`\r\n    : `Estimated engagement based on ${profile.followersCount.toLocaleString()} followers`;\r\n\r\n  const triageContext = context?.triage ? `\r\n## TRIAGE INSIGHTS\r\n- **Lead Score**: ${context.triage.lead_score}/100\r\n- **Data Quality**: ${context.triage.data_richness}/100  \r\n- **Key Observations**: ${context.triage.focus_points?.join(', ') || 'None'}\r\n` : '';\r\n\r\n  return `# LIGHT ANALYSIS: Quick Business Fit Assessment\r\n${triageContext}\r\n\r\n# LIGHT ANALYSIS: 10-Second Lead Check\r\n\r\n## PROFILE SNAPSHOT\r\n- **Handle**: @${profile.username}\r\n- **Followers**: ${profile.followersCount.toLocaleString()}\r\n- **Verified**: ${profile.isVerified ? 'Yes \u2713' : 'No'}\r\n- **Private**: ${profile.isPrivate ? 'Yes (LIMITED DATA)' : 'No'}\r\n- **Bio**: \"${profile.bio || 'Empty'}\"\r\n- **Link**: ${profile.externalUrl || 'None'}\r\n- **Posts**: ${profile.postsCount}\r\n- **Following**: ${profile.followingCount} (Ratio: ${(profile.followersCount/profile.followingCount).toFixed(1)}:1)\r\n\r\n## YOUR BUSINESS\r\n- **Company**: ${business.name} (${business.industry})\r\n- **Target**: ${business.target_audience}\r\n- **Goal**: ${business.value_proposition}\r\n\r\n## MISSION: Quick Pass/Fail Decision\r\n\r\nGenerate a rapid lead assessment. Focus ONLY on what's visible from Instagram:\r\n\r\n### SCORING (0-100)\r\n- **score**: Partnership viability (0=waste of time, 100=pursue immediately)\r\n- **engagement_score**: Audience quality signal (high following/follower ratio = bot risk)\r\n- **niche_fit**: Match to ${business.target_audience}\r\n- **confidence_level**: Data reliability (0.2 if private, 0.5 if <1000 followers, else 0.7-0.9)\r\n\r\n### LIGHT PAYLOAD REQUIREMENTS\r\n\r\n**insights** (2-5 bullets):\r\n- Follower tier: Nano (<10k), Micro (10-100k), Mid (100k-1M), Macro (1M+)\r\n- Follow ratio red flags (following > followers = likely spam)\r\n- Bio signals (email present? business category? CTAs?)\r\n- Content frequency estimate from posts/account age\r\n- Verification/business account as trust signals\r\n\r\n**audience_quality**: \r\n- \"High\" = Verified OR business account with good follow ratio\r\n- \"Medium\" = Normal ratios, active posting\r\n- \"Low\" = Poor ratios, low posts, or private\r\n\r\n**basic_demographics**: \r\nExtract ONLY from bio/username: language hints, location tags, niche keywords. \r\nIf nothing extractable: \"No demographic signals in bio\"\r\n\r\n**engagement_summary**: \r\nWith ${profile.followersCount} followers, estimate typical engagement:\r\n- Nano: 5-7% ER expected\r\n- Micro: 2-4% ER expected  \r\n- Mid: 1-2% ER expected\r\n- Macro: 0.5-1% ER expected\r\nState if account likely above/below benchmark based on post count and account age.\r\n\r\n### DECISION LOGIC\r\n- Score >70: Clear signals of fit + reachable + active\r\n- Score 40-70: Possible fit but needs deep analysis\r\n- Score <40: Wrong fit OR dead account OR spam signals\r\n\r\nReturn JSON only. Make the decision binary: pursue or skip.\r\n`;\r\n}\r\n\r\n// ===============================================================================\r\n// DEEP ANALYSIS PROMPTS  \r\n// ===============================================================================\r\n\r\nexport function buildDeepAnalysisPrompt(\r\n  profile: ProfileData, \r\n  business: BusinessProfile,\r\n  context?: {\r\n    triage?: any;\r\n    preprocessor?: any;\r\n  }\r\n): string {\r\nconst engagementInfo = (profile.engagement?.postsAnalyzed || 0) > 0 \r\n    ? `REAL ENGAGEMENT DATA: ${profile.engagement.engagementRate}% rate (${profile.engagement.avgLikes} avg likes, ${profile.engagement.avgComments} avg comments across ${profile.engagement.postsAnalyzed} posts)`\r\n    : `Estimated engagement based on ${profile.followersCount.toLocaleString()} followers`;\r\n\r\n  const triageContext = context?.triage ? `\r\n## TRIAGE INSIGHTS  \r\n- **Lead Score**: ${context.triage.lead_score}/100 (${context.triage.confidence * 100}% confidence)\r\n- **Focus Areas**: ${context.triage.focus_points?.join(', ') || 'General analysis'}\r\n` : '';\r\n\r\n  const preprocessorContext = context?.preprocessor ? `\r\n## EXTRACTED PROFILE FACTS\r\n- **Content Themes**: ${context.preprocessor.content_themes?.join(', ') || 'Unknown'}\r\n- **Posting Pattern**: ${context.preprocessor.posting_cadence || 'Unknown'}\r\n- **Collaboration History**: ${context.preprocessor.collaboration_history || 'No evidence'}\r\n- **Contact Readiness**: ${context.preprocessor.contact_readiness || 'Unknown'}\r\n- **Brand Mentions**: ${context.preprocessor.brand_mentions?.join(', ') || 'None found'}\r\n` : '';\r\n\r\n  const contentInfo = (profile.latestPosts?.length || 0) > 0 \r\n    ? `Recent content themes: ${profile.latestPosts.slice(0, 3).map(p => `\"${p.caption?.slice(0, 100) || 'Visual content'}\"...`).join(' | ')}`\r\n    : 'Content analysis limited - no recent posts available';\r\n\r\n  return `\r\n  # DEEP ANALYSIS: Partnership Intelligence Report\r\n\r\n## VERIFIED PROFILE DATA\r\n- **Handle**: @${profile.username}\r\n- **Metrics**: ${profile.followersCount.toLocaleString()} followers | ${profile.postsCount} posts\r\n- **Bio**: \"${profile.bio || 'No bio'}\"\r\n- **Link**: ${profile.externalUrl || 'No external link'}\r\n- **Status**: ${profile.isVerified ? 'Verified \u2713' : 'Unverified'} | ${profile.isBusinessAccount ? 'Business' : 'Personal'}\r\n\r\n## ACTUAL ENGAGEMENT DATA\r\n${profile.engagement && profile.engagement.postsAnalyzed > 0\r\n  ? `REAL METRICS from ${profile.engagement.postsAnalyzed} posts:\r\n    - Avg Likes: ${profile.engagement.avgLikes.toLocaleString()}\r\n    - Avg Comments: ${profile.engagement.avgComments.toLocaleString()}\r\n    - Engagement Rate: ${profile.engagement.engagementRate}%\r\n    - Total Interactions: ${profile.engagement.totalEngagement.toLocaleString()}`\r\n  : `ESTIMATED for ${profile.followersCount.toLocaleString()} followers (no post data available)`}\r\n\r\n## CONTENT ANALYSIS\r\n${(profile.latestPosts?.length || 0) > 0 \r\n  ? `Latest ${profile.latestPosts.length} posts analyzed:\r\n    ${profile.latestPosts.slice(0, 3).map(p => \r\n      `- ${p.likesCount.toLocaleString()} likes, ${p.commentsCount} comments: \"${(p.caption || '').slice(0, 50)}...\"`\r\n    ).join('\\n    ')}`\r\n  : 'No recent posts available for analysis'}\r\n\r\n## BUSINESS CONTEXT\r\n- **Company**: ${business.name}\r\n- **Industry**: ${business.industry}\r\n- **Target**: ${business.target_audience}\r\n- **Value Prop**: ${business.value_proposition}\r\n\r\n## DEEP ANALYSIS REQUIREMENTS\r\n\r\n### SCORING FRAMEWORK\r\n- **score**: Overall partnership value (0-100)\r\n- **engagement_score**: Based on ACTUAL data if available, else use follower-tier benchmarks\r\n- **niche_fit**: Alignment with ${business.target_audience}\r\n- **confidence_level**: ${profile.engagement?.postsAnalyzed ? '0.85-0.95 (real data)' : '0.4-0.6 (estimated)'}\r\n\r\n### DEEP PAYLOAD - BE SPECIFIC\r\n\r\n**deep_summary** (4-6 sentences):\r\nStart with engagement reality check. State actual ER% vs expected for their follower tier. Identify content patterns from captions/hashtags. Assess partnership viability based on measurable signals. End with specific recommendation.\r\n\r\n**selling_points** (3-8 bullets):\r\nONLY claims you can defend with numbers:\r\n- \"ER of ${profile.engagement?.engagementRate}% beats follower tier average\"\r\n- \"Consistent posting (${profile.latestPosts?.length || 0} recent posts)\"\r\n- \"High comment ratio suggests engaged community\"\r\n- \"Verified status + business account = platform trust\"\r\nNO generic claims like \"great content\" or \"strong influence\"\r\n\r\n**outreach_message** (150-250 words):\r\nOpen with specific metric about their engagement rate and follower count\r\nReference actual content theme from their posts\r\nPropose specific collaboration format (Reel, Carousel, Story series)\r\nInclude concrete success metric (target reach, engagement, conversions)\r\nEnd with clear CTA and contact preference\r\n\r\n**engagement_breakdown**:\r\nUse REAL data when available from profile.engagement object\r\n\r\n**audience_insights**:\r\nFrom actual post performance:\r\n- High engagement posts topics (from captions)\r\n- Comment patterns (questions vs praise vs emojis)\r\n- Posting time patterns if visible\r\n- Hashtag communities they engage\r\n\r\n**reasons** (3-10 specific points):\r\nEach must reference a metric or observation:\r\n- \"ER of X% is Y% above category average\"\r\n- \"Bio contains email, suggesting openness to partnerships\"\r\n- \"Recent posts show collaborations with similar brands\"\r\n- \"Recent posts show consistent activity\"\r\n\r\n### DECISION OUTPUTS\r\nIf score >75: Provide exact outreach angle and first message\r\nIf score 50-75: List 2-3 tests to validate fit\r\nIf score <50: State specific disqualifiers\r\n\r\nReturn JSON only. Every claim must trace to profile data.\r\n  `;\r\n}\r\n\r\n// ===============================================================================\r\n// X-RAY ANALYSIS PROMPTS\r\n// ===============================================================================\r\n\r\nexport function buildXRayAnalysisPrompt(\r\n  profile: ProfileData, \r\n  business: BusinessProfile,\r\n  context?: {\r\n    triage?: any;\r\n    preprocessor?: any;\r\n  }\r\n): string {\r\n  const engagementInfo = (profile.engagement?.postsAnalyzed || 0) > 0 \r\n    ? `REAL ENGAGEMENT DATA: ${profile.engagement?.engagementRate}% rate (${profile.engagement?.avgLikes} avg likes, ${profile.engagement?.avgComments} avg comments across ${profile.engagement?.postsAnalyzed} posts)`\r\n    : `Estimated engagement based on ${profile.followersCount.toLocaleString()} followers`;\r\n\r\n  const triageContext = context?.triage ? `\r\n## STRATEGIC CONTEXT\r\n- **Lead Quality**: ${context.triage.lead_score}/100 (${Math.round(context.triage.confidence * 100)}% confidence)\r\n- **Analysis Focus**: ${context.triage.focus_points?.join(' | ') || 'Comprehensive profile'}\r\n` : '';\r\n\r\n  const preprocessorContext = context?.preprocessor ? `\r\n## BEHAVIORAL INTELLIGENCE\r\n- **Content Strategy**: ${context.preprocessor.content_themes?.join(' + ') || 'Unknown themes'}\r\n- **Engagement Drivers**: ${context.preprocessor.engagement_patterns || 'Unknown patterns'}\r\n- **Brand Relationships**: ${context.preprocessor.brand_mentions?.length > 0 ? context.preprocessor.brand_mentions.join(', ') : 'No brand connections visible'}\r\n- **Business Readiness**: ${context.preprocessor.contact_readiness || 'Unknown'}\r\n- **Collaboration Track Record**: ${context.preprocessor.collaboration_history || 'No evidence'}\r\n` : '';\r\n\r\n  const contentInfo = (profile.latestPosts?.length || 0) > 0 \r\n    ? `Recent content analysis: ${profile.latestPosts.slice(0, 5).map(p => `\"${p.caption?.slice(0, 150) || 'Visual content'}\"...`).join(' | ')}`\r\n    : 'Content analysis limited - profile access restricted';\r\n\r\n  return `\r\n  # X-RAY ANALYSIS: Deep Psychological & Commercial Profiling\r\n\r\n## PROFILE INTELLIGENCE\r\n- **Handle**: @${profile.username} (${profile.followersCount.toLocaleString()} followers)\r\n- **Verification**: ${profile.isVerified ? 'VERIFIED \u2713 (trust signal)' : 'Unverified'}\r\n- **Account Type**: ${profile.isBusinessAccount ? 'Business Account' : 'Personal/Creator'}\r\n- **Bio Signals**: \"${profile.bio || 'No bio'}\"\r\n- **Link Strategy**: ${profile.externalUrl ? `Active (${profile.externalUrl.includes('linktr') ? 'Linktree' : 'Direct site'})` : 'No external link'}\r\n\r\n## BEHAVIORAL DATA\r\n${(profile.engagement?.postsAnalyzed || 0) > 0 \r\n  ? `MEASURED BEHAVIOR from ${profile.engagement.postsAnalyzed} posts:\r\n    - Engagement: ${profile.engagement.engagementRate}% (${profile.engagement.avgLikes} likes, ${profile.engagement.avgComments} comments avg)\r\n    - Comment Ratio: ${((profile.engagement.avgComments/profile.engagement.avgLikes)*100).toFixed(1)}% (community engagement signal)\r\n    - Per-Post Reach: ~${((profile.engagement.avgLikes/profile.followersCount)*100).toFixed(1)}% of audience`\r\n  : 'Limited behavioral data - assessment based on profile signals'}\r\n\r\n## CONTENT PATTERNS\r\n${(profile.latestPosts?.length || 0) > 0 \r\n  ? `${profile.latestPosts.length} recent posts reveal:\r\n    ${profile.latestPosts.slice(0, 5).map(p => {\r\n      const wordCount = (p.caption || '').split(' ').length;\r\n      const hasQuestion = (p.caption || '').includes('?');\r\n      const hasEmoji = /[\\u{1F300}-\\u{1F9FF}]/u.test(p.caption || '');\r\n      const hasCTA = /(link|bio|shop|swipe|save|comment|share|tag)/i.test(p.caption || '');\r\n      return `- ${p.likesCount} likes: ${wordCount} words, ${hasQuestion ? 'question' : 'statement'}, ${hasEmoji ? 'emojis' : 'no emojis'}, ${hasCTA ? 'CTA present' : 'no CTA'}`;\r\n    }).join('\\n    ')}`\r\n  : 'No content patterns available'}\r\n\r\n## BUSINESS CONTEXT\r\n- **Your Company**: ${business.name} (${business.industry})\r\n- **Your Audience**: ${business.target_audience}\r\n- **Your Goal**: ${business.value_proposition}\r\n\r\n## X-RAY INTELLIGENCE EXTRACTION\r\n\r\n### SCORING (same as deep but with psychological confidence)\r\n- **score**: Partnership value (0-100)\r\n- **engagement_score**: Audience quality (0-100)\r\n- **niche_fit**: Strategic alignment (0-100)\r\n- **confidence_level**: ${profile.latestPosts?.length >= 5 ? '0.8-0.95' : '0.3-0.5'}\r\n\r\n### COPYWRITER PROFILE - Extract from Instagram patterns only\r\n\r\n**demographics**:\r\nBased on visual content + bio + captions:\r\n- Age signals: Caption formality, emoji usage, cultural references\r\n- Location: Tagged locations, timezone patterns, language\r\n- Lifestyle: Post locations (gym/travel/home), brand mentions\r\n\r\n**psychographics**:\r\nFrom content themes and caption style:\r\n- Values: What they celebrate/criticize in captions\r\n- Communication: Long vs short captions, question frequency, emoji density\r\n- Authority style: Educational vs entertainment vs inspiration\r\n\r\n**pain_points** (2-6 from content):\r\nLook for complaint patterns, questions asked, problems mentioned:\r\n- \"Posts about specific topics suggest frustration with relevant issues\"\r\n- \"Asking followers about problems indicates struggle with those areas\"\r\n- \"Collaboration requests suggest need for partnerships\"\r\n\r\n**dreams_desires** (2-6 from content):\r\nFrom aspirational posts, goals mentioned, celebration posts:\r\n- \"Celebrates achievements suggesting their values and priorities\"\r\n- \"Posts about future goals indicating their desires and aspirations\"\r\n- \"Hashtags show aspiration toward specific outcomes or lifestyles\"\r\n\r\n### COMMERCIAL INTELLIGENCE - Based on observable signals\r\n\r\n**budget_tier**:\r\n- \"luxury\": Verified + >1M followers + brand collabs visible\r\n- \"premium\": 100k-1M followers + business account + professional content\r\n- \"mid-market\": 10k-100k followers + consistent posting\r\n- \"low-budget\": <10k followers or inconsistent activity\r\n\r\n**decision_role**:\r\n- \"primary\": Solopreneur/creator (no team visible)\r\n- \"influencer\": Part of network (collabs/mentions visible)\r\n- \"gatekeeper\": Business account with team mentions\r\n- \"researcher\": Asks audience for input frequently\r\n\r\n**buying_stage** (for partnerships):\r\n- \"ready-to-buy\": Email in bio + past collabs + business account\r\n- \"product-aware\": Mentions partnerships but no clear CTA\r\n- \"solution-aware\": Business account but no collab history\r\n- \"problem-aware\": Growing but not monetizing\r\n- \"unaware\": Personal account, no business signals\r\n\r\n**objections** (2-5 based on patterns):\r\n- From low engagement: \"Audience quality concerns\"\r\n- From irregular posting: \"Consistency issues\"\r\n- From no collab history: \"Unproven partnership record\"\r\n- From caption style: \"Brand voice misalignment\"\r\n\r\n### PERSUASION STRATEGY - How to approach based on their patterns\r\n\r\n**primary_angle**:\r\n- \"transformation\": If posts show before/after, growth, change\r\n- \"status\": If posts show achievements, milestones, recognition\r\n- \"convenience\": If posts emphasize ease, simplicity, efficiency\r\n- \"fear-of-missing-out\": If posts use urgency, limited time, exclusive\r\n- \"social-proof\": If posts show testimonials, community, numbers\r\n- \"authority\": If posts teach, guide, demonstrate expertise\r\n\r\n**hook_style** (based on their content style):\r\n- \"problem-agitation\": If they discuss pain points\r\n- \"curiosity-gap\": If they use questions, teasers\r\n- \"social-proof\": If they showcase results, testimonials\r\n- \"authority-positioning\": If they teach, educate\r\n- \"story-based\": If they share personal narratives\r\n\r\n**proof_elements** (3-7 they'd respond to):\r\nBased on what THEY use in content:\r\n- Numbers/metrics if they share stats\r\n- Visual proof if they post before/afters\r\n- Testimonials if they share feedback\r\n- Process proof if they show behind-scenes\r\n- Authority proof if they cite sources\r\n\r\n**communication_style** (match their tone):\r\n- \"casual-friendly\": Heavy emoji use, informal language\r\n- \"professional\": Business language, formal structure\r\n- \"authoritative\": Educational, factual, structured\r\n- \"empathetic\": Personal stories, emotional language\r\n- \"energetic\": Exclamations, caps, enthusiasm markers\r\n\r\n## CRITICAL REQUIREMENT\r\nEvery insight must reference observable Instagram behavior. No external assumptions.\r\nMark any field as \"insufficient_data\" if you can't defend it from the profile.\r\n\r\nReturn JSON only. This is intelligence for high-stakes outreach - be precise.\r\n  `;\r\n}\r\n\r\n// ===============================================================================\r\n// OUTREACH MESSAGE PROMPTS\r\n// ===============================================================================\r\n\r\nexport function buildOutreachMessagePrompt(\r\n  profile: ProfileData, \r\n  business: BusinessProfile, \r\n  analysis: any\r\n): string {\r\n  return `# PERSONALIZED OUTREACH MESSAGE GENERATION\r\n\r\n## TARGET PROFILE\r\n- **Username**: @${profile.username}\r\n- **Display Name**: ${profile.displayName || profile.username}\r\n- **Followers**: ${profile.followersCount.toLocaleString()}\r\n- **Bio**: \"${profile.bio || 'No bio available'}\"\r\n- **Verified**: ${profile.isVerified ? 'Yes' : 'No'}\r\n- **Business Account**: ${profile.isBusinessAccount ? 'Yes' : 'No'}\r\n\r\n## BUSINESS CONTEXT\r\n- **Company**: ${business.name}\r\n- **Industry**: ${business.industry}\r\n- **Value Proposition**: ${business.value_proposition}\r\n- **Target Audience**: ${business.target_audience}\r\n\r\n## ANALYSIS INSIGHTS\r\n- **Overall Score**: ${analysis.score}/100\r\n- **Niche Fit**: ${analysis.niche_fit}/100\r\n- **Key Selling Points**: ${analysis.selling_points?.join(', ') || 'Not available'}\r\n\r\n## MESSAGE REQUIREMENTS\r\nWrite a personalized outreach message that:\r\n\r\n1. **Addresses them personally** using their display name or username\r\n2. **Shows genuine interest** in their content/audience\r\n3. **Mentions specific details** from their profile (follower count, niche, etc.)\r\n4. **Clearly states the collaboration opportunity** \r\n5. **Includes a clear call-to-action**\r\n6. **Maintains professional but friendly tone**\r\n7. **Keeps length between 150-250 words**\r\n\r\n## TONE GUIDELINES\r\n- Professional but approachable\r\n- Genuine interest, not generic template\r\n- Confident but not pushy\r\n- Focus on mutual benefit\r\n- Include specific numbers when relevant (follower count, etc.)\r\n\r\nGenerate ONLY the message text - no subject line, no extra formatting, no introduction. Start directly with the greeting.`;\r\n}\r\n\r\n// ===============================================================================\r\n// SUMMARY GENERATION PROMPTS\r\n// ===============================================================================\r\n\r\nexport function buildQuickSummaryPrompt(profile: ProfileData): string {\r\n  return `Generate a concise 1-2 sentence summary for this Instagram profile:\r\n\r\n@${profile.username} - ${profile.followersCount.toLocaleString()} followers\r\nBio: \"${profile.bio || 'No bio'}\"\r\nVerified: ${profile.isVerified ? 'Yes' : 'No'}\r\nEngagement: ${profile.engagement?.engagementRate || 'Unknown'}%\r\n\r\nCreate a brief summary suitable for dashboard lists. Focus on key characteristics and business potential. Maximum 150 characters.`;\r\n}\r\n\r\nexport function buildDeepSummaryPrompt(\r\n  profile: ProfileData, \r\n  business: BusinessProfile, \r\n  analysis: any\r\n): string {\r\n  return `# EXECUTIVE ANALYSIS SUMMARY\r\n\r\n## PROFILE OVERVIEW\r\n- **Influencer**: @${profile.username} (${profile.displayName || 'N/A'})\r\n- **Audience**: ${profile.followersCount.toLocaleString()} followers\r\n- **Verification**: ${profile.isVerified ? 'Verified' : 'Unverified'}\r\n- **Engagement Rate**: ${profile.engagement?.engagementRate || 'Unknown'}%\r\n- **Bio**: \"${profile.bio || 'No bio available'}\"\r\n\r\n## BUSINESS CONTEXT\r\n- **Company**: ${business.name}\r\n- **Industry**: ${business.industry}\r\n- **Target Market**: ${business.target_audience}\r\n\r\n## ANALYSIS RESULTS\r\n- **Overall Score**: ${analysis.score}/100\r\n- **Engagement Score**: ${analysis.engagement_score}/100  \r\n- **Niche Fit**: ${analysis.niche_fit}/100\r\n- **Audience Quality**: ${analysis.audience_quality}\r\n\r\n## TASK\r\nWrite a 5-7 sentence executive summary that covers:\r\n1. Profile overview and key metrics\r\n2. Audience quality assessment\r\n3. Business alignment and partnership potential\r\n4. Key opportunities or concerns\r\n5. Strategic recommendation\r\n\r\nBe specific, actionable, and executive-level. No preface or conclusion needed.`;\r\n}\r\n\r\n// Add these functions to the END of prompts.ts\r\n\r\n// ===============================================================================\r\n// TRIAGE FUNCTIONS\r\n// ===============================================================================\r\n\r\nexport function getTriageJsonSchema() {\r\n  return {\r\n    name: 'TriageResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        lead_score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        data_richness: { type: 'integer', minimum: 0, maximum: 100 },\r\n        confidence: { type: 'number', minimum: 0, maximum: 1 },\r\n        early_exit: { type: 'boolean' },\r\n        focus_points: { \r\n          type: 'array', \r\n          items: { type: 'string' }, \r\n          minItems: 2, \r\n          maxItems: 4 \r\n        }\r\n      },\r\n      required: ['lead_score', 'data_richness', 'confidence', 'early_exit', 'focus_points']\r\n    }\r\n  };\r\n}\r\n\r\nexport function buildTriagePrompt(snapshot: any, businessOneLiner: string): string {\r\n  return `# LEAD TRIAGE: Quick Pass/Fail Decision\r\n\r\n## YOUR BUSINESS\r\n${businessOneLiner}\r\n\r\n## PROFILE SNAPSHOT\r\n- **Username**: @${snapshot.username}\r\n- **Followers**: ${snapshot.followers.toLocaleString()}\r\n- **Status**: ${snapshot.verified ? 'Verified \u2713' : 'Unverified'} | ${snapshot.private ? 'Private \u26A0\uFE0F' : 'Public'}\r\n- **Bio**: \"${snapshot.bio_short || 'No bio'}\"\r\n- **External Links**: ${snapshot.external_domains.length > 0 ? snapshot.external_domains.join(', ') : 'None'}\r\n- **Recent Activity**: ~${snapshot.posts_30d} posts estimated\r\n- **Sample Content**: ${snapshot.top_captions.length > 0 ? \r\n    snapshot.top_captions.map(cap => `\"${cap}...\"`).join(' | ') : \r\n    'No captions available'}\r\n- **Engagement Data**: ${snapshot.engagement_signals ? \r\n    `${snapshot.engagement_signals.avg_likes.toLocaleString()} avg likes, ${snapshot.engagement_signals.avg_comments} comments (${snapshot.engagement_signals.posts_analyzed} posts)` : \r\n    'Not available'}\r\n\r\n## TASK: 10-Second Lead Decision\r\n\r\nScore this profile on two dimensions:\r\n\r\n**lead_score (0-100)**: Business fit potential\r\n- 80-100: Clear target match, obvious collaboration potential\r\n- 60-79: Good fit signals, worth deeper analysis  \r\n- 40-59: Possible fit but unclear value\r\n- 20-39: Weak signals, probably wrong audience\r\n- 0-19: Obviously wrong fit, different niche entirely\r\n\r\n**data_richness (0-100)**: Available information quality\r\n- 80-100: Rich content, engagement data, clear patterns\r\n- 60-79: Good content samples, some engagement signals\r\n- 40-59: Basic profile info, limited content visibility\r\n- 20-39: Minimal data, private account or sparse content\r\n- 0-19: Almost no usable information\r\n\r\n**confidence (0-1)**: How certain are you about these scores?\r\n\r\n**focus_points**: 2-4 specific observations that drove your scores\r\n\r\n## EARLY EXIT RULES\r\n- If lead_score < 25 OR data_richness < 20 \u2192 Set early_exit: true\r\n- Otherwise \u2192 Set early_exit: false\r\n\r\nReturn ONLY JSON:\r\n{\r\n  \"lead_score\": 0-100,\r\n  \"data_richness\": 0-100, \r\n  \"confidence\": 0-1,\r\n  \"early_exit\": true|false,\r\n  \"focus_points\": [\"observation 1\", \"observation 2\", \"...\"]\r\n}`;\r\n}\r\n\r\n// ===============================================================================\r\n// PREPROCESSOR FUNCTIONS\r\n// ===============================================================================\r\n\r\nexport function getPreprocessorJsonSchema() {\r\n  return {\r\n    name: 'PreprocessorResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        posting_cadence: { type: 'string' },\r\n        content_themes: { \r\n          type: 'array', \r\n          items: { type: 'string' },\r\n          maxItems: 5\r\n        },\r\n        audience_signals: { \r\n          type: 'array', \r\n          items: { type: 'string' },\r\n          maxItems: 4\r\n        },\r\n        brand_mentions: { \r\n          type: 'array', \r\n          items: { type: 'string' }\r\n        },\r\n        engagement_patterns: { type: 'string' },\r\n        collaboration_history: { type: 'string' },\r\n        contact_readiness: { type: 'string' },\r\n        content_quality: { type: 'string' }\r\n      },\r\n      required: ['posting_cadence', 'content_themes', 'audience_signals', 'brand_mentions', 'engagement_patterns', 'collaboration_history', 'contact_readiness', 'content_quality']\r\n    }\r\n  };\r\n}\r\n\r\nexport function buildPreprocessorPrompt(profile: any): string {\r\n  const postsData = profile.latestPosts || [];\r\n  const engagementData = profile.engagement || null;\r\n\r\n  return `# DATA EXTRACTION: Instagram Profile Facts\r\n\r\n## PROFILE OVERVIEW\r\n- **Username**: @${profile.username}\r\n- **Followers**: ${profile.followersCount.toLocaleString()}\r\n- **Bio**: \"${profile.bio || 'No bio'}\"\r\n- **External Link**: ${profile.externalUrl || 'None'}\r\n- **Account Type**: ${profile.isBusinessAccount ? 'Business' : 'Personal'} | ${profile.isVerified ? 'Verified' : 'Unverified'}\r\n\r\n## CONTENT ANALYSIS\r\n- **Posts Available**: ${postsData.length}\r\n- **Engagement Data**: ${engagementData ? \r\n    `${engagementData.engagementRate}% rate (${engagementData.avgLikes} avg likes, ${engagementData.avgComments} comments)` : \r\n    'Not available'}\r\n\r\n## POST SAMPLES\r\n${postsData.slice(0, 8).map((post, i) => \r\n  `**Post ${i+1}**: ${post.likesCount.toLocaleString()} likes, ${post.commentsCount} comments\r\n  Caption: \"${(post.caption || '').slice(0, 150)}${post.caption && post.caption.length > 150 ? '...' : ''}\"`\r\n).join('\\n')}\r\n\r\n## EXTRACTION TASK\r\n\r\nBased ONLY on observable data above, extract:\r\n\r\n**posting_cadence**: Frequency pattern (daily/weekly/sporadic/inactive)\r\n\r\n**content_themes**: Top 3-5 recurring topics/niches from captions and context\r\n\r\n**audience_signals**: 2-4 demographic/psychographic signals about followers from comments, content style, language\r\n\r\n**brand_mentions**: List any brand names, products, or companies mentioned\r\n\r\n**engagement_patterns**: Style of engagement (high comments vs likes, question-heavy, community-focused, etc)\r\n\r\n**collaboration_history**: Evidence of sponsorships, partnerships, or promotional content\r\n\r\n**contact_readiness**: Email in bio, business account, link in bio, or other contact signals\r\n\r\n**content_quality**: Production value assessment (professional/amateur/mixed)\r\n\r\nExtract ONLY what you can verify from the data provided. Use \"insufficient_data\" for unclear fields.\r\n\r\nReturn ONLY JSON:\r\n{\r\n  \"posting_cadence\": \"...\",\r\n  \"content_themes\": [\"theme1\", \"theme2\", \"theme3\"],\r\n  \"audience_signals\": [\"signal1\", \"signal2\"],\r\n  \"brand_mentions\": [\"brand1\", \"brand2\"],\r\n  \"engagement_patterns\": \"...\",\r\n  \"collaboration_history\": \"...\",\r\n  \"contact_readiness\": \"...\",\r\n  \"content_quality\": \"...\"\r\n}`;\r\n}\r\n", "import type { MicroSnapshot } from './micro-snapshot.js';\r\nimport { UniversalAIAdapter, selectModel } from './universal-ai-adapter.js';\r\nimport { getTriageJsonSchema, buildTriagePrompt } from './prompts.js';\r\n\r\nexport interface TriageResult {\r\n  lead_score: number;\r\n  data_richness: number;\r\n  confidence: number;\r\n  early_exit: boolean;\r\n  focus_points: string[];\r\n}\r\n\r\nexport async function runTriage(\r\n  snapshot: MicroSnapshot,\r\n  businessOneLiner: string,\r\n  env: any,\r\n  requestId: string\r\n): Promise<{\r\n  result: TriageResult;\r\n  costDetails: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    model_used: string;\r\n    block_type: string;\r\n  };\r\n}> {\r\n  \r\n  console.log(`\uD83D\uDD0D [Triage] Starting for @${snapshot.username}`);\r\n  \r\n  try {\r\n    // Use economy tier for triage (always GPT-5 nano)\r\n    const modelName = selectModel('triage', 'economy');\r\n    \r\n    const aiAdapter = new UniversalAIAdapter(env, requestId);\r\n    const response = await aiAdapter.executeRequest({\r\n      model_name: modelName,\r\n      system_prompt: 'You are a lead qualification expert. Analyze Instagram profiles quickly and return ONLY valid JSON.',\r\n      user_prompt: buildTriagePrompt(snapshot, businessOneLiner),\r\n      max_tokens: 200,\r\n      json_schema: getTriageJsonSchema(),\r\n      response_format: 'json',\r\n      temperature: 0.1\r\n    });\r\n\r\n    const result = JSON.parse(response.content) as TriageResult;\r\n    result.early_exit = false; // Always continue to full analysis\r\n\r\n    console.log(`\uD83D\uDD0D [Triage] Result: Score ${result.lead_score}, Data ${result.data_richness}, Model: ${response.model_used}`);\r\n\r\n    return {\r\n      result,\r\n      costDetails: {\r\n        actual_cost: response.usage.total_cost,\r\n        tokens_in: response.usage.input_tokens,\r\n        tokens_out: response.usage.output_tokens,\r\n        model_used: response.model_used,\r\n        block_type: 'triage'\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error(`\uD83D\uDD0D [Triage] Failed:`, error.message);\r\n    throw new Error(`Triage failed: ${error.message}`);\r\n  }\r\n}\r\n", "import type { ProfileData } from '../types/interfaces.js';\r\nimport { UniversalAIAdapter, selectModel } from './universal-ai-adapter.js';\r\nimport { getPreprocessorJsonSchema, buildPreprocessorPrompt } from './prompts.js';\r\n\r\nexport interface PreprocessorResult {\r\n  posting_cadence: string;\r\n  content_themes: string[];\r\n  audience_signals: string[];\r\n  brand_mentions: string[];\r\n  engagement_patterns: string;\r\n  collaboration_history: string;\r\n  contact_readiness: string;\r\n  content_quality: string;\r\n}\r\n\r\nexport async function runPreprocessor(\r\n  profile: ProfileData,\r\n  env: any,\r\n  requestId: string\r\n): Promise<{\r\n  result: PreprocessorResult;\r\n  costDetails: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    model_used: string;\r\n    block_type: string;\r\n  };\r\n}> {\r\n  \r\n  // Check R2 cache first\r\n  const cacheKey = generateCacheKey(profile);\r\n  const cached = await getCachedPreprocessor(cacheKey, env);\r\n  if (cached) {\r\n    console.log(`\uD83D\uDCCB [Preprocessor] Cache hit for @${profile.username}`);\r\n    return {\r\n      result: cached,\r\n      costDetails: {\r\n        actual_cost: 0,\r\n        tokens_in: 0,\r\n        tokens_out: 0,\r\n        model_used: 'cached',\r\n        block_type: 'preprocessor'\r\n      }\r\n    };\r\n  }\r\n\r\n  console.log(`\uD83D\uDCCB [Preprocessor] Starting for @${profile.username}`);\r\n  \r\n  try {\r\n    // Use economy tier for preprocessor (GPT-5 nano or mini)\r\n    const modelName = selectModel('preprocessor', 'economy');\r\n    \r\n    const aiAdapter = new UniversalAIAdapter(env, requestId);\r\n    const response = await aiAdapter.executeRequest({\r\n      model_name: modelName,\r\n      system_prompt: 'You are a data extraction specialist. Extract structured facts from Instagram profiles. Only include what you can observe directly.',\r\n      user_prompt: buildPreprocessorPrompt(profile),\r\n      max_tokens: 400,\r\n      json_schema: getPreprocessorJsonSchema(),\r\n      response_format: 'json',\r\n      temperature: 0.2\r\n    });\r\n\r\n    const result = JSON.parse(response.content) as PreprocessorResult;\r\n    \r\n    // Cache for 24-72h\r\n    await cachePreprocessor(cacheKey, result, env);\r\n    \r\n    console.log(`\uD83D\uDCCB [Preprocessor] Completed for @${profile.username}, cached for 48h, model: ${response.model_used}`);\r\n\r\n    return {\r\n      result,\r\n      costDetails: {\r\n        actual_cost: response.usage.total_cost,\r\n        tokens_in: response.usage.input_tokens,\r\n        tokens_out: response.usage.output_tokens,\r\n        model_used: response.model_used,\r\n        block_type: 'preprocessor'\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error(`\uD83D\uDCCB [Preprocessor] Failed:`, error.message);\r\n    throw new Error(`Preprocessor failed: ${error.message}`);\r\n  }\r\n}\r\n\r\nfunction generateCacheKey(profile: ProfileData): string {\r\n  const contentHash = profile.latestPosts?.slice(0, 5)\r\n    .map(p => `${p.shortCode}:${p.likesCount}:${p.commentsCount}`)\r\n    .join('|') || 'no-posts';\r\n  \r\n  return `preprocessor:${profile.username}:${profile.followersCount}:${contentHash}`;\r\n}\r\n\r\nasync function getCachedPreprocessor(cacheKey: string, env: any): Promise<PreprocessorResult | null> {\r\n  try {\r\n    if (!env.ANALYSIS_CACHE) return null;\r\n    \r\n    const cached = await env.ANALYSIS_CACHE.get(cacheKey, 'json');\r\n    if (cached && cached.expires > Date.now()) {\r\n      return cached.result;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error: any) {\r\n    console.warn('Cache read failed:', error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function cachePreprocessor(cacheKey: string, result: PreprocessorResult, env: any): Promise<void> {\r\n  try {\r\n    if (!env.ANALYSIS_CACHE) return;\r\n    \r\n    const cacheData = {\r\n      result,\r\n      expires: Date.now() + (48 * 60 * 60 * 1000) // 48 hours\r\n    };\r\n    \r\n    await env.ANALYSIS_CACHE.put(cacheKey, JSON.stringify(cacheData));\r\n  } catch (error: any) {\r\n    console.warn('Cache write failed:', error.message);\r\n  }\r\n}\r\n", "export interface ModelConfig {\r\n  model: string;\r\n  cost_per_1k: number;\r\n  max_in: number;\r\n  max_out: number;\r\n}\r\n\r\nexport const MODEL_CONFIG: Record<string, ModelConfig> = {\r\n  triage: { \r\n    model: 'gpt-4o-mini', // Using existing model until GPT-5 available\r\n    cost_per_1k: 0.00015, \r\n    max_in: 600, \r\n    max_out: 200 \r\n  },\r\n  preproc: { \r\n    model: 'gpt-4o-mini', \r\n    cost_per_1k: 0.00015, \r\n    max_in: 800, \r\n    max_out: 400 \r\n  },\r\n  light: { \r\n    model: 'gpt-4o', \r\n    cost_per_1k: 0.0025, \r\n    max_in: 800, \r\n    max_out: 400 \r\n  },\r\n  deep: { \r\n    model: 'gpt-4o', \r\n    cost_per_1k: 0.0025, \r\n    max_in: 1200, \r\n    max_out: 600 \r\n  },\r\n  xray: { \r\n    model: 'gpt-4o', \r\n    cost_per_1k: 0.0025, \r\n    max_in: 1500, \r\n    max_out: 800 \r\n  }\r\n};\r\n\r\nexport const CREDIT_PRICING = {\r\n  base_fees: {\r\n    light: 0.5,\r\n    deep: 1.0,\r\n    xray: 2.0\r\n  },\r\n  minimum_charge: 0.1, // Prevent negative margins\r\n  token_cap: 2200, // Skip remaining if hit\r\n  margin_target: 0.3 // 30% target margin over actual costs\r\n};\r\n\r\nexport function calculateCreditCost(\r\n  analysisType: string,\r\n  actualCost: number,\r\n  tokensUsed: number\r\n): number {\r\n  const baseFee = CREDIT_PRICING.base_fees[analysisType as keyof typeof CREDIT_PRICING.base_fees] || 1.0;\r\n  \r\n  // Apply token cap penalty\r\n  if (tokensUsed > CREDIT_PRICING.token_cap) {\r\n    return baseFee * 1.5; // 50% penalty for exceeding cap\r\n  }\r\n  \r\n  // Calculate with margin\r\n  const costWithMargin = actualCost * (1 + CREDIT_PRICING.margin_target);\r\n  const finalCost = Math.max(baseFee + costWithMargin, CREDIT_PRICING.minimum_charge);\r\n  \r\n  return Math.round(finalCost * 100) / 100; // Round to 2 decimal places\r\n}\r\n\r\nexport function calculateCost(\r\n  tokensIn: number, \r\n  tokensOut: number, \r\n  modelType: string\r\n): number {\r\n  const config = MODEL_CONFIG[modelType];\r\n  if (!config) throw new Error(`Unknown model type: ${modelType}`);\r\n  \r\n  const totalTokens = tokensIn + tokensOut;\r\n  return (totalTokens * config.cost_per_1k) / 1000;\r\n}\r\n\r\nexport function getTotalCreditsRequired(\r\n  analysisType: string,\r\n  estimatedCost: number\r\n): number {\r\n  const baseFee = CREDIT_PRICING.base_fees[analysisType as keyof typeof CREDIT_PRICING.base_fees];\r\n  const totalCost = baseFee + estimatedCost;\r\n  return Math.max(totalCost, CREDIT_PRICING.minimum_charge);\r\n}\r\n", "import type { ProfileData, BusinessProfile, AnalysisResult, Env } from '../types/interfaces.js';\r\nimport { callWithRetry } from '../utils/helpers.js';\r\nimport { calculateConfidenceLevel } from '../utils/validation.js';\r\nimport { getApiKey } from './enhanced-config-manager.js';\r\n\r\n// Import all prompts and schemas from centralized file\r\nimport {\r\n  getLightAnalysisJsonSchema,\r\n  getDeepAnalysisJsonSchema,\r\n  getXRayAnalysisJsonSchema,\r\n  buildLightAnalysisPrompt,\r\n  buildDeepAnalysisPrompt,\r\n  buildXRayAnalysisPrompt,\r\n  buildOutreachMessagePrompt,\r\n  buildQuickSummaryPrompt,\r\n  buildDeepSummaryPrompt\r\n} from './prompts.js';\r\n\r\nimport { MODEL_CONFIG, calculateCost } from '../config/models.js';\r\nimport { UniversalAIAdapter, selectModel } from './universal-ai-adapter.js';\r\n// ===============================================================================\r\n// HELPER FUNCTIONS\r\n// ===============================================================================\r\n\r\nconst isGPT5 = (m: string) => /^gpt-5/i.test(m);\r\n\r\ntype ChatMsg = { role: 'system'|'user'|'assistant'; content: string };\r\n\r\nexport async function performAIAnalysis(\r\n  profile: ProfileData,\r\n  business: BusinessProfile,\r\n  analysisType: 'light' | 'deep' | 'xray',\r\n  env: Env,\r\n  requestId: string,\r\n  context?: {\r\n    triage?: any;\r\n    preprocessor?: any;\r\n  },\r\n  modelTier: 'premium' | 'balanced' | 'economy' = 'balanced' // NEW: Support tier selection\r\n): Promise<{\r\n  result: AnalysisResult;\r\n  costDetails: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    model_used: string;\r\n    block_type: string;\r\n  };\r\n}> {\r\n  \r\n  console.log(`\uD83E\uDD16 [AI Analysis] Starting ${analysisType} analysis with ${modelTier} tier`);\r\n\r\n  try {\r\n    // Select model based on analysis type and tier\r\n    const modelName = selectModel(analysisType, modelTier, context);\r\n    console.log(`\uD83E\uDD16 [AI Analysis] Selected model: ${modelName}`);\r\n\r\n    // Get appropriate prompt and schema\r\n    let prompt: string;\r\n    let jsonSchema: any;\r\n    \r\n    switch (analysisType) {\r\n      case 'light':\r\n        prompt = buildLightAnalysisPrompt(profile, business, context);\r\n        jsonSchema = getLightAnalysisJsonSchema();\r\n        break;\r\n      case 'deep':\r\n        prompt = buildDeepAnalysisPrompt(profile, business, context);\r\n        jsonSchema = getDeepAnalysisJsonSchema();\r\n        break;\r\n      case 'xray':\r\n        prompt = buildXRayAnalysisPrompt(profile, business, context);\r\n        jsonSchema = getXRayAnalysisJsonSchema();\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported analysis type: ${analysisType}`);\r\n    }\r\n\r\n    // Execute via universal adapter\r\n    const aiAdapter = new UniversalAIAdapter(env, requestId);\r\n    const response = await aiAdapter.executeRequest({\r\n      model_name: modelName,\r\n      system_prompt: getSystemPrompt(analysisType),\r\n      user_prompt: prompt,\r\n      max_tokens: getMaxTokens(analysisType),\r\n      json_schema: jsonSchema,\r\n      response_format: 'json'\r\n    });\r\n\r\n    // Parse and transform result\r\n    const rawResult = JSON.parse(response.content);\r\n    const transformedResult = transformAnalysisResult(rawResult, analysisType, profile);\r\n\r\n    console.log(`\uD83E\uDD16 [AI Analysis] Completed with model: ${response.model_used}, cost: $${response.usage.total_cost.toFixed(4)}`);\r\n\r\n    return {\r\n      result: transformedResult,\r\n      costDetails: {\r\n        actual_cost: response.usage.total_cost,\r\n        tokens_in: response.usage.input_tokens,\r\n        tokens_out: response.usage.output_tokens,\r\n        model_used: response.model_used,\r\n        block_type: analysisType\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error(`\uD83E\uDD16 [AI Analysis] Failed:`, error.message);\r\n    throw new Error(`AI analysis failed: ${error.message}`);\r\n  }\r\n}\r\n\r\nfunction getSystemPrompt(analysisType: string): string {\r\n  const prompts = {\r\n    light: 'You are an expert business analyst specializing in influencer partnerships. Return ONLY valid JSON matching the exact schema provided.',\r\n    deep: 'You are an expert business analyst specializing in influencer partnerships. Provide comprehensive analysis. Return ONLY valid JSON matching the exact schema provided.',\r\n    xray: 'You are an expert business analyst and psychological profiler specializing in influencer partnerships. Provide deep psychological insights. Return ONLY valid JSON matching the exact schema provided.'\r\n  };\r\n  \r\n  return prompts[analysisType] || prompts.light;\r\n}\r\n\r\nfunction getMaxTokens(analysisType: string): number {\r\n  const limits = {\r\n    light: 500,\r\n    deep: 800,\r\n    xray: 1200\r\n  };\r\n  \r\n  return limits[analysisType] || 500;\r\n}\r\n\r\nfunction transformAnalysisResult(\r\n  rawResult: any,\r\n  analysisType: 'light' | 'deep' | 'xray',\r\n  profile: ProfileData\r\n): AnalysisResult {\r\n  // Extract core scores and metadata\r\n  const baseResult: AnalysisResult = {\r\n    score: rawResult.score || 0,\r\n    engagement_score: rawResult.engagement_score || 0,\r\n    niche_fit: rawResult.niche_fit || 0,\r\n    quick_summary: rawResult.quick_summary || '',\r\n    confidence_level: rawResult.confidence_level || calculateConfidenceLevel(profile, analysisType),\r\n    audience_quality: 'Medium',\r\n    engagement_insights: '',\r\n    selling_points: [],\r\n    reasons: []\r\n  };\r\n\r\n  // Transform payload-specific data\r\n  switch (analysisType) {\r\n    case 'light':\r\n      if (rawResult.light_payload) {\r\n        baseResult.audience_quality = rawResult.light_payload.audience_quality || 'Medium';\r\n        baseResult.engagement_insights = rawResult.light_payload.engagement_summary || '';\r\n        baseResult.selling_points = rawResult.light_payload.insights || [];\r\n        baseResult.reasons = rawResult.light_payload.insights || [];\r\n      }\r\n      break;\r\n\r\n    case 'deep':\r\n      if (rawResult.deep_payload) {\r\n        baseResult.deep_summary = rawResult.deep_payload.deep_summary;\r\n        baseResult.selling_points = rawResult.deep_payload.selling_points || [];\r\n        baseResult.reasons = rawResult.deep_payload.reasons || [];\r\n        baseResult.outreach_message = rawResult.deep_payload.outreach_message;\r\n        baseResult.audience_quality = 'High';\r\n        baseResult.engagement_insights = rawResult.deep_payload.audience_insights || '';\r\n        \r\n        if (rawResult.deep_payload.engagement_breakdown) {\r\n          baseResult.avg_likes = rawResult.deep_payload.engagement_breakdown.avg_likes;\r\n          baseResult.avg_comments = rawResult.deep_payload.engagement_breakdown.avg_comments;\r\n          baseResult.engagement_rate = rawResult.deep_payload.engagement_breakdown.engagement_rate;\r\n        }\r\n      }\r\n      break;\r\n\r\n    case 'xray':\r\n      if (rawResult.xray_payload) {\r\n        baseResult.audience_quality = 'Premium';\r\n        baseResult.engagement_insights = `Commercial Intelligence: ${rawResult.xray_payload.commercial_intelligence?.budget_tier || 'Unknown'} budget tier`;\r\n        \r\n        baseResult.selling_points = [\r\n          ...(rawResult.xray_payload.copywriter_profile?.pain_points || []),\r\n          ...(rawResult.xray_payload.copywriter_profile?.dreams_desires || [])\r\n        ];\r\n        baseResult.reasons = rawResult.xray_payload.persuasion_strategy?.key_messages || [];\r\n        \r\n        // Store X-ray specific data\r\n        baseResult.copywriter_profile = rawResult.xray_payload.copywriter_profile;\r\n        baseResult.commercial_intelligence = rawResult.xray_payload.commercial_intelligence;\r\n        baseResult.persuasion_strategy = rawResult.xray_payload.persuasion_strategy;\r\n      }\r\n      break;\r\n  }\r\n\r\n  return baseResult;\r\n}\r\nfunction buildOpenAIChatBody(opts: {\r\n  model: string;\r\n  messages: ChatMsg[];\r\n  maxTokens: number;\r\n  temperature?: number;\r\n  responseFormatJSON?: boolean;\r\n  jsonSchema?: any;\r\n}) {\r\n  const { model, messages, maxTokens, temperature, responseFormatJSON, jsonSchema } = opts;\r\n\r\n  if (isGPT5(model)) {\r\n    const body: any = {\r\n      model,\r\n      messages,\r\n      max_completion_tokens: maxTokens,\r\n    };\r\n    if (jsonSchema) {\r\n      body.response_format = {\r\n        type: 'json_schema',\r\n        json_schema: jsonSchema\r\n      };\r\n    } else if (responseFormatJSON) {\r\n      body.response_format = { type: 'json_object' };\r\n    }\r\n    return body;\r\n  }\r\n\r\n  const body: any = {\r\n    model,\r\n    messages,\r\n    max_tokens: maxTokens,\r\n    temperature: (typeof temperature === 'number' ? temperature : 0.7),\r\n  };\r\n  if (jsonSchema) {\r\n    body.response_format = {\r\n      type: 'json_schema',\r\n      json_schema: jsonSchema\r\n    };\r\n  } else if (responseFormatJSON) {\r\n    body.response_format = { type: 'json_object' };\r\n  }\r\n  return body;\r\n}\r\n\r\nfunction parseChoiceSafe(choice: any): string {\r\n  if (!choice) return '';\r\n  const msg = choice?.message;\r\n  if (!msg) return '';\r\n  if (typeof msg.content === 'string') return msg.content;\r\n  if (Array.isArray(msg.content)) {\r\n    return msg.content.map((c: any) => (typeof c === 'string' ? c : (c?.text ?? ''))).join(' ').trim();\r\n  }\r\n  return '';\r\n}\r\n\r\n// Simple logging function to avoid import issues\r\nfunction log(level: string, message: string, data?: any, requestId?: string) {\r\n  const timestamp = new Date().toISOString();\r\n  const logData = { timestamp, level, message, requestId, ...data };\r\n  console.log(JSON.stringify(logData));\r\n}\r\n\r\n// ===============================================================================\r\n// ANALYSIS EXECUTION WITH RETRY LOGIC\r\n// ===============================================================================\r\n\r\nasync function executeAnalysisWithRetry(\r\n  prompt: string,\r\n  jsonSchema: any,\r\n  env: Env,\r\n  requestId: string,\r\n  blockType: string,\r\n  maxRetries: number = 3\r\n): Promise<{\r\n  result: any;\r\n  costDetails: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    model_used: string;\r\n    block_type: string;\r\n  };\r\n}> {\r\n  \r\n  const openaiKey = await getApiKey('OPENAI_API_KEY', env);\r\n  if (!openaiKey) throw new Error('OpenAI API key not available');\r\n\r\n  const modelConfig = MODEL_CONFIG[blockType];\r\n  const model = modelConfig.model;\r\n  \r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      log('info', `Analysis attempt ${attempt}/${maxRetries}`, { blockType, model }, requestId);\r\n\r\n      const body = buildOpenAIChatBody({\r\n        model,\r\n        messages: [\r\n          { \r\n            role: 'system', \r\n            content: 'You are an expert business analyst specializing in influencer partnerships. Return ONLY valid JSON matching the exact schema provided. No additional text, explanations, or markdown formatting.' \r\n          },\r\n          { role: 'user', content: prompt }\r\n        ],\r\n        maxTokens: modelConfig.max_out,\r\n        jsonSchema: jsonSchema\r\n      });\r\n\r\n      const response = await callWithRetry(\r\n        'https://api.openai.com/v1/chat/completions',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${openaiKey}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(body)\r\n        },\r\n        2, // 2 retries for API call\r\n        2000, // 2 second delay\r\n        30000 // 30 second timeout\r\n      );\r\n\r\n      const content = parseChoiceSafe(response?.choices?.[0]);\r\n      if (!content) {\r\n        throw new Error(`Empty response from model (attempt ${attempt})`);\r\n      }\r\n\r\n      // Calculate actual cost\r\n      const usage = response?.usage;\r\n      const tokensIn = usage?.prompt_tokens || 0;\r\n      const tokensOut = usage?.completion_tokens || 0;\r\n      const actualCost = calculateCost(tokensIn, tokensOut, blockType);\r\n\r\n      // Parse and validate JSON\r\n      let parsedResult;\r\n      try {\r\n        parsedResult = JSON.parse(content);\r\n      } catch (parseError) {\r\n        throw new Error(`Invalid JSON response (attempt ${attempt}): ${parseError}`);\r\n      }\r\n\r\n      log('info', 'Analysis completed successfully', { \r\n        attempt, \r\n        tokensIn,\r\n        tokensOut,\r\n        actualCost,\r\n        blockType\r\n      }, requestId);\r\n\r\n      return {\r\n        result: parsedResult,\r\n        costDetails: {\r\n          actual_cost: actualCost,\r\n          tokens_in: tokensIn,\r\n          tokens_out: tokensOut,\r\n          model_used: model,\r\n          block_type: blockType\r\n        }\r\n      };\r\n\r\n    } catch (error: any) {\r\n      log('warn', `Analysis attempt ${attempt} failed`, { \r\n        error: error.message,\r\n        blockType\r\n      }, requestId);\r\n\r\n      if (attempt === maxRetries) {\r\n        throw new Error(`All ${maxRetries} analysis attempts failed. Last error: ${error.message}`);\r\n      }\r\n\r\n      // Wait before retry (exponential backoff)\r\n      await new Promise(resolve => setTimeout(resolve, attempt * 1000));\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ===============================================================================\r\n// LEGACY OUTREACH MESSAGE GENERATION\r\n// ===============================================================================\r\n\r\nexport async function generateOutreachMessage(\r\n  profile: ProfileData,\r\n  analysis: AnalysisResult,\r\n  business: BusinessProfile,\r\n  env: Env\r\n): Promise<string> {\r\n  \r\n  try {\r\n    const prompt = buildOutreachMessagePrompt(profile, analysis, business);\r\n    const openaiKey = await getApiKey('OPENAI_API_KEY', env);\r\n    \r\n    if (!openaiKey) throw new Error('OpenAI API key not available');\r\n\r\n    const body = buildOpenAIChatBody({\r\n      model: 'gpt-4o',\r\n      messages: [\r\n        { role: 'system', content: 'You are a professional copywriter specializing in influencer outreach. Write personalized, compelling messages that feel human and authentic.' },\r\n        { role: 'user', content: prompt }\r\n      ],\r\n      maxTokens: 500\r\n    });\r\n\r\n    const response = await callWithRetry(\r\n      'https://api.openai.com/v1/chat/completions',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${openaiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(body)\r\n      },\r\n      2, // 2 retries\r\n      2000, // 2 second delay\r\n      15000 // 15 second timeout\r\n    );\r\n\r\n    const content = parseChoiceSafe(response?.choices?.[0]);\r\n    if (!content) throw new Error('Empty outreach message response');\r\n\r\n    log('info', 'Outreach message generated successfully', { \r\n      username: profile.username,\r\n      messageLength: content.length\r\n    });\r\n\r\n    return content;\r\n\r\n  } catch (error: any) {\r\n    log('error', 'Outreach message generation failed', { \r\n      error: error.message,\r\n      username: profile.username\r\n    });\r\n    \r\n    // Return fallback message\r\n    return `Hi @${profile.username}! I came across your ${profile.isVerified ? 'verified' : 'amazing'} profile and was impressed by your content. I think there could be a great partnership opportunity between you and ${business.name}. Would love to chat about how we can work together! \uD83E\uDD1D`;\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// SUMMARY GENERATION FUNCTIONS\r\n// ===============================================================================\r\n\r\nexport async function generateQuickSummary(\r\n  profile: ProfileData,\r\n  analysis: AnalysisResult,\r\n  env: Env\r\n): Promise<string> {\r\n  \r\n  try {\r\n    const prompt = buildQuickSummaryPrompt(profile, analysis);\r\n    const openaiKey = await getApiKey('OPENAI_API_KEY', env);\r\n    \r\n    if (!openaiKey) {\r\n      // Return fallback summary if no API key\r\n      return `${profile.isVerified ? 'Verified' : 'Unverified'} profile with ${profile.followersCount.toLocaleString()} followers and ${analysis.score}/100 business compatibility score. Engagement rate of ${profile.engagement?.engagementRate || 'unknown'}% indicates ${analysis.audience_quality ? String(analysis.audience_quality).toLowerCase() : 'unknown'} audience quality.`;\r\n    }\r\n\r\n    const body = buildOpenAIChatBody({\r\n      model: 'gpt-4o',\r\n      messages: [\r\n        { role: 'system', content: 'You are a business analyst. Provide concise, professional summaries of influencer profiles.' },\r\n        { role: 'user', content: prompt }\r\n      ],\r\n      maxTokens: 200\r\n    });\r\n\r\n    const response = await callWithRetry(\r\n      'https://api.openai.com/v1/chat/completions',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${openaiKey}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(body)\r\n      },\r\n      2, // 2 retries\r\n      2000, // 2 second delay\r\n      10000 // 10 second timeout\r\n    );\r\n\r\n    const content = parseChoiceSafe(response?.choices?.[0]);\r\n    return content || `${profile.username} analysis summary generated successfully.`;\r\n\r\n  } catch (error: any) {\r\n    log('warn', 'Quick summary generation failed, using fallback', { \r\n      error: error.message,\r\n      username: profile.username\r\n    });\r\n    \r\n    // Return fallback summary\r\n    return `${profile.isVerified ? 'Verified' : 'Unverified'} profile with ${profile.followersCount.toLocaleString()} followers and ${analysis.score}/100 business compatibility score. Engagement rate of ${profile.engagement?.engagementRate || 'unknown'}% indicates ${analysis.audience_quality ? String(analysis.audience_quality).toLowerCase() : 'unknown'} audience quality.`;\r\n  }\r\n}\r\n", "import type { ProfileData } from '../types/interfaces.js';\r\nimport { createMicroSnapshot } from './micro-snapshot.js';\r\nimport { runTriage } from './triage.js';\r\nimport { runPreprocessor } from './preprocessor.js';\r\nimport { performAIAnalysis } from './ai-analysis.js';\r\nimport { logger } from '../utils/logger.js';\r\n\r\nexport interface OrchestrationResult {\r\n  result: any;\r\n  totalCost: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    blocks_used: string[];\r\n    total_blocks: number;\r\n  };\r\n  performance: {\r\n    triage_ms: number;\r\n    preprocessor_ms: number;\r\n    analysis_ms: number;\r\n    total_ms: number;\r\n  };\r\n  verdict: 'success' | 'early_exit' | 'error';\r\n  early_exit_reason?: string;\r\n}\r\n\r\nexport async function runAnalysis(\r\n  profile: ProfileData,\r\n  business: any,\r\n  analysisType: 'light' | 'deep' | 'xray',\r\n  env: any,\r\n  requestId: string\r\n): Promise<OrchestrationResult> {\r\n  \r\n  const startTime = Date.now();\r\n  let triageTime = 0;\r\n  let preprocessorTime = 0;\r\n  let analysisTime = 0;\r\n  \r\n  const costs: any[] = [];\r\n  const blocksUsed: string[] = [];\r\n\r\n// Use existing business context from database\r\nconst enrichedBusiness = {\r\n  ...business,\r\n  business_one_liner: business.business_one_liner || null,\r\n  business_context_pack: business.business_context_pack || null\r\n};\r\n\r\n// Only generate if missing (fallback for incomplete data)\r\nif (!enrichedBusiness.business_one_liner || !enrichedBusiness.business_context_pack) {\r\n  logger('warn', 'Business context missing, generating fallback', { business_id: business.id, requestId });\r\n  const generatedContext = await ensureBusinessContext(business, env, requestId);\r\n  Object.assign(enrichedBusiness, generatedContext);\r\n}\r\n\r\nlogger('info', 'Starting analysis orchestration', { \r\n  username: profile.username,\r\n  analysisType,\r\n  business_name: enrichedBusiness.business_name || enrichedBusiness.name,\r\n  has_one_liner: !!enrichedBusiness.business_one_liner\r\n}, requestId);\r\n\r\n  try {\r\n    // STEP 1: Always run triage\r\n    const triageStart = Date.now();\r\nconst snapshot = createMicroSnapshot(profile);\r\nconst triageResponse = await runTriage(snapshot, enrichedBusiness.business_one_liner, env, requestId);\r\ntriageTime = Date.now() - triageStart;\r\n    \r\n    costs.push(triageResponse.costDetails);\r\n    blocksUsed.push('triage');\r\n    \r\n// Log triage results but continue analysis regardless\r\n    logger('info', 'Triage completed, proceeding to analysis', {\r\n      username: profile.username,\r\n      lead_score: triageResponse.result.lead_score,\r\n      data_richness: triageResponse.result.data_richness\r\n    }, requestId);\r\n\r\n    // STEP 2: Determine if preprocessor is needed\r\n    const needsPreprocessor = shouldRunPreprocessor(analysisType, triageResponse.result);\r\n    \r\n    let preprocessorResult = null;\r\n    if (needsPreprocessor) {\r\n      const preprocessorStart = Date.now();\r\n      try {\r\n        const preprocessorResponse = await runPreprocessor(profile, env, requestId);\r\n        preprocessorTime = Date.now() - preprocessorStart;\r\n        \r\n        preprocessorResult = preprocessorResponse.result;\r\n        costs.push(preprocessorResponse.costDetails);\r\n        blocksUsed.push('preprocessor');\r\n        \r\n        logger('info', 'Preprocessor completed', {\r\n          username: profile.username,\r\n          cached: preprocessorResponse.costDetails.actual_cost === 0,\r\n          themes: preprocessorResult.content_themes?.length || 0\r\n        }, requestId);\r\n        \r\n      } catch (prepError: any) {\r\n        preprocessorTime = Date.now() - preprocessorStart;\r\n        logger('warn', 'Preprocessor failed, continuing without it', { \r\n          error: prepError.message \r\n        }, requestId);\r\n        // Continue without preprocessor data\r\n      }\r\n    }\r\n\r\n    // STEP 3: Run main analysis with context\r\n    const analysisStart = Date.now();\r\n    const context = {\r\n      triage: triageResponse.result,\r\n      preprocessor: preprocessorResult\r\n    };\r\n    \r\nconst analysisResponse = await performAIAnalysis(\r\n  profile, \r\n  enrichedBusiness, \r\n  analysisType, \r\n  env, \r\n  requestId,\r\n  context\r\n);\r\n    analysisTime = Date.now() - analysisStart;\r\n    \r\n    costs.push(analysisResponse.costDetails);\r\n    blocksUsed.push(analysisType);\r\n    \r\n    const totalTime = Date.now() - startTime;\r\n    \r\n    logger('info', 'Analysis orchestration completed', {\r\n      username: profile.username,\r\n      analysisType,\r\n      overall_score: analysisResponse.result.score,\r\n      blocks_used: blocksUsed.join('+'),\r\n      total_ms: totalTime,\r\n      total_cost: aggregateCosts(costs).actual_cost\r\n    }, requestId);\r\n\r\n    return {\r\n      result: analysisResponse.result,\r\n      totalCost: aggregateCosts(costs),\r\n      performance: {\r\n        triage_ms: triageTime,\r\n        preprocessor_ms: preprocessorTime,\r\n        analysis_ms: analysisTime,\r\n        total_ms: totalTime\r\n      },\r\n      verdict: 'success'\r\n    };\r\n\r\n  } catch (error: any) {\r\n    const totalTime = Date.now() - startTime;\r\n    \r\n    logger('error', 'Analysis orchestration failed', {\r\n      username: profile.username,\r\n      error: error.message,\r\n      blocks_completed: blocksUsed.join('+'),\r\n      total_ms: totalTime\r\n    }, requestId);\r\n\r\n    return {\r\n      result: { error: error.message },\r\n      totalCost: aggregateCosts(costs),\r\n      performance: {\r\n        triage_ms: triageTime,\r\n        preprocessor_ms: preprocessorTime,\r\n        analysis_ms: analysisTime,\r\n        total_ms: totalTime\r\n      },\r\n      verdict: 'error'\r\n    };\r\n  }\r\n}\r\n\r\nfunction shouldRunPreprocessor(analysisType: string, triageResult: any): boolean {\r\n  switch (analysisType) {\r\n    case 'light':\r\n      return false; // Light never needs preprocessor\r\n    case 'deep':\r\n      return triageResult.data_richness >= 70; // Deep only if rich data\r\n    case 'xray':\r\n      return true; // X-ray always needs preprocessor\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction aggregateCosts(costs: any[]): {\r\n  actual_cost: number;\r\n  tokens_in: number;\r\n  tokens_out: number;\r\n  blocks_used: string[];\r\n  total_blocks: number;\r\n} {\r\n  return {\r\n    actual_cost: costs.reduce((sum, cost) => sum + (cost.actual_cost || 0), 0),\r\n    tokens_in: costs.reduce((sum, cost) => sum + (cost.tokens_in || 0), 0),\r\n    tokens_out: costs.reduce((sum, cost) => sum + (cost.tokens_out || 0), 0),\r\n    blocks_used: costs.map(cost => cost.block_type).filter(Boolean),\r\n    total_blocks: costs.length\r\n  };\r\n}\r\n\r\n// Helper function for bulk analysis\r\nexport async function runBulkAnalysis(\r\n  profiles: ProfileData[],\r\n  business: any,\r\n  analysisType: 'light' | 'deep' | 'xray',\r\n  env: any,\r\n  requestId: string,\r\n  progressCallback?: (completed: number, total: number) => void\r\n): Promise<OrchestrationResult[]> {\r\n  \r\n  const results: OrchestrationResult[] = [];\r\n  const BATCH_SIZE = 3; // Process 3 at a time to avoid overwhelming\r\n  \r\n  logger('info', 'Starting bulk analysis orchestration', {\r\n    total_profiles: profiles.length,\r\n    analysisType,\r\n    batch_size: BATCH_SIZE\r\n  }, requestId);\r\n\r\n  for (let i = 0; i < profiles.length; i += BATCH_SIZE) {\r\n    const batch = profiles.slice(i, i + BATCH_SIZE);\r\n    \r\n    const batchResults = await Promise.all(\r\n      batch.map(profile => \r\n        runAnalysis(profile, business, analysisType, env, `${requestId}-${i + batch.indexOf(profile)}`)\r\n          .catch(error => ({\r\n            result: { error: error.message },\r\n            totalCost: { actual_cost: 0, tokens_in: 0, tokens_out: 0, blocks_used: [], total_blocks: 0 },\r\n            performance: { triage_ms: 0, preprocessor_ms: 0, analysis_ms: 0, total_ms: 0 },\r\n            verdict: 'error' as const\r\n          }))\r\n      )\r\n    );\r\n    \r\n    results.push(...batchResults);\r\n    \r\n    // Progress callback\r\n    if (progressCallback) {\r\n      progressCallback(Math.min(i + BATCH_SIZE, profiles.length), profiles.length);\r\n    }\r\n    \r\n    // Brief pause between batches to be respectful to APIs\r\n    if (i + BATCH_SIZE < profiles.length) {\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n  }\r\n  \r\n  const totalCost = results.reduce((sum, r) => sum + r.totalCost.actual_cost, 0);\r\n  const successCount = results.filter(r => r.verdict === 'success').length;\r\n  const earlyExitCount = results.filter(r => r.verdict === 'early_exit').length;\r\n  \r\n  logger('info', 'Bulk analysis orchestration completed', {\r\n    total_profiles: profiles.length,\r\n    successful: successCount,\r\n    early_exits: earlyExitCount,\r\n    errors: results.length - successCount - earlyExitCount,\r\n    total_cost: totalCost\r\n  }, requestId);\r\n  \r\n  return results;\r\n}\r\n\r\n// Add these new schema functions for pipeline support\r\n\r\nexport function getTriageJsonSchema() {\r\n  return {\r\n    name: 'TriageResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        lead_score: { type: 'integer', minimum: 0, maximum: 100 },\r\n        data_richness: { type: 'integer', minimum: 0, maximum: 100 },\r\n        confidence: { type: 'number', minimum: 0, maximum: 1 },\r\n        early_exit: { type: 'boolean' },\r\n        focus_points: { \r\n          type: 'array', \r\n          items: { type: 'string' }, \r\n          minItems: 2, \r\n          maxItems: 4 \r\n        }\r\n      },\r\n      required: ['lead_score', 'data_richness', 'confidence', 'early_exit', 'focus_points']\r\n    }\r\n  };\r\n}\r\n\r\nexport function getPreprocessorJsonSchema() {\r\n  return {\r\n    name: 'PreprocessorResult',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        posting_cadence: { type: 'string' },\r\n        content_themes: { \r\n          type: 'array', \r\n          items: { type: 'string' },\r\n          maxItems: 5\r\n        },\r\n        audience_signals: { \r\n          type: 'array', \r\n          items: { type: 'string' },\r\n          maxItems: 4\r\n        },\r\n        brand_mentions: { \r\n          type: 'array', \r\n          items: { type: 'string' }\r\n        },\r\n        engagement_patterns: { type: 'string' },\r\n        collaboration_history: { type: 'string' },\r\n        contact_readiness: { type: 'string' },\r\n        content_quality: { type: 'string' }\r\n      },\r\n      required: ['posting_cadence', 'content_themes', 'audience_signals', 'brand_mentions', 'engagement_patterns', 'collaboration_history', 'contact_readiness', 'content_quality']\r\n    }\r\n  };\r\n}\r\n\r\nexport function getBusinessContextJsonSchema() {\r\n  return {\r\n    name: 'BusinessContext',\r\n    strict: true,\r\n    schema: {\r\n      type: 'object',\r\n      additionalProperties: false,\r\n      properties: {\r\n        business_one_liner: { \r\n          type: 'string', \r\n          maxLength: 140,\r\n          description: 'I help [TARGET] achieve [OUTCOME] through [METHOD]'\r\n        },\r\n        business_context_pack: {\r\n          type: 'object',\r\n          additionalProperties: false,\r\n          properties: {\r\n            niche: { type: 'string' },\r\n            value_prop: { type: 'string' },\r\n            must_avoid: { \r\n              type: 'array', \r\n              items: { type: 'string' },\r\n              minItems: 3,\r\n              maxItems: 3\r\n            },\r\n            priority_signals: { \r\n              type: 'array', \r\n              items: { type: 'string' },\r\n              minItems: 4,\r\n              maxItems: 4\r\n            },\r\n            tone_words: { \r\n              type: 'array', \r\n              items: { type: 'string' },\r\n              minItems: 3,\r\n              maxItems: 3\r\n            }\r\n          },\r\n          required: ['niche', 'value_prop', 'must_avoid', 'priority_signals', 'tone_words']\r\n        }\r\n      },\r\n      required: ['business_one_liner', 'business_context_pack']\r\n    }\r\n  };\r\n}\r\n\r\nexport function buildTriagePrompt(profile: any, businessOneLiner: string): string {\r\n  return `# LEAD TRIAGE: Quick Pass/Fail Decision\r\n\r\n## YOUR BUSINESS\r\n${businessOneLiner}\r\n\r\n## PROFILE SNAPSHOT\r\n- **Username**: @${profile.username}\r\n- **Followers**: ${profile.followers?.toLocaleString() || 0}\r\n- **Status**: ${profile.verified ? 'Verified \u2713' : 'Unverified'} | ${profile.private ? 'Private \u26A0\uFE0F' : 'Public'}\r\n- **Bio**: \"${profile.bio_short || 'No bio'}\"\r\n- **External Links**: ${profile.external_domains?.length > 0 ? profile.external_domains.join(', ') : 'None'}\r\n- **Recent Activity**: ~${profile.posts_30d || 0} posts estimated\r\n- **Engagement Data**: ${profile.engagement_signals ? \r\n    `${profile.engagement_signals.avg_likes?.toLocaleString() || 0} avg likes, ${profile.engagement_signals.avg_comments || 0} comments (${profile.engagement_signals.posts_analyzed || 0} posts)` : \r\n    'Not available'}\r\n\r\n## TASK: 10-Second Lead Decision\r\n\r\nScore this profile on two dimensions:\r\n\r\n**lead_score (0-100)**: Business fit potential\r\n- 80-100: Clear target match, obvious collaboration potential\r\n- 60-79: Good fit signals, worth deeper analysis  \r\n- 40-59: Possible fit but unclear value\r\n- 20-39: Weak signals, probably wrong audience\r\n- 0-19: Obviously wrong fit, different niche entirely\r\n\r\n**data_richness (0-100)**: Available information quality\r\n**confidence (0-1)**: How certain are you about these scores?\r\n**early_exit**: Set to false (always continue to full analysis)\r\n**focus_points**: 2-4 specific observations that drove your scores\r\n\r\nReturn ONLY JSON matching the exact schema.`;\r\n}\r\n\r\nexport function buildPreprocessorPrompt(profile: any): string {\r\n  const postsData = profile.latestPosts || [];\r\n  const engagementData = profile.engagement || null;\r\n\r\n  return `# DATA EXTRACTION: Instagram Profile Facts\r\n\r\n## PROFILE OVERVIEW\r\n- **Username**: @${profile.username}\r\n- **Followers**: ${profile.followersCount?.toLocaleString() || 0}\r\n- **Bio**: \"${profile.bio || 'No bio'}\"\r\n- **External Link**: ${profile.externalUrl || 'None'}\r\n- **Account Type**: ${profile.isBusinessAccount ? 'Business' : 'Personal'} | ${profile.isVerified ? 'Verified' : 'Unverified'}\r\n\r\n## CONTENT ANALYSIS\r\n- **Posts Available**: ${postsData.length}\r\n- **Engagement Data**: ${engagementData ? \r\n    `${engagementData.engagementRate}% rate (${engagementData.avgLikes} avg likes, ${engagementData.avgComments} comments)` : \r\n    'Not available'}\r\n\r\nExtract observable facts only. Return structured data based ONLY on what you can see.\r\n\r\nReturn ONLY JSON matching the exact schema.`;\r\n}\r\n\r\nexport function buildBusinessContextPrompt(business: any): string {\r\n  return `# BUSINESS CONTEXT EXTRACTION\r\n\r\n## INPUT BUSINESS\r\n- **Name**: ${business.business_name || business.name}\r\n- **Industry**: ${business.business_niche || business.industry}  \r\n- **Target**: ${business.target_audience}\r\n- **Value**: ${business.value_proposition}\r\n- **Problems**: ${business.target_problems}\r\n\r\n## TASK 1: Business One-Liner (140 chars max)\r\nCreate: \"I help [TARGET] achieve [OUTCOME] through [METHOD]\"\r\n\r\n## TASK 2: Context Pack\r\nExtract 5 key elements:\r\n\r\n**niche**: Single industry/category (e.g., \"fitness coaching\", \"ecommerce beauty\")\r\n**value_prop**: Core benefit in 1 sentence  \r\n**must_avoid**: 3 profile types that are definitely wrong fit\r\n**priority_signals**: 4 Instagram signals that indicate good fit\r\n**tone_words**: 3 brand voice descriptors\r\n\r\nReturn ONLY JSON matching the exact schema.`;\r\n}\r\n", "import type { Env } from '../types/interfaces.js';\r\nimport { fetchJson } from '../utils/helpers.js';\r\nimport { logger } from '../utils/logger.js';\r\n\r\n// ===============================================================================\r\n// LEADS TABLE OPERATIONS\r\n// ===============================================================================\r\n\r\nexport async function upsertLead(\r\n  leadData: any,\r\n  env: Env\r\n): Promise<string> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    logger('info', 'Upserting lead record', { \r\n      username: leadData.username,\r\n      business_id: leadData.business_id\r\n    });\r\n\r\n    const cleanLeadData = {\r\n      user_id: leadData.user_id,\r\n      business_id: leadData.business_id,\r\n      username: leadData.username,\r\n      display_name: leadData.full_name || leadData.displayName || null,\r\n      profile_picture_url: leadData.profile_pic_url || leadData.profilePicUrl || null,\r\n      bio_text: leadData.bio || null,\r\n      external_website_url: leadData.external_url || leadData.externalUrl || null,\r\n      \r\n      // Profile metrics\r\n      follower_count: parseInt(leadData.followers_count || leadData.followersCount) || 0,\r\n      following_count: parseInt(leadData.following_count || leadData.followingCount) || 0,\r\n      post_count: parseInt(leadData.posts_count || leadData.postsCount) || 0,\r\n      \r\n      // Profile attributes\r\n      is_verified_account: leadData.is_verified || leadData.isVerified || false,\r\n      is_private_account: leadData.is_private || leadData.isPrivate || false,\r\n      is_business_account: leadData.is_business_account || leadData.isBusinessAccount || false,\r\n      \r\n      // Platform info\r\n      platform_type: 'instagram',\r\n      profile_url: leadData.profile_url || `https://instagram.com/${leadData.username}`,\r\n      \r\n      // Update timestamp\r\n      last_updated_at: new Date().toISOString()\r\n    };\r\n\r\n    // Use UPSERT to handle duplicates\r\n    const upsertQuery = `\r\n      ${env.SUPABASE_URL}/rest/v1/leads?on_conflict=user_id,username,business_id\r\n    `;\r\n\r\n    const leadResponse = await fetch(upsertQuery, {\r\n      method: 'POST',\r\n      headers: { ...headers, Prefer: 'return=representation,resolution=merge-duplicates' },\r\n      body: JSON.stringify(cleanLeadData)\r\n    });\r\n\r\n    if (!leadResponse.ok) {\r\n      const errorText = await leadResponse.text();\r\n      throw new Error(`Failed to upsert lead: ${leadResponse.status} - ${errorText}`);\r\n    }\r\n\r\n    const leadResult = await leadResponse.json();\r\n    if (!leadResult || !leadResult.length) {\r\n      throw new Error('Failed to create/update lead record - no data returned');\r\n    }\r\n\r\n    const lead_id = leadResult[0].lead_id;\r\n    logger('info', 'Lead upserted successfully', { lead_id, username: leadData.username });\r\n    \r\n    return lead_id;\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'upsertLead failed', { error: error.message });\r\n    throw new Error(`Lead upsert failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// RUNS TABLE OPERATIONS\r\n// ===============================================================================\r\n\r\nexport async function insertAnalysisRun(\r\n  lead_id: string,\r\n  user_id: string,\r\n  business_id: string,\r\n  analysisType: string,\r\n  analysisResult: any,\r\n  env: Env\r\n): Promise<string> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    logger('info', 'Inserting analysis run', { \r\n      lead_id, \r\n      analysisType,\r\n      score: analysisResult.score\r\n    });\r\n\r\n    const runData = {\r\n      lead_id,\r\n      user_id,\r\n      business_id,\r\n      analysis_type: analysisType,\r\n      analysis_version: '1.0',\r\n      \r\n      // Universal scores (required for all analysis types)\r\n      overall_score: Math.round(parseFloat(analysisResult.score) || 0),\r\n      niche_fit_score: Math.round(parseFloat(analysisResult.niche_fit) || 0),\r\n      engagement_score: Math.round(parseFloat(analysisResult.engagement_score) || 0),\r\n      \r\n      // Quick reference data\r\n      summary_text: analysisResult.quick_summary || null,\r\n      confidence_level: parseFloat(analysisResult.confidence_level) || null,\r\n      \r\n      // Processing metadata\r\n      run_status: 'completed',\r\n      ai_model_used: 'gpt-4o',\r\n      analysis_completed_at: new Date().toISOString()\r\n    };\r\n\r\n    const runResponse = await fetch(`${env.SUPABASE_URL}/rest/v1/runs`, {\r\n      method: 'POST',\r\n      headers: { ...headers, Prefer: 'return=representation' },\r\n      body: JSON.stringify(runData)\r\n    });\r\n\r\n    if (!runResponse.ok) {\r\n      const errorText = await runResponse.text();\r\n      throw new Error(`Failed to insert run: ${runResponse.status} - ${errorText}`);\r\n    }\r\n\r\n    const runResult = await runResponse.json();\r\n    if (!runResult || !runResult.length) {\r\n      throw new Error('Failed to create run record - no data returned');\r\n    }\r\n\r\n    const run_id = runResult[0].run_id;\r\n    logger('info', 'Analysis run inserted successfully', { run_id, analysisType });\r\n    \r\n    return run_id;\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'insertAnalysisRun failed', { error: error.message });\r\n    throw new Error(`Run insert failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// PAYLOADS TABLE OPERATIONS\r\n// ===============================================================================\r\n\r\nexport async function insertAnalysisPayload(\r\n  run_id: string,\r\n  lead_id: string,\r\n  user_id: string,\r\n  business_id: string,\r\n  analysisType: string,\r\n  analysisData: any,\r\n  env: Env\r\n): Promise<string> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    logger('info', 'Inserting analysis payload', { \r\n      run_id, \r\n      analysisType,\r\n      dataKeys: Object.keys(analysisData || {}).length\r\n    });\r\n\r\n    // Structure payload based on analysis type\r\n    let structuredPayload;\r\n    \r\n    switch (analysisType) {\r\n      case 'light':\r\n        structuredPayload = {\r\n          insights: analysisData.selling_points || [],\r\n          audience_quality: analysisData.audience_quality || 'Unknown',\r\n          basic_demographics: analysisData.engagement_insights || null,\r\n          engagement_summary: `Avg engagement: ${analysisData.engagement_score || 0}%`\r\n        };\r\n        break;\r\n        \r\n      case 'deep':\r\n        structuredPayload = {\r\n          deep_summary: analysisData.deep_summary || null,\r\n          selling_points: analysisData.selling_points || [],\r\n          outreach_message: analysisData.outreach_message || null,\r\n          engagement_breakdown: {\r\n            avg_likes: parseInt(analysisData.avg_likes) || 0,\r\n            avg_comments: parseInt(analysisData.avg_comments) || 0,\r\n            engagement_rate: parseFloat(analysisData.engagement_rate) || 0\r\n          },\r\n          latest_posts: analysisData.latest_posts || null,\r\n          audience_insights: analysisData.engagement_insights || null,\r\n          reasons: analysisData.reasons || []\r\n        };\r\n        break;\r\n        \r\n      case 'xray':\r\n        structuredPayload = {\r\n          copywriter_profile: analysisData.copywriter_profile || {},\r\n          commercial_intelligence: analysisData.commercial_intelligence || {},\r\n          persuasion_strategy: analysisData.persuasion_strategy || {}\r\n        };\r\n        break;\r\n        \r\n      default:\r\n        structuredPayload = analysisData;\r\n    }\r\n\r\n    const payloadData = {\r\n      run_id,\r\n      lead_id,\r\n      user_id,\r\n      business_id,\r\n      analysis_type: analysisType,\r\n      analysis_data: structuredPayload,\r\n      data_size_bytes: JSON.stringify(structuredPayload).length\r\n    };\r\n\r\n    const payloadResponse = await fetch(`${env.SUPABASE_URL}/rest/v1/payloads`, {\r\n      method: 'POST',\r\n      headers: { ...headers, Prefer: 'return=representation' },\r\n      body: JSON.stringify(payloadData)\r\n    });\r\n\r\n    if (!payloadResponse.ok) {\r\n      const errorText = await payloadResponse.text();\r\n      throw new Error(`Failed to insert payload: ${payloadResponse.status} - ${errorText}`);\r\n    }\r\n\r\n    const payloadResult = await payloadResponse.json();\r\n    if (!payloadResult || !payloadResult.length) {\r\n      throw new Error('Failed to create payload record - no data returned');\r\n    }\r\n\r\n    const payload_id = payloadResult[0].payload_id;\r\n    logger('info', 'Analysis payload inserted successfully', { payload_id, analysisType });\r\n    \r\n    return payload_id;\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'insertAnalysisPayload failed', { error: error.message });\r\n    throw new Error(`Payload insert failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// MAIN SAVE FUNCTION (Replaces saveLeadAndAnalysis)\r\n// ===============================================================================\r\n\r\nexport async function saveCompleteAnalysis(\r\n  leadData: any,\r\n  analysisData: any,\r\n  analysisType: string,\r\n  env: Env\r\n): Promise<string> {\r\n  try {\r\n    logger('info', 'Starting complete analysis save', { \r\n      username: leadData.username,\r\n      analysisType\r\n    });\r\n\r\n    // Step 1: Upsert lead record\r\n    const lead_id = await upsertLead(leadData, env);\r\n\r\n// Step 2: Insert analysis run (pass analysisResult for scores, not analysisData)\r\n    const run_id = await insertAnalysisRun(\r\n      lead_id,\r\n      leadData.user_id,\r\n      leadData.business_id,\r\n      analysisType,\r\n      analysisData || analysisResult, // Use analysisResult if analysisData is null\r\n      env\r\n    );\r\n\r\n    // Step 3: Insert analysis payload (if we have analysis data)\r\n    if (analysisData && (analysisType === 'deep' || analysisType === 'xray')) {\r\n      await insertAnalysisPayload(\r\n        run_id,\r\n        lead_id,\r\n        leadData.user_id,\r\n        leadData.business_id,\r\n        analysisType,\r\n        analysisData,\r\n        env\r\n      );\r\n    }\r\n\r\n    logger('info', 'Complete analysis save successful', { \r\n      lead_id, \r\n      run_id, \r\n      analysisType \r\n    });\r\n    \r\n    return run_id; // Return run_id instead of lead_id for new system\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'saveCompleteAnalysis failed', { error: error.message });\r\n    throw new Error(`Complete analysis save failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// QUERY FUNCTIONS FOR DASHBOARD\r\n// ===============================================================================\r\n\r\nexport async function getDashboardLeads(\r\n  user_id: string,\r\n  business_id: string,\r\n  env: Env,\r\n  limit: number = 50\r\n): Promise<any[]> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    const query = `\r\n      ${env.SUPABASE_URL}/rest/v1/leads?\r\n      select=lead_id,username,display_name,profile_picture_url,follower_count,is_verified_account,\r\n      runs(run_id,analysis_type,overall_score,niche_fit_score,engagement_score,summary_text,confidence_level,created_at)\r\n      &user_id=eq.${user_id}\r\n      &business_id=eq.${business_id}\r\n      &order=runs.created_at.desc\r\n      &limit=${limit}\r\n    `;\r\n\r\n    const response = await fetch(query, { headers });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Dashboard query failed: ${response.status}`);\r\n    }\r\n\r\n    const results = await response.json();\r\n    logger('info', 'Dashboard leads retrieved', { count: results.length });\r\n    \r\n    return results;\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getDashboardLeads failed', { error: error.message });\r\n    throw new Error(`Dashboard query failed: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport async function getAnalysisDetails(\r\n  run_id: string,\r\n  user_id: string,\r\n  env: Env\r\n): Promise<any> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    const query = `\r\n      ${env.SUPABASE_URL}/rest/v1/runs?\r\n      select=*,leads(*),payloads(analysis_data)\r\n      &run_id=eq.${run_id}\r\n      &leads.user_id=eq.${user_id}\r\n    `;\r\n\r\n    const response = await fetch(query, { headers });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Analysis details query failed: ${response.status}`);\r\n    }\r\n\r\n    const results = await response.json();\r\n    if (!results.length) {\r\n      throw new Error('Analysis not found or access denied');\r\n    }\r\n\r\n    logger('info', 'Analysis details retrieved', { run_id });\r\n    return results[0];\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getAnalysisDetails failed', { error: error.message });\r\n    throw new Error(`Analysis details query failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// CREDIT SYSTEM (UNCHANGED)\r\n// ===============================================================================\r\n\r\nexport async function updateCreditsAndTransaction(\r\n  user_id: string,\r\n  cost: number,\r\n  newBalance: number,\r\n  description: string,\r\n  transactionType: string,\r\n  env: Env,\r\n  run_id?: string,\r\n  costDetails?: {\r\n    actual_cost: number;\r\n    tokens_in: number;\r\n    tokens_out: number;\r\n    model_used: string;\r\n    block_type: string;\r\n    processing_duration_ms?: number;\r\n    blocks_used?: string[];\r\n  }\r\n): Promise<void> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    // Update user credits\r\n    await fetchJson(\r\n      `${env.SUPABASE_URL}/rest/v1/users?id=eq.${user_id}`,\r\n      {\r\n        method: 'PATCH',\r\n        headers,\r\n        body: JSON.stringify({ credits: newBalance })\r\n      },\r\n      10000\r\n    );\r\n\r\n// Create transaction record with enhanced cost tracking\r\nconst transactionData = {\r\n  user_id,\r\n  amount: -cost,\r\n  type: transactionType,\r\n  description: description,\r\n  run_id: run_id || null,\r\n  actual_cost: costDetails?.actual_cost || null,\r\n  tokens_in: costDetails?.tokens_in || null,\r\n  tokens_out: costDetails?.tokens_out || null,\r\n  model_used: costDetails?.model_used || null,\r\n  block_type: costDetails?.block_type || null,\r\n  processing_duration_ms: costDetails?.processing_duration_ms || null,\r\n  blocks_used: costDetails?.blocks_used?.join('+') || null,\r\n  margin: cost - (costDetails?.actual_cost || 0) // Track profit margin\r\n};\r\n\r\n    await fetchJson(\r\n      `${env.SUPABASE_URL}/rest/v1/credit_transactions`,\r\n      {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(transactionData)\r\n      },\r\n      10000\r\n    );\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'updateCreditsAndTransaction error:', error.message);\r\n    throw new Error(`Failed to update credits: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport async function fetchUserAndCredits(user_id: string, env: Env): Promise<any> {\r\n  try {\r\n    const headers = {\r\n      apikey: env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    const response = await fetch(\r\n      `${env.SUPABASE_URL}/rest/v1/users?select=*&id=eq.${user_id}`,\r\n      { headers }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`User fetch failed: ${response.status}`);\r\n    }\r\n\r\n    const users = await response.json();\r\n    if (!users.length) {\r\n      return { isValid: false, error: 'User not found' };\r\n    }\r\n\r\n    const user = users[0];\r\n    return {\r\n      isValid: true,\r\n      credits: user.credits || 0,\r\n      userId: user.id\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'fetchUserAndCredits failed', { error: error.message });\r\n    return { isValid: false, error: error.message };\r\n  }\r\n}\r\n\r\nexport async function fetchBusinessProfile(business_id: string, user_id: string, env: Env): Promise<any> {\r\n  try {\r\n    const headers = {\r\n      apikey: env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    const response = await fetch(\r\n      `${env.SUPABASE_URL}/rest/v1/business_profiles?select=*,business_one_liner,business_context_pack,context_version,context_updated_at&id=eq.${business_id}&user_id=eq.${user_id}`,\r\n      { headers }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Business profile fetch failed: ${response.status}`);\r\n    }\r\n\r\n    const profiles = await response.json();\r\n    if (!profiles.length) {\r\n      throw new Error('Business profile not found or access denied');\r\n    }\r\n\r\n    return profiles[0];\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'fetchBusinessProfile failed', { error: error.message });\r\n    throw new Error(`Business profile fetch failed: ${error.message}`);\r\n  }\r\n}\r\n", "import type { ProfileData, AnalysisType, Env, PostData, EngagementData } from '../types/interfaces.js';\r\nimport { logger } from '../utils/logger.js';\r\nimport { callWithRetry } from '../utils/helpers.js';\r\nimport { validateProfileData, extractHashtags, extractMentions } from '../utils/validation.js';\r\nimport { getApiKey } from './enhanced-config-manager.js';\r\n\r\nexport async function scrapeInstagramProfile(username: string, analysisType: AnalysisType, env: Env): Promise<ProfileData> {\r\n  // Get Apify API token from centralized config\r\n  const apifyToken = await getApiKey('APIFY_API_TOKEN', env);\r\n  \r\n  if (!apifyToken) {\r\n    throw new Error('Profile scraping service not configured');\r\n  }\r\n\r\n  logger('info', 'Starting profile scraping', { username, analysisType });\r\n\r\n  try {\r\n    if (analysisType === 'light') {\r\n      logger('info', 'Using light scraper for basic profile data');\r\n      \r\n      const lightInput = {\r\n        usernames: [username],\r\n        resultsType: \"details\",\r\n        resultsLimit: 1\r\n      };\r\n\r\nconst profileResponse = await callWithRetry(\r\n        `https://api.apify.com/v2/acts/dSCLg0C3YEZ83HzYX/run-sync-get-dataset-items?token=${apifyToken}`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(lightInput)\r\n        },\r\n        3, 2000, 30000\r\n      );\r\n\r\n      logger('info', 'Light scraper raw response', { \r\n        isArray: Array.isArray(profileResponse),\r\n        length: profileResponse?.length,\r\n        firstItem: profileResponse?.[0] ? Object.keys(profileResponse[0]).slice(0, 10) : 'undefined',\r\n        responseType: typeof profileResponse\r\n      });\r\n\r\n      if (!profileResponse || !Array.isArray(profileResponse) || profileResponse.length === 0) {\r\n        throw new Error('Profile not found or private');\r\n      }\r\n\r\n      const profileData = validateProfileData(profileResponse[0], 'light');\r\n      profileData.scraperUsed = 'light';\r\n      profileData.dataQuality = 'medium';\r\n      \r\n      return profileData;\r\n\r\n    } else if (analysisType === 'deep') {\r\n      logger('info', 'Deep analysis: Starting with deep scraper configurations');\r\n      \r\n      const deepConfigs = [\r\n        {\r\n          name: 'primary_deep',\r\n          input: {\r\n            directUrls: [`https://instagram.com/${username}/`],\r\n            resultsLimit: 12,\r\n            addParentData: false,\r\n            enhanceUserSearchWithFacebookPage: false,\r\n            onlyPostsNewerThan: \"2024-01-01\",\r\n            resultsType: \"details\",\r\n            searchType: \"hashtag\"\r\n          }\r\n        },\r\n        {\r\n          name: 'alternative_deep',\r\n          input: {\r\n            directUrls: [`https://www.instagram.com/${username}/`],\r\n            resultsLimit: 10,\r\n            addParentData: true,\r\n            enhanceUserSearchWithFacebookPage: false,\r\n            onlyPostsNewerThan: \"2023-06-01\",\r\n            resultsType: \"details\"\r\n          }\r\n        }\r\n      ];\r\n\r\n      let lastError: Error | null = null;\r\n\r\n      for (const config of deepConfigs) {\r\n        try {\r\n          logger('info', `Trying deep scraper config: ${config.name}`, { username });\r\n          \r\n          const deepResponse = await callWithRetry(\r\n            `https://api.apify.com/v2/acts/shu8hvrXbJbY3Eb9W/run-sync-get-dataset-items?token=${apifyToken}`,\r\n            {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(config.input)\r\n            },\r\n            2, 3000, 60000\r\n          );\r\n\r\n          logger('info', `Deep scraper (${config.name}) response received`, { \r\n            responseLength: deepResponse?.length,\r\n            hasData: !!deepResponse?.[0]\r\n          });\r\n\r\n          if (deepResponse && Array.isArray(deepResponse) && deepResponse.length > 0) {\r\n            const profileItems = deepResponse.filter(item => item.username || item.ownerUsername);\r\n            const postItems = deepResponse.filter(item => item.shortCode && item.likesCount !== undefined);\r\n            \r\n            logger('info', 'Deep scraper data analysis', {\r\n              totalItems: deepResponse.length,\r\n              profileItems: profileItems.length,\r\n              postItems: postItems.length,\r\n              config: config.name\r\n            });\r\n\r\n            if (profileItems.length === 0) {\r\n              logger('warn', `No profile data found in ${config.name} response`);\r\n              continue;\r\n            }\r\n\r\n            const profileData = validateProfileData(deepResponse, 'deep');\r\n            profileData.scraperUsed = config.name;\r\n            profileData.dataQuality = postItems.length >= 3 ? 'high' : postItems.length >= 1 ? 'medium' : 'low';\r\n            \r\n            logger('info', 'Deep scraping successful', {\r\n              username: profileData.username,\r\n              postsFound: profileData.latestPosts?.length || 0,\r\n              hasRealEngagement: !!profileData.engagement,\r\n              avgLikes: profileData.engagement?.avgLikes || 'N/A',\r\n              avgComments: profileData.engagement?.avgComments || 'N/A',\r\n              engagementRate: profileData.engagement?.engagementRate || 'N/A',\r\n              dataQuality: profileData.dataQuality\r\n            });\r\n\r\n            return profileData;\r\n          } else {\r\n            throw new Error(`${config.name} returned no usable data`);\r\n          }\r\n\r\n        } catch (configError: any) {\r\n          logger('warn', `Deep scraper config ${config.name} failed`, { error: configError.message });\r\n          lastError = configError;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Fallback to light scraper with NO fake engagement data\r\n      logger('warn', 'All deep scraper configs failed, falling back to light scraper - NO ENGAGEMENT DATA');\r\n      \r\n      const lightInput = {\r\n        usernames: [username],\r\n        resultsType: \"details\",\r\n        resultsLimit: 1\r\n      };\r\n\r\n      const lightResponse = await callWithRetry(\r\n        `https://api.apify.com/v2/acts/dSCLg0C3YEZ83HzYX/run-sync-get-dataset-items?token=${apifyToken}`,\r\n        {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(lightInput)\r\n        },\r\n        3, 2000, 30000\r\n      );\r\n\r\n      if (!lightResponse || !Array.isArray(lightResponse) || lightResponse.length === 0) {\r\n        throw new Error('Profile not found on any scraper');\r\n      }\r\n\r\n      const profile = lightResponse[0];\r\n      \r\n      const fallbackProfile: ProfileData = {\r\n        username: profile.username || username,\r\n        displayName: profile.fullName || profile.displayName || '',\r\n        bio: profile.biography || profile.bio || '',\r\n        followersCount: parseInt(profile.followersCount) || 0,\r\n        followingCount: parseInt(profile.followingCount) || 0,\r\n        postsCount: parseInt(profile.postsCount) || 0,\r\n        isVerified: Boolean(profile.verified || profile.isVerified),\r\n        isPrivate: Boolean(profile.private || profile.isPrivate),\r\n        profilePicUrl: profile.profilePicUrl || profile.profilePicture || '',\r\n        externalUrl: profile.externalUrl || profile.website || '',\r\n        isBusinessAccount: Boolean(profile.isBusinessAccount),\r\n        latestPosts: [],\r\n        engagement: undefined, // NO FAKE DATA - explicitly undefined\r\n        scraperUsed: 'light_fallback',\r\n        dataQuality: 'low'\r\n      };\r\n\r\n      logger('info', 'Fallback scraping completed - NO ENGAGEMENT DATA AVAILABLE', {\r\n        username: fallbackProfile.username,\r\n        followers: fallbackProfile.followersCount,\r\n        dataNote: 'Real engagement data could not be scraped'\r\n      });\r\n\r\n      return fallbackProfile;\r\n\r\n} else if (analysisType === 'xray') {\r\n      logger('info', 'X-Ray analysis: Using deep scraper for comprehensive data');\r\n      // X-ray uses same scraping as deep but different AI analysis\r\n      return scrapeInstagramProfile(username, 'deep', env);\r\n    }\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'All scraping methods failed', { username, error: error.message });\r\n    \r\n    let errorMessage = 'Failed to retrieve profile data';\r\n    if (error.message.includes('not found') || error.message.includes('404')) {\r\n      errorMessage = 'Instagram profile not found';\r\n    } else if (error.message.includes('private') || error.message.includes('403')) {\r\n      errorMessage = 'This Instagram profile is private';\r\n    } else if (error.message.includes('rate limit') || error.message.includes('429')) {\r\n      errorMessage = 'Instagram is temporarily limiting requests. Please try again in a few minutes.';\r\n    } else if (error.message.includes('timeout')) {\r\n      errorMessage = 'Profile scraping timed out. Please try again.';\r\n    }\r\n    \r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n", "import { Context } from 'hono';\r\nimport type { Env, AnalysisRequest, ProfileData, AnalysisResult, AnalysisResponse } from '../types/interfaces.js';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js';\r\nimport { normalizeRequest } from '../utils/validation.js';\r\nimport { ensureBusinessContext } from '../services/business-context-generator.js';\r\nimport { runAnalysis } from '../services/analysis-orchestrator.js';\r\nimport { saveCompleteAnalysis, updateCreditsAndTransaction, fetchUserAndCredits, fetchBusinessProfile } from '../services/database.ts';\r\n\r\nexport async function handleAnalyze(c: Context<{ Bindings: Env }>): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    logger('info', 'Analysis request received', { requestId });\r\n\r\n// Parse and validate request - NOW WITH PIPELINE CONFIG SUPPORT\r\n    const body = await c.req.json() as AnalysisRequest & {\r\n      workflow?: string;           // NEW: 'micro_only', 'auto', 'full'\r\n      model_tier?: string;        // NEW: 'premium', 'balanced', 'economy'\r\n      force_model?: string;       // NEW: Override specific model\r\n    };\r\n    \r\n    const { \r\n      profile_url, \r\n      username, \r\n      analysis_type, \r\n      business_id, \r\n      user_id,\r\n      workflow = 'auto',           // NEW: Default to auto workflow\r\n      model_tier = 'balanced',     // NEW: Default to balanced tier\r\n      force_model                  // NEW: Optional model override\r\n    } = normalizeRequest(body);\r\n\r\n    logger('info', 'Request validated', { \r\n      requestId, \r\n      username, \r\n      analysis_type, \r\n      business_id \r\n    });\r\n\r\n// Validate user and fetch business profile\r\nconst [userResult, business] = await Promise.all([\r\n  fetchUserAndCredits(user_id, c.env),\r\n  fetchBusinessProfile(business_id, user_id, c.env)\r\n]);\r\n    \r\n    if (!userResult.isValid) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        userResult.error, \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n// Business context will be ensured in orchestrator\r\n\r\n    // Check credit requirements\r\n    const creditCost = analysis_type === 'deep' ? 2 : analysis_type === 'xray' ? 3 : 1;\r\n    if (userResult.credits < creditCost) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        `Insufficient credits. Need ${creditCost}, have ${userResult.credits}`, \r\n        requestId\r\n      ), 402);\r\n    }\r\n\r\n    logger('info', 'User validation passed', { \r\n      userId: user_id, \r\n      credits: userResult.credits, \r\n      creditCost \r\n    });\r\n\r\n// SCRAPE PROFILE DATA\r\n    let profileData: ProfileData;\r\n    try {\r\n      logger('info', 'Starting profile scraping', { username });\r\n      const { scrapeInstagramProfile } = await import('../services/instagram-scraper.js');\r\n      profileData = await scrapeInstagramProfile(username, analysis_type, c.env);\r\n      logger('info', 'Profile scraping completed', { \r\n        username: profileData.username,\r\n        followersCount: profileData.followersCount,\r\n        dataQuality: profileData.dataQuality\r\n      });\r\n} catch (scrapeError: any) {\r\n      // Handle profile not found specifically\r\n      if (scrapeError.message === 'PROFILE_NOT_FOUND') {\r\n        logger('info', 'Profile not found', { username });\r\n        return c.json(createStandardResponse(\r\n          false, \r\n          undefined, \r\n          'Instagram profile not found', \r\n          requestId\r\n        ), 404);\r\n      }\r\n      \r\n      logger('error', 'Profile scraping failed', { error: scrapeError.message });\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        `Profile scraping failed: ${scrapeError.message}`, \r\n        requestId\r\n      ), 500);\r\n    }\r\n\r\n    // RUN ORCHESTRATED ANALYSIS\r\n    let orchestrationResult: any;\r\n    try {\r\n      orchestrationResult = await runAnalysis(\r\n        profileData,\r\n        business,\r\n        analysis_type,\r\n        c.env,\r\n        requestId\r\n      );\r\n\r\n      // Handle early exit\r\n      if (orchestrationResult.verdict === 'early_exit') {\r\n        return c.json(createStandardResponse(true, {\r\n          ...orchestrationResult.result,\r\n          performance: orchestrationResult.performance,\r\n          credits_used: 0, // No credits charged for early exit\r\n        }, undefined, requestId));\r\n      }\r\n\r\n      // Handle analysis error\r\n      if (orchestrationResult.verdict === 'error') {\r\n        return c.json(createStandardResponse(\r\n          false, \r\n          undefined, \r\n          `Analysis failed: ${orchestrationResult.result.error}`, \r\n          requestId\r\n        ), 500);\r\n      }\r\n\r\n    } catch (orchestrationError: any) {\r\n      logger('error', 'Analysis orchestration failed', { error: orchestrationError.message });\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        `Analysis orchestration failed: ${orchestrationError.message}`, \r\n        requestId\r\n      ), 500);\r\n    }\r\n\r\n    const analysisResult = orchestrationResult.result;\r\n\r\n    // PREPARE DATA FOR DATABASE (NEW 3-TABLE STRUCTURE)\r\n    const leadData = {\r\n      user_id,\r\n      business_id,\r\n      username: profileData.username,\r\n      full_name: profileData.displayName,\r\n      profile_pic_url: profileData.profilePicUrl,\r\n      bio: profileData.bio,\r\n      external_url: profileData.externalUrl,\r\n      followers_count: profileData.followersCount,\r\n      following_count: profileData.followingCount,\r\n      posts_count: profileData.postsCount,\r\n      is_verified: profileData.isVerified,\r\n      is_private: profileData.isPrivate,\r\n      is_business_account: profileData.isBusinessAccount || false,\r\n      profile_url\r\n    };\r\n\r\n    // Prepare analysis data based on type (only for deep/xray)\r\n    let analysisData = null;\r\n    if (analysis_type === 'deep' || analysis_type === 'xray') {\r\n      analysisData = {\r\n        ...analysisResult,\r\n        // Engagement data from scraping\r\n        avg_likes: profileData.engagement?.avgLikes || 0,\r\n        avg_comments: profileData.engagement?.avgComments || 0,\r\n        engagement_rate: profileData.engagement?.engagementRate || 0,\r\n        \r\n        // Structured data\r\n        latest_posts: profileData.latestPosts ? JSON.stringify(profileData.latestPosts) : null,\r\n        engagement_data: profileData.engagement ? JSON.stringify({\r\n          avg_likes: profileData.engagement.avgLikes,\r\n          avg_comments: profileData.engagement.avgComments,\r\n          engagement_rate: profileData.engagement.engagementRate,\r\n          posts_analyzed: profileData.engagement.postsAnalyzed,\r\n          data_source: 'real_scraped_calculation'\r\n        }) : null,\r\n        \r\n        // Analysis metadata\r\n        analysis_timestamp: new Date().toISOString(),\r\n        ai_model_used: 'gpt-4o',\r\n        scraperUsed: profileData.scraperUsed,\r\n        dataQuality: profileData.dataQuality\r\n      };\r\n    }\r\n\r\n// SAVE TO DATABASE (NEW 3-TABLE STRUCTURE)\r\n    let run_id: string;\r\n    try {\r\n      run_id = await saveCompleteAnalysis(leadData, analysisResult, analysis_type, c.env);\r\n      logger('info', 'Database save successful', { run_id, username: profileData.username });\r\n    } catch (saveError: any) {\r\n      logger('error', 'Database save failed', { error: saveError.message });\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        `Database save failed: ${saveError.message}`,\r\n        requestId\r\n      ), 500);\r\n    }\r\n\r\n// UPDATE USER CREDITS WITH ENHANCED TRACKING\r\n    let finalCreditCost = creditCost; // Initialize with default cost\r\n    try {\r\n      const { calculateCreditCost } = await import('../config/models.js');\r\n      const totalTokens = orchestrationResult.totalCost.tokens_in + orchestrationResult.totalCost.tokens_out;\r\n      const dynamicCreditCost = calculateCreditCost(analysis_type, orchestrationResult.totalCost.actual_cost, totalTokens);\r\n      \r\n      // Use dynamic cost if different from fixed cost\r\n      finalCreditCost = Math.max(creditCost, dynamicCreditCost);\r\n  \r\n  const costDetails = {\r\n    actual_cost: orchestrationResult.totalCost.actual_cost,\r\n    tokens_in: orchestrationResult.totalCost.tokens_in,\r\n    tokens_out: orchestrationResult.totalCost.tokens_out,\r\n    model_used: orchestrationResult.totalCost.blocks_used.join('+'),\r\n    block_type: orchestrationResult.totalCost.blocks_used.join('+'),\r\n    processing_duration_ms: orchestrationResult.performance.total_ms,\r\n    blocks_used: orchestrationResult.totalCost.blocks_used\r\n  };\r\n  \r\n  const newBalance = userResult.credits - finalCreditCost;\r\n  await updateCreditsAndTransaction(\r\n    user_id, \r\n    finalCreditCost, \r\n    newBalance,\r\n    `${analysis_type} analysis (${orchestrationResult.totalCost.blocks_used.join('+')})`,\r\n    'use',\r\n    c.env,\r\n    run_id,\r\n    costDetails\r\n  );\r\n  \r\nlogger('info', 'Credits updated with cost tracking', { \r\n    userId: user_id, \r\n    creditsCharged: finalCreditCost,\r\n    actualCost: costDetails.actual_cost,\r\n    margin: finalCreditCost - costDetails.actual_cost,\r\n    tokensCapped: totalTokens > 2200,\r\n    remaining: newBalance,\r\n    blocks: orchestrationResult.totalCost.blocks_used.join('+'),\r\n    processingMs: orchestrationResult.performance.total_ms\r\n  });\r\n    } catch (creditError: any) {\r\n      logger('error', 'Credit update failed', { error: creditError.message });\r\n      // Analysis completed but credit update failed - still return success\r\n    }\r\n\r\n    // PREPARE RESPONSE DATA\r\n    const responseData: AnalysisResponse = {\r\n      run_id,\r\n      profile: {\r\n        username: profileData.username,\r\n        displayName: profileData.displayName,\r\n        followersCount: profileData.followersCount,\r\n        isVerified: profileData.isVerified,\r\n        profilePicUrl: profileData.profilePicUrl,\r\n        dataQuality: profileData.dataQuality || 'medium',\r\n        scraperUsed: profileData.scraperUsed || 'unknown'\r\n      },\r\n      analysis: {\r\n        overall_score: analysisResult.score,\r\n        niche_fit_score: analysisResult.niche_fit,\r\n        engagement_score: analysisResult.engagement_score,\r\n        type: analysis_type,\r\n        confidence_level: analysisResult.confidence_level,\r\n        summary_text: analysisResult.quick_summary,\r\n        \r\n        // Include detailed data for deep/xray analyses\r\n        ...(analysis_type === 'deep' && {\r\n          audience_quality: analysisResult.audience_quality,\r\n          selling_points: analysisResult.selling_points,\r\n          reasons: analysisResult.reasons,\r\n          deep_summary: analysisResult.deep_summary,\r\n          outreach_message: analysisData?.outreach_message || null,\r\n          engagement_breakdown: profileData.engagement ? {\r\n            avg_likes: profileData.engagement.avgLikes,\r\n            avg_comments: profileData.engagement.avgComments,\r\n            engagement_rate: profileData.engagement.engagementRate,\r\n            posts_analyzed: profileData.engagement.postsAnalyzed,\r\n            data_source: 'real_scraped_calculation'\r\n          } : {\r\n            data_source: 'no_real_data_available',\r\n            avg_likes: 0,\r\n            avg_comments: 0,\r\n            engagement_rate: 0\r\n          }\r\n        }),\r\n        \r\n        ...(analysis_type === 'xray' && {\r\n          copywriter_profile: analysisData?.copywriter_profile || {},\r\n          commercial_intelligence: analysisData?.commercial_intelligence || {},\r\n          persuasion_strategy: analysisData?.persuasion_strategy || {}\r\n        })\r\n      },\r\ncredits: {\r\n        used: finalCreditCost,\r\n        remaining: userResult.credits - finalCreditCost,\r\n        actual_cost: orchestrationResult.totalCost.actual_cost,\r\n        margin: finalCreditCost - orchestrationResult.totalCost.actual_cost\r\n      },\r\nmetadata: {\r\n        request_id: requestId,\r\n        analysis_completed_at: new Date().toISOString(),\r\n        schema_version: '3.0',\r\n        orchestration: {\r\n          blocks_used: orchestrationResult.totalCost.blocks_used,\r\n          performance_ms: orchestrationResult.performance,\r\n          total_cost: orchestrationResult.totalCost.actual_cost\r\n        }\r\n      }\r\n    };\r\n\r\n    logger('info', 'Analysis completed successfully', { \r\n      run_id, \r\n      username: profileData.username, \r\n      overall_score: analysisResult.score,\r\n      confidence: analysisResult.confidence_level,\r\n      dataQuality: profileData.dataQuality\r\n    });\r\n\r\n    return c.json(createStandardResponse(true, responseData, undefined, requestId));\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'Analysis request failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(\r\n      false, \r\n      undefined, \r\n      error.message, \r\n      requestId\r\n    ), 500);\r\n  }\r\n}\r\n", "import { Context } from 'hono';\r\nimport type { Env, BulkAnalysisRequest, BulkAnalysisResult, AnalysisResponse, ProfileData, AnalysisResult } from '../types/interfaces.js';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js';\r\nimport { extractUsername } from '../utils/validation.js';\r\nimport { saveCompleteAnalysis, updateCreditsAndTransaction, fetchUserAndCredits, fetchBusinessProfile } from '../services/database.ts';\r\n\r\nexport async function handleBulkAnalyze(c: Context<{ Bindings: Env }>): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    logger('info', 'Bulk analysis request received', { requestId });\r\n\r\n    // Parse and validate request\r\n    const body = await c.req.json() as BulkAnalysisRequest;\r\n    const { profiles, analysis_type, business_id, user_id } = body;\r\n\r\n    // Validate required fields\r\n    if (!profiles || !Array.isArray(profiles) || profiles.length === 0) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        'profiles array is required and cannot be empty', \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n    if (!analysis_type || !['light', 'deep', 'xray'].includes(analysis_type)) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        'analysis_type must be \"light\", \"deep\", or \"xray\"', \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n    if (!business_id || !user_id) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        'business_id and user_id are required', \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n    const profileCount = profiles.length;\r\n    if (profileCount > 50) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        'Maximum 50 profiles per bulk request', \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n    logger('info', 'Bulk request validated', { \r\n      requestId, \r\n      profileCount, \r\n      analysis_type, \r\n      business_id \r\n    });\r\n\r\nconst [userResult, business] = await Promise.all([\r\n  fetchUserAndCredits(user_id, c.env),\r\n  fetchBusinessProfile(business_id, user_id, c.env)\r\n]);\r\n    if (!userResult.isValid) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        userResult.error, \r\n        requestId\r\n      ), 400);\r\n    }\r\n\r\n    // Calculate total credit cost\r\n    const creditCostPerAnalysis = analysis_type === 'deep' ? 2 : analysis_type === 'xray' ? 3 : 1;\r\n    const totalCreditCost = profileCount * creditCostPerAnalysis;\r\n    \r\n    if (userResult.credits < totalCreditCost) {\r\n      return c.json(createStandardResponse(\r\n        false, \r\n        undefined, \r\n        `Insufficient credits. Need ${totalCreditCost}, have ${userResult.credits}`, \r\n        requestId\r\n      ), 402);\r\n    }\r\n\r\n    logger('info', 'User validation passed for bulk analysis', { \r\n      userId: user_id, \r\n      credits: userResult.credits, \r\n      totalCreditCost,\r\n      profileCount\r\n    });\r\n\r\n    // Process profiles in parallel with concurrency limit\r\n    const results: AnalysisResponse[] = [];\r\n    const errors: Array<{ profile: string; error: string }> = [];\r\n    let creditsUsed = 0;\r\n\r\n    // Import required services\r\n    const { scrapeInstagramProfile } = await import('../services/instagram-scraper.js');\r\n    const { performAIAnalysis } = await import('../services/ai-analysis.js');\r\n\r\n    // Process profiles with controlled concurrency (5 at a time)\r\n    const BATCH_SIZE = 5;\r\n    for (let i = 0; i < profiles.length; i += BATCH_SIZE) {\r\n      const batch = profiles.slice(i, i + BATCH_SIZE);\r\n      \r\n      const batchPromises = batch.map(async (profile) => {\r\n        const profileId = `${i + batch.indexOf(profile) + 1}`;\r\n        \r\n        try {\r\n          logger('info', `Processing profile ${profileId}/${profileCount}`, { profile });\r\n\r\n          // Extract username and build URL\r\n          const username = extractUsername(profile);\r\n          if (!username) {\r\n            throw new Error('Invalid username or URL format');\r\n          }\r\n\r\n          const profile_url = profile.includes('instagram.com') ? profile : `https://instagram.com/${username}`;\r\n\r\n          // SCRAPE PROFILE DATA\r\n          let profileData: ProfileData;\r\n          try {\r\n            profileData = await scrapeInstagramProfile(profile_url, c.env);\r\n            logger('info', `Profile scraped successfully`, { \r\n              username: profileData.username,\r\n              followersCount: profileData.followersCount\r\n            });\r\n          } catch (scrapeError: any) {\r\n            throw new Error(`Scraping failed: ${scrapeError.message}`);\r\n          }\r\n\r\n          // AI ANALYSIS\r\n          let analysisResult: AnalysisResult;\r\n          try {\r\n            analysisResult = await performAIAnalysis(profileData, analysis_type, user_id, c.env);\r\n            logger('info', `AI analysis completed`, { \r\n              username: profileData.username,\r\n              score: analysisResult.score\r\n            });\r\n          } catch (analysisError: any) {\r\n            throw new Error(`AI analysis failed: ${analysisError.message}`);\r\n          }\r\n\r\n          // PREPARE DATA FOR NEW SCHEMA\r\n          const leadData = {\r\n            user_id,\r\n            business_id,\r\n            username: profileData.username,\r\n            full_name: profileData.displayName,\r\n            profile_pic_url: profileData.profilePicUrl,\r\n            bio: profileData.bio,\r\n            external_url: profileData.externalUrl,\r\n            followers_count: profileData.followersCount,\r\n            following_count: profileData.followingCount,\r\n            posts_count: profileData.postsCount,\r\n            is_verified: profileData.isVerified,\r\n            is_private: profileData.isPrivate,\r\n            is_business_account: profileData.isBusinessAccount || false,\r\n            profile_url\r\n          };\r\n\r\n          // Prepare analysis data based on type\r\n          let analysisData = null;\r\n          if (analysis_type === 'deep' || analysis_type === 'xray') {\r\n            analysisData = {\r\n              ...analysisResult,\r\n              // Engagement data from scraping\r\n              avg_likes: profileData.engagement?.avgLikes || 0,\r\n              avg_comments: profileData.engagement?.avgComments || 0,\r\n              engagement_rate: profileData.engagement?.engagementRate || 0,\r\n              \r\n              // Structured data\r\n              latest_posts: profileData.latestPosts ? JSON.stringify(profileData.latestPosts) : null,\r\n              engagement_data: profileData.engagement ? JSON.stringify({\r\n                avg_likes: profileData.engagement.avgLikes,\r\n                avg_comments: profileData.engagement.avgComments,\r\n                engagement_rate: profileData.engagement.engagementRate,\r\n                posts_analyzed: profileData.engagement.postsAnalyzed,\r\n                data_source: 'real_scraped_calculation'\r\n              }) : null,\r\n              \r\n              // Analysis metadata\r\n              analysis_timestamp: new Date().toISOString(),\r\n              ai_model_used: 'gpt-4o',\r\n              scraperUsed: profileData.scraperUsed,\r\n              dataQuality: profileData.dataQuality\r\n            };\r\n          }\r\n\r\n          // SAVE TO DATABASE (NEW 3-TABLE STRUCTURE)\r\n          let run_id: string;\r\n          try {\r\n            run_id = await saveCompleteAnalysis(leadData, analysisData, analysis_type, c.env);\r\n            logger('info', `Database save successful for ${profileData.username}`, { run_id });\r\n          } catch (saveError: any) {\r\n            throw new Error(`Database save failed: ${saveError.message}`);\r\n          }\r\n\r\n          // Increment credits used\r\n          creditsUsed += creditCostPerAnalysis;\r\n\r\n          // PREPARE RESPONSE DATA\r\n          const responseData: AnalysisResponse = {\r\n            run_id,\r\n            profile: {\r\n              username: profileData.username,\r\n              displayName: profileData.displayName,\r\n              followersCount: profileData.followersCount,\r\n              isVerified: profileData.isVerified,\r\n              profilePicUrl: profileData.profilePicUrl,\r\n              dataQuality: profileData.dataQuality || 'medium',\r\n              scraperUsed: profileData.scraperUsed || 'unknown'\r\n            },\r\n            analysis: {\r\n              overall_score: analysisResult.score,\r\n              niche_fit_score: analysisResult.niche_fit,\r\n              engagement_score: analysisResult.engagement_score,\r\n              type: analysis_type,\r\n              confidence_level: analysisResult.confidence_level,\r\n              summary_text: analysisResult.quick_summary,\r\n              \r\n              // Include detailed data for deep/xray analyses\r\n              ...(analysis_type === 'deep' && {\r\n                audience_quality: analysisResult.audience_quality,\r\n                selling_points: analysisResult.selling_points,\r\n                reasons: analysisResult.reasons,\r\n                deep_summary: analysisResult.deep_summary,\r\n                outreach_message: analysisData?.outreach_message || null,\r\n                engagement_breakdown: profileData.engagement ? {\r\n                  avg_likes: profileData.engagement.avgLikes,\r\n                  avg_comments: profileData.engagement.avgComments,\r\n                  engagement_rate: profileData.engagement.engagementRate,\r\n                  posts_analyzed: profileData.engagement.postsAnalyzed,\r\n                  data_source: 'real_scraped_calculation'\r\n                } : {\r\n                  data_source: 'no_real_data_available',\r\n                  avg_likes: 0,\r\n                  avg_comments: 0,\r\n                  engagement_rate: 0\r\n                }\r\n              }),\r\n              \r\n              ...(analysis_type === 'xray' && {\r\n                copywriter_profile: analysisData?.copywriter_profile || {},\r\n                commercial_intelligence: analysisData?.commercial_intelligence || {},\r\n                persuasion_strategy: analysisData?.persuasion_strategy || {}\r\n              })\r\n            },\r\n            credits: {\r\n              used: creditCostPerAnalysis,\r\n              remaining: userResult.credits - creditsUsed\r\n            },\r\n            metadata: {\r\n              request_id: requestId,\r\n              analysis_completed_at: new Date().toISOString(),\r\n              schema_version: '3.0'\r\n            }\r\n          };\r\n\r\n          return responseData;\r\n\r\n        } catch (error: any) {\r\n          logger('error', `Profile ${profileId} analysis failed`, { \r\n            profile, \r\n            error: error.message \r\n          });\r\n          \r\n          errors.push({\r\n            profile,\r\n            error: error.message\r\n          });\r\n          \r\n          return null;\r\n        }\r\n      });\r\n\r\n      // Wait for batch to complete\r\n      const batchResults = await Promise.all(batchPromises);\r\n      \r\n      // Add successful results\r\n      batchResults.forEach(result => {\r\n        if (result) {\r\n          results.push(result);\r\n        }\r\n      });\r\n\r\n      // Log batch progress\r\n      logger('info', `Batch ${Math.floor(i / BATCH_SIZE) + 1} completed`, {\r\n        processed: Math.min(i + BATCH_SIZE, profiles.length),\r\n        total: profiles.length,\r\n        successful: results.length,\r\n        errors: errors.length\r\n      });\r\n    }\r\n\r\n    // UPDATE CREDITS FOR ALL SUCCESSFUL ANALYSES\r\n    if (creditsUsed > 0) {\r\n      try {\r\n        const newBalance = userResult.credits - creditsUsed;\r\n        await updateCreditsAndTransaction(\r\n          user_id,\r\n          creditsUsed,\r\n          newBalance,\r\n          `Bulk ${analysis_type} analysis - ${results.length} profiles`,\r\n          'use',\r\n          c.env\r\n        );\r\n        logger('info', 'Bulk credits updated successfully', { \r\n          creditsUsed, \r\n          remainingCredits: newBalance \r\n        });\r\n      } catch (creditError: any) {\r\n        logger('error', 'Bulk credit update failed', { error: creditError.message });\r\n        // Don't fail the entire request for credit logging issues\r\n      }\r\n    }\r\n\r\n    // PREPARE FINAL RESPONSE\r\n    const bulkResult: BulkAnalysisResult = {\r\n      total_requested: profileCount,\r\n      successful: results.length,\r\n      failed: errors.length,\r\n      results,\r\n      errors,\r\n      credits_used: creditsUsed,\r\n      credits_remaining: userResult.credits - creditsUsed\r\n    };\r\n\r\n    logger('info', 'Bulk analysis completed', { \r\n      requestId,\r\n      totalRequested: profileCount,\r\n      successful: results.length,\r\n      failed: errors.length,\r\n      creditsUsed\r\n    });\r\n\r\n    return c.json(createStandardResponse(true, bulkResult, undefined, requestId));\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'Bulk analysis request failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(\r\n      false, \r\n      undefined, \r\n      error.message, \r\n      requestId\r\n    ), 500);\r\n  }\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js';\r\n\r\nexport async function handleLegacyAnalyze(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  logger('info', 'Legacy analyze endpoint called, redirecting to v1', { requestId });\r\n  \r\n  try {\r\n    const body = await c.req.json();\r\n    \r\n    const normalizedBody = {\r\n      ...body,\r\n      analysis_type: body.analysis_type || body.type || 'light'\r\n    };\r\n    \r\n    const v1Request = new Request(c.req.url.replace('/analyze', '/v1/analyze'), {\r\n      method: 'POST',\r\n      headers: c.req.header(),\r\n      body: JSON.stringify(normalizedBody)\r\n    });\r\n    \r\n    const response = await fetch(v1Request.url, {\r\n  method: v1Request.method,\r\n  headers: Object.fromEntries(v1Request.headers.entries()),\r\n  body: v1Request.body\r\n});\r\nreturn response;\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Legacy endpoint forwarding failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleLegacyBulkAnalyze(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  logger('info', 'Legacy bulk-analyze endpoint called, redirecting to v1', { requestId });\r\n  \r\n  try {\r\n    const body = await c.req.json();\r\n    \r\n    const v1Request = new Request(c.req.url.replace('/bulk-analyze', '/v1/bulk-analyze'), {\r\n      method: 'POST',\r\n      headers: c.req.header(),\r\n      body: JSON.stringify(body)\r\n    });\r\n    \r\n    const response = await fetch(v1Request.url, {\r\n  method: v1Request.method,\r\n  headers: Object.fromEntries(v1Request.headers.entries()),\r\n  body: v1Request.body\r\n});\r\nreturn response;\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Legacy bulk endpoint forwarding failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js';\r\nimport { fetchJson } from '../utils/helpers.js';\r\nimport { getApiKey } from '../services/enhanced-config-manager.js';\r\n\r\nexport async function handleStripeWebhook(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    const signature = c.req.header('stripe-signature');\r\n    if (!signature) {\r\n      return c.json(createStandardResponse(false, undefined, 'Missing stripe signature', requestId), 400);\r\n    }\r\n\r\n    const body = await c.req.text();\r\n    const event = JSON.parse(body);\r\n    logger('info', 'Stripe webhook received', { eventType: event.type, requestId });\r\n\r\n    const headers = {\r\n      apikey: c.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${c.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    switch (event.type) {\r\n      case 'checkout.session.completed':\r\n        await fetch(`${c.env.SUPABASE_URL}/rest/v1/users`, {\r\n          method: 'PATCH',\r\n          headers,\r\n          body: JSON.stringify({\r\n            stripe_customer_id: event.data.object.customer,\r\n            subscription_status: 'active',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n        });\r\n        break;\r\n        \r\n      case 'customer.subscription.deleted':\r\n        await fetch(`${c.env.SUPABASE_URL}/rest/v1/users`, {\r\n          method: 'PATCH',\r\n          headers,\r\n          body: JSON.stringify({\r\n            subscription_status: 'cancelled',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n        });\r\n        break;\r\n        \r\n      default:\r\n        logger('info', 'Unhandled webhook event', { eventType: event.type, requestId });\r\n    }\r\n    \r\n    return c.json(createStandardResponse(true, { received: true }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Webhook processing failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 400);\r\n  }\r\n}\r\n\r\nexport async function handleCreateCheckoutSession(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    const body = await c.req.json();\r\n    const { priceId, user_id, successUrl, cancelUrl } = body;\r\n    \r\n    if (!priceId || !user_id) {\r\n      return c.json(createStandardResponse(false, undefined, 'priceId and user_id are required', requestId), 400);\r\n    }\r\n\r\n    // Get Stripe secret key from centralized config\r\n    const stripeSecretKey = await getApiKey('STRIPE_SECRET_KEY', c.env);\r\n\r\n    const stripeResponse = await fetch('https://api.stripe.com/v1/checkout/sessions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${stripeSecretKey}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      body: new URLSearchParams({\r\n        'payment_method_types[]': 'card',\r\n        'line_items[0][price]': priceId,\r\n        'line_items[0][quantity]': '1',\r\n        'mode': 'subscription',\r\n        'client_reference_id': user_id,\r\n        'success_url': successUrl || `${c.env.FRONTEND_URL}/dashboard?session_id={CHECKOUT_SESSION_ID}`,\r\n        'cancel_url': cancelUrl || `${c.env.FRONTEND_URL}/pricing`\r\n      })\r\n    });\r\n\r\n    if (!stripeResponse.ok) {\r\n      throw new Error('Failed to create Stripe checkout session');\r\n    }\r\n\r\n    const session = await stripeResponse.json();\r\n    \r\n    return c.json(createStandardResponse(true, { \r\n      sessionId: session.id, \r\n      url: session.url \r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Checkout session creation failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleCreatePortalSession(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    const body = await c.req.json();\r\n    const { customerId, returnUrl } = body;\r\n    \r\n    if (!customerId) {\r\n      return c.json(createStandardResponse(false, undefined, 'customerId is required', requestId), 400);\r\n    }\r\n\r\n    // Get Stripe secret key from centralized config\r\n    const stripeSecretKey = await getApiKey('STRIPE_SECRET_KEY', c.env);\r\n\r\n    const stripeResponse = await fetch('https://api.stripe.com/v1/billing_portal/sessions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${stripeSecretKey}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      body: new URLSearchParams({\r\n        'customer': customerId,\r\n        'return_url': returnUrl || `${c.env.FRONTEND_URL}/dashboard`\r\n      })\r\n    });\r\n\r\n    if (!stripeResponse.ok) {\r\n      throw new Error('Failed to create Stripe portal session');\r\n    }\r\n\r\n    const session = await stripeResponse.json();\r\n    \r\n    return c.json(createStandardResponse(true, { url: session.url }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Portal session creation failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n", "import type { Env } from '../types/interfaces.js';\r\nimport { fetchJson } from '../utils/helpers.js';\r\nimport { logger } from '../utils/logger.js';\r\n\r\n// ===============================================================================\r\n// ANALYTICS DASHBOARD SUMMARY\r\n// ===============================================================================\r\n\r\nexport async function getAnalyticsSummary(env: Env): Promise<any> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    // Updated queries for new 3-table structure\r\n    const [leadsWithRuns, payloadsData, usersResponse] = await Promise.all([\r\n      // Get leads with their latest runs\r\n      fetchJson<any[]>(\r\n        `${env.SUPABASE_URL}/rest/v1/leads?select=lead_id,username,follower_count,first_discovered_at,runs(run_id,analysis_type,overall_score,niche_fit_score,engagement_score,created_at)&order=runs.created_at.desc`,\r\n        { headers }\r\n      ),\r\n      // Get payload data for engagement analysis\r\n      fetchJson<any[]>(\r\n        `${env.SUPABASE_URL}/rest/v1/payloads?select=analysis_data,created_at,analysis_type`,\r\n        { headers }\r\n      ),\r\n      // Get user data\r\n      fetchJson<any[]>(\r\n        `${env.SUPABASE_URL}/rest/v1/users?select=id,created_at,subscription_status,credits`,\r\n        { headers }\r\n      )\r\n    ]);\r\n\r\n    // Flatten runs data for analysis\r\n    const allRuns = leadsWithRuns.flatMap(lead => \r\n      lead.runs?.map(run => ({\r\n        ...run,\r\n        lead_id: lead.lead_id,\r\n        username: lead.username,\r\n        follower_count: lead.follower_count\r\n      })) || []\r\n    );\r\n\r\n    // Calculate time-based metrics\r\n    const now = new Date();\r\n    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\r\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\r\n    \r\n    // Core metrics based on runs (not leads)\r\n    const totalAnalyses = allRuns.length;\r\n    const recentAnalyses = allRuns.filter(run => run.created_at > sevenDaysAgo).length;\r\n    const monthlyAnalyses = allRuns.filter(run => run.created_at > thirtyDaysAgo).length;\r\n    const uniqueLeads = new Set(allRuns.map(run => run.lead_id)).size;\r\n    \r\n    // Score analysis from runs table\r\n    const avgOverallScore = totalAnalyses > 0 ? \r\n      Math.round(allRuns.reduce((sum, run) => sum + (run.overall_score || 0), 0) / totalAnalyses) : 0;\r\n    \r\n    const avgNicheFitScore = totalAnalyses > 0 ? \r\n      Math.round(allRuns.reduce((sum, run) => sum + (run.niche_fit_score || 0), 0) / totalAnalyses) : 0;\r\n    \r\n    const avgEngagementScore = totalAnalyses > 0 ? \r\n      Math.round(allRuns.reduce((sum, run) => sum + (run.engagement_score || 0), 0) / totalAnalyses) : 0;\r\n    \r\n    const highScoreAnalyses = allRuns.filter(run => (run.overall_score || 0) > 75).length;\r\n    const conversionRate = totalAnalyses > 0 ? Math.round((highScoreAnalyses / totalAnalyses) * 100) : 0;\r\n    \r\n    // Engagement analysis from payloads\r\n    const deepPayloads = payloadsData.filter(p => p.analysis_type === 'deep');\r\n    let avgEngagementRate = 0;\r\n    if (deepPayloads.length > 0) {\r\n      const engagementRates = deepPayloads\r\n        .map(p => p.analysis_data?.engagement_breakdown?.engagement_rate || 0)\r\n        .filter(rate => rate > 0);\r\n      avgEngagementRate = engagementRates.length > 0 ? \r\n        Math.round(engagementRates.reduce((sum, rate) => sum + rate, 0) / engagementRates.length * 100) / 100 : 0;\r\n    }\r\n    \r\n    // User metrics\r\n    const activeUsers = usersResponse.filter(user => user.subscription_status === 'active').length;\r\n    const totalCreditsAvailable = usersResponse.reduce((sum, user) => sum + (user.credits || 0), 0);\r\n    \r\n    // Analysis type breakdown\r\n    const lightAnalyses = allRuns.filter(run => run.analysis_type === 'light').length;\r\n    const deepAnalyses = allRuns.filter(run => run.analysis_type === 'deep').length;\r\n    const xrayAnalyses = allRuns.filter(run => run.analysis_type === 'xray').length;\r\n    \r\n    // Growth calculation\r\n    const previousWeekRuns = allRuns.filter(run => {\r\n      const runDate = new Date(run.created_at);\r\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\r\n      return runDate > twoWeeksAgo && runDate <= new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n    }).length;\r\n    \r\n    const growthRate = previousWeekRuns > 0 ? \r\n      Math.round(((recentAnalyses - previousWeekRuns) / previousWeekRuns) * 100) : \r\n      (recentAnalyses > 0 ? 100 : 0);\r\n\r\n    return {\r\n      success: true,\r\n      summary: {\r\n        totalAnalyses,\r\n        uniqueLeads,\r\n        averageOverallScore: avgOverallScore,\r\n        averageNicheFitScore: avgNicheFitScore,\r\n        averageEngagementScore: avgEngagementScore,\r\n        conversionRate: `${conversionRate}%`,\r\n        avgEngagementRate: `${avgEngagementRate}%`,\r\n        recentActivity: recentAnalyses,\r\n        monthlyActivity: monthlyAnalyses,\r\n        activeUsers,\r\n        totalCreditsAvailable,\r\n        analysisBreakdown: {\r\n          light: lightAnalyses,\r\n          deep: deepAnalyses,\r\n          xray: xrayAnalyses\r\n        }\r\n      },\r\n      trends: {\r\n        analysesGrowth: `${growthRate >= 0 ? '+' : ''}${growthRate}%`,\r\n        scoreImprovement: avgOverallScore > 60 ? \"above_average\" : \"needs_improvement\",\r\n        engagementTrend: avgEngagementRate > 3 ? \"healthy\" : \"low_engagement\",\r\n        userGrowth: activeUsers > 0 ? \"active\" : \"no_subscribers\"\r\n      },\r\n      insights: {\r\n        topPerformingScore: Math.max(...allRuns.map(run => run.overall_score || 0)),\r\n        mostActiveWeek: recentAnalyses > previousWeekRuns ? \"current\" : \"previous\",\r\n        recommendedFocus: conversionRate < 20 ? \"improve_lead_quality\" : \"scale_operations\",\r\n        engagementBenchmark: avgEngagementRate > 3 ? \"exceeds_benchmark\" : \"below_benchmark\"\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getAnalyticsSummary failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      summary: {\r\n        totalAnalyses: 0,\r\n        uniqueLeads: 0,\r\n        averageOverallScore: 0,\r\n        conversionRate: \"0%\",\r\n        avgEngagementRate: \"0%\",\r\n        recentActivity: 0,\r\n        monthlyActivity: 0,\r\n        activeUsers: 0,\r\n        totalCreditsAvailable: 0,\r\n        analysisBreakdown: { light: 0, deep: 0, xray: 0 }\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// ENHANCED ANALYTICS WITH AI INSIGHTS\r\n// ===============================================================================\r\n\r\nexport async function getEnhancedAnalytics(\r\n  user_id: string,\r\n  business_id: string,\r\n  env: Env\r\n): Promise<any> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    // Get user-specific data with new structure\r\n    const [userLeadsRuns, userPayloads] = await Promise.all([\r\n      // User's leads with runs\r\n      fetchJson<any[]>(\r\n        `${env.SUPABASE_URL}/rest/v1/leads?select=lead_id,username,display_name,follower_count,first_discovered_at,runs(run_id,analysis_type,overall_score,niche_fit_score,engagement_score,created_at)&user_id=eq.${user_id}&business_id=eq.${business_id}&order=runs.created_at.desc`,\r\n        { headers }\r\n      ),\r\n      // User's analysis payloads\r\n      fetchJson<any[]>(\r\n        `${env.SUPABASE_URL}/rest/v1/payloads?select=analysis_data,analysis_type,created_at&user_id=eq.${user_id}&business_id=eq.${business_id}`,\r\n        { headers }\r\n      )\r\n    ]);\r\n\r\n    // Flatten runs data\r\n    const allRuns = userLeadsRuns.flatMap(lead => \r\n      lead.runs?.map(run => ({\r\n        ...run,\r\n        lead_id: lead.lead_id,\r\n        username: lead.username,\r\n        follower_count: lead.follower_count\r\n      })) || []\r\n    );\r\n\r\n    const totalAnalyses = allRuns.length;\r\n    const totalLeads = userLeadsRuns.length;\r\n\r\n    if (totalAnalyses === 0) {\r\n      return {\r\n        success: true,\r\n        insights: [\"No analyses completed yet\"],\r\n        recommendations: [\"Complete your first analysis to see insights\"],\r\n        performance: { overall_score: 0, niche_fit: 0, engagement: 0 }\r\n      };\r\n    }\r\n\r\n    // Calculate performance metrics\r\n    const avgOverallScore = Math.round(allRuns.reduce((sum, run) => sum + (run.overall_score || 0), 0) / totalAnalyses);\r\n    const avgNicheFitScore = Math.round(allRuns.reduce((sum, run) => sum + (run.niche_fit_score || 0), 0) / totalAnalyses);\r\n    const avgEngagementScore = Math.round(allRuns.reduce((sum, run) => sum + (run.engagement_score || 0), 0) / totalAnalyses);\r\n\r\n    // Recent performance (last 7 days)\r\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();\r\n    const recentRuns = allRuns.filter(run => run.created_at > sevenDaysAgo);\r\n    const recentAvgScore = recentRuns.length > 0 ?\r\n      Math.round(recentRuns.reduce((sum, run) => sum + (run.overall_score || 0), 0) / recentRuns.length) : avgOverallScore;\r\n\r\n    // Engagement analysis from payloads\r\n    const deepPayloads = userPayloads.filter(p => p.analysis_type === 'deep');\r\n    let avgEngagementRate = 0;\r\n    if (deepPayloads.length > 0) {\r\n      const engagementRates = deepPayloads\r\n        .map(p => p.analysis_data?.engagement_breakdown?.engagement_rate || 0)\r\n        .filter(rate => rate > 0);\r\n      avgEngagementRate = engagementRates.length > 0 ? \r\n        Math.round(engagementRates.reduce((sum, rate) => sum + rate, 0) / engagementRates.length * 100) / 100 : 0;\r\n    }\r\n\r\n    // Performance segmentation\r\n    const highScoreProfiles = allRuns.filter(run => (run.overall_score || 0) > 75).length;\r\n    const mediumScoreProfiles = allRuns.filter(run => (run.overall_score || 0) >= 50 && (run.overall_score || 0) <= 75).length;\r\n    const lowScoreProfiles = allRuns.filter(run => (run.overall_score || 0) < 50).length;\r\n\r\n    // Follower analysis\r\n    const avgFollowers = totalLeads > 0 ?\r\n      Math.round(userLeadsRuns.reduce((sum, lead) => sum + (lead.follower_count || 0), 0) / totalLeads) : 0;\r\n    const microInfluencers = userLeadsRuns.filter(lead => (lead.follower_count || 0) >= 1000 && (lead.follower_count || 0) <= 100000).length;\r\n    const macroInfluencers = userLeadsRuns.filter(lead => (lead.follower_count || 0) > 100000).length;\r\n\r\n    // Analysis type breakdown\r\n    const lightAnalyses = allRuns.filter(run => run.analysis_type === 'light').length;\r\n    const deepAnalyses = allRuns.filter(run => run.analysis_type === 'deep').length;\r\n    const xrayAnalyses = allRuns.filter(run => run.analysis_type === 'xray').length;\r\n\r\n    // Success rate calculation\r\n    const successRate = totalAnalyses > 0 ? Math.round((highScoreProfiles / totalAnalyses) * 100) : 0;\r\n\r\n// Trend analysis\r\n    const isImproving = recentAvgScore > avgOverallScore;\r\n    const trendDirection = isImproving ? \"positive\" : (recentAvgScore === avgOverallScore ? \"stable\" : \"negative\");\r\n\r\n    // Generate insights based on real data\r\n    const insights = [];\r\n    const recommendations = [];\r\n\r\n    // Score-based insights\r\n    if (avgOverallScore > 75) {\r\n      insights.push(`Excellent lead quality with ${avgOverallScore}/100 average score`);\r\n    } else if (avgOverallScore > 50) {\r\n      insights.push(`Moderate lead quality with ${avgOverallScore}/100 average score - room for improvement`);\r\n      recommendations.push(\"Focus on higher-quality prospects to improve overall scores\");\r\n    } else {\r\n      insights.push(`Low lead quality detected with ${avgOverallScore}/100 average score`);\r\n      recommendations.push(\"Review your targeting criteria and source higher-quality leads\");\r\n    }\r\n\r\n    // Engagement insights\r\n    if (avgEngagementRate > 3) {\r\n      insights.push(`Strong engagement rates averaging ${avgEngagementRate}%`);\r\n    } else if (avgEngagementRate > 0) {\r\n      insights.push(`Below-average engagement at ${avgEngagementRate}% - Instagram benchmark is 3-6%`);\r\n      recommendations.push(\"Target accounts with higher engagement rates for better results\");\r\n    }\r\n\r\n    // Follower insights\r\n    if (microInfluencers > 0) {\r\n      insights.push(`${microInfluencers} micro-influencers identified (1K-100K followers) - highest conversion potential`);\r\n    }\r\n    if (avgFollowers > 50000) {\r\n      insights.push(`High-follower targets averaging ${avgFollowers.toLocaleString()} followers`);\r\n    }\r\n\r\n    // Analysis depth insights\r\n    const deepAnalysisRatio = Math.round((deepAnalyses / totalAnalyses) * 100);\r\n    if (deepAnalysisRatio < 30) {\r\n      recommendations.push(\"Consider more deep analyses for better outreach personalization\");\r\n    }\r\n\r\n    // Trend insights\r\n    if (trendDirection === \"positive\") {\r\n      insights.push(`Performance improving - recent scores up ${recentAvgScore - avgOverallScore} points`);\r\n    } else if (trendDirection === \"negative\") {\r\n      insights.push(`Performance declining - recent scores down ${avgOverallScore - recentAvgScore} points`);\r\n      recommendations.push(\"Review recent lead sources and adjust targeting strategy\");\r\n    }\r\n\r\n    // Success rate insights\r\n    if (successRate > 50) {\r\n      insights.push(`High success rate: ${successRate}% of leads score above 75`);\r\n    } else if (successRate > 25) {\r\n      insights.push(`Moderate success rate: ${successRate}% of leads score above 75`);\r\n      recommendations.push(\"Refine targeting to increase high-scoring leads\");\r\n    } else {\r\n      insights.push(`Low success rate: only ${successRate}% of leads score above 75`);\r\n      recommendations.push(\"Significantly improve lead sourcing and qualification criteria\");\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      performance: {\r\n        overall_score: avgOverallScore,\r\n        niche_fit: avgNicheFitScore,\r\n        engagement: avgEngagementScore,\r\n        engagement_rate: avgEngagementRate,\r\n        success_rate: successRate,\r\n        trend_direction: trendDirection\r\n      },\r\n      segmentation: {\r\n        high_performers: highScoreProfiles,\r\n        medium_performers: mediumScoreProfiles,\r\n        low_performers: lowScoreProfiles,\r\n        micro_influencers: microInfluencers,\r\n        macro_influencers: macroInfluencers\r\n      },\r\n      analysis_breakdown: {\r\n        total_analyses: totalAnalyses,\r\n        light: lightAnalyses,\r\n        deep: deepAnalyses,\r\n        xray: xrayAnalyses,\r\n        deep_analysis_ratio: deepAnalysisRatio\r\n      },\r\n      insights,\r\n      recommendations,\r\n      metrics: {\r\n        avg_followers: avgFollowers,\r\n        recent_performance: recentAvgScore,\r\n        total_leads: totalLeads,\r\n        analyses_this_week: recentRuns.length\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getEnhancedAnalytics failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      performance: { overall_score: 0, niche_fit: 0, engagement: 0 },\r\n      insights: [\"Unable to generate insights due to data error\"],\r\n      recommendations: [\"Please try again or contact support\"]\r\n    };\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// LEADERBOARD FUNCTIONS\r\n// ===============================================================================\r\n\r\nexport async function getTopPerformers(\r\n  user_id?: string,\r\n  business_id?: string,\r\n  env?: Env,\r\n  limit: number = 10\r\n): Promise<any> {\r\n  const headers = {\r\n    apikey: env!.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env!.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    // Build query for top performers using new structure\r\n    let query = `${env!.SUPABASE_URL}/rest/v1/runs?select=run_id,overall_score,niche_fit_score,engagement_score,analysis_type,created_at,leads(username,display_name,follower_count,profile_picture_url)&order=overall_score.desc&limit=${limit}`;\r\n    \r\n    if (user_id && business_id) {\r\n      query += `&user_id=eq.${user_id}&business_id=eq.${business_id}`;\r\n    }\r\n\r\n    const response = await fetchJson<any[]>(query, { headers });\r\n\r\n    const topPerformers = response.map((run, index) => ({\r\n      rank: index + 1,\r\n      run_id: run.run_id,\r\n      username: run.leads?.username || 'Unknown',\r\n      display_name: run.leads?.display_name || null,\r\n      profile_picture_url: run.leads?.profile_picture_url || null,\r\n      follower_count: run.leads?.follower_count || 0,\r\n      overall_score: run.overall_score,\r\n      niche_fit_score: run.niche_fit_score,\r\n      engagement_score: run.engagement_score,\r\n      analysis_type: run.analysis_type,\r\n      analyzed_at: run.created_at\r\n    }));\r\n\r\n    return {\r\n      success: true,\r\n      top_performers: topPerformers,\r\n      metrics: {\r\n        highest_score: topPerformers[0]?.overall_score || 0,\r\n        average_top_score: topPerformers.length > 0 ? \r\n          Math.round(topPerformers.reduce((sum, p) => sum + p.overall_score, 0) / topPerformers.length) : 0,\r\n        total_analyzed: response.length\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getTopPerformers failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      top_performers: [],\r\n      metrics: { highest_score: 0, average_top_score: 0, total_analyzed: 0 }\r\n    };\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// RECENT ACTIVITY FEED\r\n// ===============================================================================\r\n\r\nexport async function getRecentActivity(\r\n  user_id: string,\r\n  business_id: string,\r\n  env: Env,\r\n  limit: number = 20\r\n): Promise<any> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    const query = `${env.SUPABASE_URL}/rest/v1/runs?select=run_id,analysis_type,overall_score,summary_text,created_at,leads(username,display_name,profile_picture_url,follower_count)&user_id=eq.${user_id}&business_id=eq.${business_id}&order=created_at.desc&limit=${limit}`;\r\n\r\n    const response = await fetchJson<any[]>(query, { headers });\r\n\r\n    const activities = response.map(run => ({\r\n      run_id: run.run_id,\r\n      type: 'analysis_completed',\r\n      analysis_type: run.analysis_type,\r\n      username: run.leads?.username || 'Unknown',\r\n      display_name: run.leads?.display_name || null,\r\n      profile_picture_url: run.leads?.profile_picture_url || null,\r\n      follower_count: run.leads?.follower_count || 0,\r\n      score: run.overall_score,\r\n      summary: run.summary_text || `${run.analysis_type} analysis completed`,\r\n      timestamp: run.created_at,\r\n      time_ago: getTimeAgo(run.created_at)\r\n    }));\r\n\r\n    return {\r\n      success: true,\r\n      activities,\r\n      total_count: activities.length\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getRecentActivity failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      activities: [],\r\n      total_count: 0\r\n    };\r\n  }\r\n}\r\n\r\n// ===============================================================================\r\n// HELPER FUNCTIONS\r\n// ===============================================================================\r\n\r\nfunction getTimeAgo(timestamp: string): string {\r\n  const now = new Date();\r\n  const past = new Date(timestamp);\r\n  const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\r\n  \r\n  if (diffInMinutes < 1) return 'Just now';\r\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n  \r\n  const diffInHours = Math.floor(diffInMinutes / 60);\r\n  if (diffInHours < 24) return `${diffInHours}h ago`;\r\n  \r\n  const diffInDays = Math.floor(diffInHours / 24);\r\n  if (diffInDays < 7) return `${diffInDays}d ago`;\r\n  \r\n  const diffInWeeks = Math.floor(diffInDays / 7);\r\n  return `${diffInWeeks}w ago`;\r\n}\r\n\r\n// ===============================================================================\r\n// BUSINESS INTELLIGENCE QUERIES\r\n// ===============================================================================\r\n\r\nexport async function getBusinessIntelligence(\r\n  user_id: string,\r\n  business_id: string,\r\n  env: Env\r\n): Promise<any> {\r\n  const headers = {\r\n    apikey: env.SUPABASE_SERVICE_ROLE,\r\n    Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  try {\r\n    // Get all user's runs with lead data for comprehensive analysis\r\n    const allData = await fetchJson<any[]>(\r\n      `${env.SUPABASE_URL}/rest/v1/runs?select=*,leads(*),payloads(analysis_data)&user_id=eq.${user_id}&business_id=eq.${business_id}&order=created_at.desc`,\r\n      { headers }\r\n    );\r\n\r\n    if (allData.length === 0) {\r\n      return {\r\n        success: true,\r\n        intelligence: {\r\n          summary: \"No analysis data available for business intelligence\",\r\n          recommendations: [\"Complete more analyses to generate insights\"]\r\n        }\r\n      };\r\n    }\r\n\r\n    // Time-based performance analysis\r\n    const last30Days = allData.filter(run => {\r\n      const runDate = new Date(run.created_at);\r\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\r\n      return runDate > thirtyDaysAgo;\r\n    });\r\n\r\n    const last7Days = allData.filter(run => {\r\n      const runDate = new Date(run.created_at);\r\n      const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n      return runDate > sevenDaysAgo;\r\n    });\r\n\r\n    // Performance trends\r\n    const monthlyAvgScore = last30Days.length > 0 ? \r\n      Math.round(last30Days.reduce((sum, run) => sum + (run.overall_score || 0), 0) / last30Days.length) : 0;\r\n    \r\n    const weeklyAvgScore = last7Days.length > 0 ? \r\n      Math.round(last7Days.reduce((sum, run) => sum + (run.overall_score || 0), 0) / last7Days.length) : 0;\r\n\r\n    // Industry benchmarking (based on follower counts and engagement)\r\n    const microInfluencerRuns = allData.filter(run => \r\n      run.leads?.follower_count >= 1000 && run.leads?.follower_count <= 100000\r\n    );\r\n    const macroInfluencerRuns = allData.filter(run => \r\n      run.leads?.follower_count > 100000\r\n    );\r\n\r\n    // Quality scoring\r\n    const highQualityRuns = allData.filter(run => run.overall_score > 80);\r\n    const qualityRate = Math.round((highQualityRuns.length / allData.length) * 100);\r\n\r\n    return {\r\n      success: true,\r\n      intelligence: {\r\n        performance_summary: {\r\n          total_analyses: allData.length,\r\n          monthly_average_score: monthlyAvgScore,\r\n          weekly_average_score: weeklyAvgScore,\r\n          quality_rate: `${qualityRate}%`,\r\n          trend: weeklyAvgScore > monthlyAvgScore ? \"improving\" : \"declining\"\r\n        },\r\n        audience_insights: {\r\n          micro_influencer_performance: microInfluencerRuns.length > 0 ? \r\n            Math.round(microInfluencerRuns.reduce((sum, run) => sum + run.overall_score, 0) / microInfluencerRuns.length) : 0,\r\n          macro_influencer_performance: macroInfluencerRuns.length > 0 ? \r\n            Math.round(macroInfluencerRuns.reduce((sum, run) => sum + run.overall_score, 0) / macroInfluencerRuns.length) : 0,\r\n          recommended_segment: microInfluencerRuns.length > macroInfluencerRuns.length ? \"micro_influencers\" : \"macro_influencers\"\r\n        },\r\n        strategic_recommendations: generateStrategicRecommendations(allData, qualityRate, weeklyAvgScore, monthlyAvgScore)\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'getBusinessIntelligence failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      intelligence: {\r\n        summary: \"Unable to generate business intelligence\",\r\n        recommendations: [\"Please try again or contact support\"]\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nfunction generateStrategicRecommendations(data: any[], qualityRate: number, weeklyAvg: number, monthlyAvg: number): string[] {\r\n  const recommendations = [];\r\n\r\n  if (qualityRate < 20) {\r\n    recommendations.push(\"Improve lead sourcing criteria - less than 20% of leads are high-quality\");\r\n    recommendations.push(\"Consider partnering with influencer marketing platforms for better lead discovery\");\r\n  } else if (qualityRate > 60) {\r\n    recommendations.push(\"Excellent lead quality - scale your analysis volume to maximize opportunities\");\r\n  }\r\n\r\n  if (weeklyAvg < monthlyAvg) {\r\n    recommendations.push(\"Recent performance decline detected - review and adjust targeting strategy\");\r\n  } else if (weeklyAvg > monthlyAvg + 5) {\r\n    recommendations.push(\"Performance improving - continue current targeting approach\");\r\n  }\r\n\r\n  const deepAnalyses = data.filter(run => run.analysis_type === 'deep').length;\r\n  const lightAnalyses = data.filter(run => run.analysis_type === 'light').length;\r\n  \r\n  if (deepAnalyses < lightAnalyses * 0.3) {\r\n    recommendations.push(\"Increase deep analysis ratio for better outreach personalization\");\r\n  }\r\n\r\n  if (data.length > 50) {\r\n    recommendations.push(\"Consider implementing automated workflows for high-volume lead processing\");\r\n  }\r\n\r\n  return recommendations.length > 0 ? recommendations : [\"Continue current strategy - performance is on track\"];\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { logger } from '../utils/logger.js';\r\nimport { getAnalyticsSummary, generateAIInsights } from '../services/analytics.js';\r\nimport { fetchJson, callWithRetry } from '../utils/helpers.js';\r\n\r\nexport async function handleAnalyticsSummary(c: Context): Promise<Response> {\r\n  try {\r\n    const summary = await getAnalyticsSummary(c.env);\r\n    return c.json(summary, 200, {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n      'Content-Type': 'application/json'\r\n    });\r\n  } catch (error: any) {\r\n    logger('error', 'Analytics summary error', { error: error.message });\r\n    return c.json({\r\n      success: false,\r\n      error: 'Failed to generate analytics summary',\r\n      timestamp: new Date().toISOString()\r\n    }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleGenerateInsights(c: Context): Promise<Response> {\r\n  try {\r\n    logger('info', 'AI insights generation requested - using real data');\r\n    const insights = await generateAIInsights(c.env);\r\n    return c.json(insights, 200, {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n    });\r\n  } catch (error: any) {\r\n    logger('error', 'AI insights generation failed', { error: error.message });\r\n    return c.json({\r\n      success: false,\r\n      error: error.message\r\n    }, 500);\r\n  }\r\n}\r\n\r\nexport async function generateAIInsights(env: Env): Promise<any> {\r\n  try {\r\n    logger('info', 'Generating AI insights with real data');\r\n    \r\n    const headers = {\r\n      apikey: env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    // Get recent runs data for insights\r\n    const recentRuns = await fetchJson<any[]>(\r\n      `${env.SUPABASE_URL}/rest/v1/runs?select=*,leads(username,follower_count)&order=created_at.desc&limit=100`,\r\n      { headers }\r\n    );\r\n\r\n    const insights = {\r\n      success: true,\r\n      insights: {\r\n        totalAnalyses: recentRuns.length,\r\n        averageScore: recentRuns.reduce((sum, run) => sum + (run.overall_score || 0), 0) / recentRuns.length,\r\n        topPerformers: recentRuns\r\n          .filter(run => run.overall_score > 80)\r\n          .slice(0, 5)\r\n          .map(run => ({\r\n            username: run.leads?.username,\r\n            score: run.overall_score\r\n          })),\r\n        trends: {\r\n          highEngagement: recentRuns.filter(run => run.engagement_score > 70).length,\r\n          goodNicheFit: recentRuns.filter(run => run.niche_fit_score > 70).length\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return insights;\r\n\r\n  } catch (error: any) {\r\n    logger('error', 'generateAIInsights failed', { error: error.message });\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      insights: null\r\n    };\r\n  }\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { callWithRetry } from '../utils/helpers.js';\r\nimport { scrapeInstagramProfile } from '../services/instagram-scraper.js';\r\nimport { validateProfileData } from '../utils/validation.js';\r\n\r\nexport async function handleDebugEngagement(c: Context): Promise<Response> {\r\n  const username = c.req.param('username');\r\n  \r\n  try {\r\n    logger('info', 'Starting engagement calculation debug test', { username });\r\n    \r\n    const deepInput = {\r\n      directUrls: [`https://instagram.com/${username}/`],\r\n      resultsLimit: 10,\r\n      addParentData: false,\r\n      enhanceUserSearchWithFacebookPage: false,\r\n      onlyPostsNewerThan: \"2024-01-01\",\r\n      resultsType: \"details\",\r\n      searchType: \"hashtag\"\r\n    };\r\n\r\n    const rawResponse = await callWithRetry(\r\n      `https://api.apify.com/v2/acts/shu8hvrXbJbY3Eb9W/run-sync-get-dataset-items?token=${c.env.APIFY_API_TOKEN}`,\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(deepInput)\r\n      },\r\n      1, 1000, 30000\r\n    );\r\n\r\n    if (!rawResponse || !Array.isArray(rawResponse)) {\r\n      return c.json({\r\n        success: false,\r\n        error: 'No response or invalid response format',\r\n        username\r\n      });\r\n    }\r\n\r\n    // Detailed analysis of the raw response\r\n    const analysisResults = {\r\n      totalItems: rawResponse.length,\r\n      itemTypes: {},\r\n      profileItems: [],\r\n      postItems: [],\r\n      fieldAnalysis: {},\r\n      engagementFieldAnalysis: {}\r\n    };\r\n\r\n    // Analyze each item in the response\r\n    rawResponse.forEach((item, index) => {\r\n      const itemType = item.type || item.__typename || 'unknown';\r\n      analysisResults.itemTypes[itemType] = (analysisResults.itemTypes[itemType] || 0) + 1;\r\n      \r\n      // Check if it's a profile item\r\n      if (item.username || item.ownerUsername || (item.followersCount !== undefined && item.postsCount !== undefined)) {\r\n        analysisResults.profileItems.push({\r\n          index,\r\n          keys: Object.keys(item),\r\n          username: item.username || item.ownerUsername,\r\n          followers: item.followersCount || item.followers,\r\n          posts: item.postsCount || item.posts\r\n        });\r\n      }\r\n      \r\n      // Check if it's a post item\r\n      if (item.shortCode || item.code) {\r\n        const engagementData = {\r\n          likesCount: item.likesCount,\r\n          likes: item.likes,\r\n          like_count: item.like_count,\r\n          likeCount: item.likeCount,\r\n          commentsCount: item.commentsCount,\r\n          comments: item.comments,\r\n          comment_count: item.comment_count,\r\n          commentCount: item.commentCount\r\n        };\r\n        \r\n        analysisResults.postItems.push({\r\n          index,\r\n          shortCode: item.shortCode || item.code,\r\n          keys: Object.keys(item),\r\n          engagementData,\r\n          parsedLikes: parseInt(String(item.likesCount || item.likes || item.like_count || 0)) || 0,\r\n          parsedComments: parseInt(String(item.commentsCount || item.comments || item.comment_count || 0)) || 0\r\n        });\r\n      }\r\n      \r\n      // Analyze common field patterns\r\n      Object.keys(item).forEach(key => {\r\n        if (!analysisResults.fieldAnalysis[key]) {\r\n          analysisResults.fieldAnalysis[key] = 0;\r\n        }\r\n        analysisResults.fieldAnalysis[key]++;\r\n        \r\n        // Track engagement-related fields\r\n        if (key.toLowerCase().includes('like') || key.toLowerCase().includes('comment') || key.toLowerCase().includes('engagement')) {\r\n          if (!analysisResults.engagementFieldAnalysis[key]) {\r\n            analysisResults.engagementFieldAnalysis[key] = [];\r\n          }\r\n          if (analysisResults.engagementFieldAnalysis[key].length < 3) {\r\n            analysisResults.engagementFieldAnalysis[key].push(item[key]);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Test manual engagement calculation\r\n    let manualCalculationTest = null;\r\n    if (analysisResults.postItems.length > 0) {\r\n      const validPosts = analysisResults.postItems.filter(post => \r\n        post.parsedLikes > 0 || post.parsedComments > 0\r\n      );\r\n      \r\n      if (validPosts.length > 0) {\r\n        const totalLikes = validPosts.reduce((sum, post) => sum + post.parsedLikes, 0);\r\n        const totalComments = validPosts.reduce((sum, post) => sum + post.parsedComments, 0);\r\n        const avgLikes = Math.round(totalLikes / validPosts.length);\r\n        const avgComments = Math.round(totalComments / validPosts.length);\r\n        \r\n        manualCalculationTest = {\r\n          validPostsCount: validPosts.length,\r\n          totalLikes,\r\n          totalComments,\r\n          avgLikes,\r\n          avgComments,\r\n          calculationSteps: {\r\n            step1: `Found ${validPosts.length} valid posts out of ${analysisResults.postItems.length}`,\r\n            step2: `Total likes: ${totalLikes}, Total comments: ${totalComments}`,\r\n            step3: `Avg likes: ${totalLikes} / ${validPosts.length} = ${avgLikes}`,\r\n            step4: `Avg comments: ${totalComments} / ${validPosts.length} = ${avgComments}`\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    return c.json({\r\n      success: true,\r\n      username,\r\n      debug: {\r\n        rawResponseStructure: analysisResults,\r\n        manualCalculationTest,\r\n        recommendations: [\r\n          analysisResults.postItems.length === 0 ? 'No post items found - check scraper configuration' : 'Post items found \u2713',\r\n          analysisResults.profileItems.length === 0 ? 'No profile items found - check scraper response' : 'Profile items found \u2713',\r\n          !manualCalculationTest ? 'Manual calculation failed - no valid engagement data' : 'Manual calculation successful \u2713'\r\n        ],\r\n        troubleshooting: {\r\n          mostCommonFields: Object.entries(analysisResults.fieldAnalysis)\r\n            .sort(([,a], [,b]) => b - a)\r\n            .slice(0, 10),\r\n          engagementFields: analysisResults.engagementFieldAnalysis,\r\n          itemTypeDistribution: analysisResults.itemTypes\r\n        }\r\n      }\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    return c.json({\r\n      success: false,\r\n      error: error.message,\r\n      username\r\n    }, 500);\r\n  }\r\n}\r\nexport async function handleDebugScrape(c: Context): Promise<Response> {\r\n  const username = c.req.param('username');\r\n  const analysisType = (c.req.query('type') as 'light' | 'deep') || 'light';\r\n  \r\n  try {\r\n    const profileData = await scrapeInstagramProfile(username, analysisType, c.env);\r\n    \r\n    return c.json({\r\n      success: true,\r\n      username,\r\n      analysisType,\r\n      profileData,\r\n      debug: {\r\n        hasRealEngagement: (profileData.engagement?.postsAnalyzed || 0) > 0,\r\n        realEngagementStats: profileData.engagement || null,\r\n        hasLatestPosts: !!profileData.latestPosts,\r\n        postsCount: profileData.latestPosts?.length || 0,\r\n        dataQuality: profileData.dataQuality,\r\n        scraperUsed: profileData.scraperUsed,\r\n        noFakeData: true,\r\n        manualCalculation: true}\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({\r\n      success: false,\r\n      error: error.message,\r\n      username,\r\n      analysisType\r\n    }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleDebugParsing(c: Context): Promise<Response> {\r\n  const username = c.req.param('username');\r\n  \r\n  try {\r\n    const deepInput = {\r\n      directUrls: [`https://instagram.com/${username}/`],\r\n      resultsLimit: 5,\r\n      addParentData: false,\r\n      enhanceUserSearchWithFacebookPage: false,\r\n      onlyPostsNewerThan: \"2024-01-01\",\r\n      resultsType: \"details\",\r\n      searchType: \"hashtag\"\r\n    };\r\n\r\n    const rawResponse = await callWithRetry(\r\n      `https://api.apify.com/v2/acts/shu8hvrXbJbY3Eb9W/run-sync-get-dataset-items?token=${c.env.APIFY_API_TOKEN}`,\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(deepInput)\r\n      },\r\n      1, 1000, 30000\r\n    );\r\n\r\n    const profileItems = rawResponse?.filter(item => item.username || item.ownerUsername) || [];\r\n    const postItems = rawResponse?.filter(item => item.shortCode && item.likesCount !== undefined) || [];\r\n\r\n    // Manual engagement calculation test\r\n    let engagementTest = null;\r\n    if (postItems.length > 0) {\r\n      const validPosts = postItems.filter(post => {\r\n        const likes = parseInt(post.likesCount) || 0;\r\n        const comments = parseInt(post.commentsCount) || 0;\r\n        return likes > 0 || comments > 0;\r\n      });\r\n\r\n      if (validPosts.length > 0) {\r\n        const totalLikes = validPosts.reduce((sum, post) => sum + (parseInt(post.likesCount) || 0), 0);\r\n        const totalComments = validPosts.reduce((sum, post) => sum + (parseInt(post.commentsCount) || 0), 0);\r\n        const avgLikes = Math.round(totalLikes / validPosts.length);\r\n        const avgComments = Math.round(totalComments / validPosts.length);\r\n        const totalEngagement = avgLikes + avgComments;\r\n\r\n        engagementTest = {\r\n          postsAnalyzed: validPosts.length,\r\n          totalLikes,\r\n          totalComments,\r\n          avgLikes,\r\n          avgComments,\r\n          totalEngagement,\r\n          calculation: 'manual_as_specified'\r\n        };\r\n      }\r\n    }\r\n\r\n    return c.json({\r\n      success: true,\r\n      username,\r\n      rawResponseLength: rawResponse?.length || 0,\r\n      profileItems: profileItems.length,\r\n      postItems: postItems.length,\r\n      firstItemKeys: rawResponse?.[0] ? Object.keys(rawResponse[0]) : [],\r\n      hasProfileData: profileItems.length > 0,\r\n      hasPostData: postItems.length > 0,\r\n      samplePost: postItems[0] || null,\r\n      engagementCalculationTest: engagementTest\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    return c.json({ \r\n      success: false, \r\n      error: error.message,\r\n      username\r\n    }, 500);\r\n  }\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { fetchJson } from '../utils/helpers.js';\r\n\r\nexport async function handleTestSupabase(c: Context): Promise<Response> {\r\n  try {\r\n    const headers = {\r\n      apikey: c.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${c.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    const response = await fetch(`${c.env.SUPABASE_URL}/rest/v1/users?limit=1`, { headers });\r\n    const data = await response.text();\r\n    \r\n    return c.json({\r\n      status: response.status,\r\n      ok: response.ok,\r\n      data: data.substring(0, 200),\r\n      hasUrl: !!c.env.SUPABASE_URL,\r\n      hasServiceRole: !!c.env.SUPABASE_SERVICE_ROLE\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ error: error.message }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleTestApify(c: Context): Promise<Response> {\r\n  try {\r\n    const response = await fetch(`https://api.apify.com/v2/key-value-stores?token=${c.env.APIFY_API_TOKEN}&limit=1`);\r\n    return c.json({\r\n      status: response.status,\r\n      ok: response.ok,\r\n      hasToken: !!c.env.APIFY_API_TOKEN\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ error: error.message }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleTestOpenAI(c: Context): Promise<Response> {\r\n  try {\r\n    const response = await fetch('https://api.openai.com/v1/models', {\r\n      headers: { Authorization: `Bearer ${c.env.OPENAI_KEY}` }\r\n    });\r\n    return c.json({\r\n      status: response.status,\r\n      ok: response.ok,\r\n      hasKey: !!c.env.OPENAI_KEY\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ error: error.message }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleTestPost(c: Context): Promise<Response> {\r\n  try {\r\n    const body = await c.req.json();\r\n    return c.json({ \r\n      received: body, \r\n      timestamp: new Date().toISOString(),\r\n      enterprise: true\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ error: error.message }, 500);\r\n  }\r\n}\r\n\r\nexport async function handleDebugEnv(c: Context): Promise<Response> {\r\n  return c.json({\r\n    // Existing checks\r\n    supabase: c.env.SUPABASE_URL ? 'SET' : 'MISSING',\r\n    serviceRole: c.env.SUPABASE_SERVICE_ROLE ? 'SET' : 'MISSING',\r\n    anonKey: c.env.SUPABASE_ANON_KEY ? 'SET' : 'MISSING',\r\n    openai: c.env.OPENAI_KEY ? 'SET' : 'MISSING',\r\n    claude: c.env.CLAUDE_KEY ? 'SET' : 'MISSING',\r\n    apify: c.env.APIFY_API_TOKEN ? 'SET' : 'MISSING',\r\n    stripe: c.env.STRIPE_SECRET_KEY ? 'SET' : 'MISSING',\r\n    \r\n    // Add AWS checks\r\n    awsAccessKey: c.env.AWS_ACCESS_KEY_ID ? 'SET' : 'MISSING',\r\n    awsSecretKey: c.env.AWS_SECRET_ACCESS_KEY ? 'SET' : 'MISSING',\r\n    awsRegion: c.env.AWS_REGION ? 'SET' : 'MISSING',\r\n    \r\n    enterprise: true,\r\n    version: 'v3.0.0-enterprise-perfect'\r\n  });\r\n}\r\n", "import { runAnalysis } from '../services/analysis-orchestrator.js';\r\nimport { createMicroSnapshot } from '../services/micro-snapshot.js';\r\n\r\ninterface TestResult {\r\n  phase: string;\r\n  success: boolean;\r\n  cost: number;\r\n  duration_ms: number;\r\n  error?: string;\r\n}\r\n\r\nexport async function runIntegrationTests(env: any): Promise<TestResult[]> {\r\n  const results: TestResult[] = [];\r\n  \r\n  // Test data\r\n  const testProfile = {\r\n    username: 'fitness_coach_test',\r\n    displayName: 'Fitness Coach',\r\n    followersCount: 45000,\r\n    followingCount: 1200,\r\n    postsCount: 850,\r\n    isVerified: false,\r\n    isPrivate: false,\r\n    profilePicUrl: 'https://example.com/pic.jpg',\r\n    bio: 'Certified personal trainer helping busy professionals get fit \uD83D\uDCAA DM for custom workout plans',\r\n    externalUrl: 'https://fitcoach.com',\r\n    isBusinessAccount: true,\r\n    latestPosts: [\r\n      {\r\n        id: '1',\r\n        shortCode: 'abc123',\r\n        caption: '5 morning exercises that will transform your day! Save this post \uD83D\uDCCC #fitness #morningworkout #health',\r\n        likesCount: 1200,\r\n        commentsCount: 45,\r\n        timestamp: '2025-01-10T08:00:00Z',\r\n        url: 'https://instagram.com/p/abc123',\r\n        type: 'photo',\r\n        hashtags: ['#fitness', '#morningworkout', '#health'],\r\n        mentions: [],\r\n        isVideo: false\r\n      }\r\n    ],\r\n    engagement: {\r\n      avgLikes: 950,\r\n      avgComments: 35,\r\n      engagementRate: 2.2,\r\n      totalEngagement: 985,\r\n      postsAnalyzed: 12\r\n    },\r\n    scraperUsed: 'deep_test',\r\n    dataQuality: 'high' as const\r\n  };\r\n\r\n  const testBusiness = {\r\n    id: '550e8400-e29b-41d4-a716-446655440001',\r\n    user_id: '550e8400-e29b-41d4-a716-446655440000',\r\n    name: 'FitTech Solutions',\r\n    industry: 'fitness technology',\r\n    target_audience: 'health-conscious professionals aged 25-45',\r\n    value_proposition: 'AI-powered fitness apps that adapt to busy schedules',\r\n    target_problems: 'lack of time for gym, inconsistent workout routines',\r\n    business_name: 'FitTech Solutions'\r\n  };\r\n\r\n  // TEST 1: Business Context Generation\r\n  const contextStart = Date.now();\r\n  try {\r\n    const context = await ensureBusinessContext(testBusiness, env, 'test-context');\r\n    const contextDuration = Date.now() - contextStart;\r\n    \r\n    results.push({\r\n      phase: 'business_context',\r\n      success: !!context.business_one_liner,\r\n      cost: 0.001, // Estimated\r\n      duration_ms: contextDuration\r\n    });\r\n  } catch (error: any) {\r\n    results.push({\r\n      phase: 'business_context',\r\n      success: false,\r\n      cost: 0,\r\n      duration_ms: Date.now() - contextStart,\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  // TEST 2: Light Analysis\r\n  const lightStart = Date.now();\r\n  try {\r\n    const lightResult = await runAnalysis(testProfile, testBusiness, 'light', env, 'test-light');\r\n    results.push({\r\n      phase: 'light_analysis',\r\n      success: lightResult.verdict === 'success',\r\n      cost: lightResult.totalCost.actual_cost,\r\n      duration_ms: lightResult.performance.total_ms,\r\n      error: lightResult.verdict === 'error' ? lightResult.result.error : undefined\r\n    });\r\n  } catch (error: any) {\r\n    results.push({\r\n      phase: 'light_analysis',\r\n      success: false,\r\n      cost: 0,\r\n      duration_ms: Date.now() - lightStart,\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  // TEST 3: Deep Analysis  \r\n  const deepStart = Date.now();\r\n  try {\r\n    const deepResult = await runAnalysis(testProfile, testBusiness, 'deep', env, 'test-deep');\r\n    results.push({\r\n      phase: 'deep_analysis',\r\n      success: deepResult.verdict === 'success',\r\n      cost: deepResult.totalCost.actual_cost,\r\n      duration_ms: deepResult.performance.total_ms,\r\n      error: deepResult.verdict === 'error' ? deepResult.result.error : undefined\r\n    });\r\n  } catch (error: any) {\r\n    results.push({\r\n      phase: 'deep_analysis',\r\n      success: false,\r\n      cost: 0,\r\n      duration_ms: Date.now() - deepStart,\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  // TEST 4: Micro Snapshot Generation\r\n  const snapshotStart = Date.now();\r\n  try {\r\n    const snapshot = createMicroSnapshot(testProfile);\r\n    const snapshotDuration = Date.now() - snapshotStart;\r\n    \r\n    const isValid = snapshot.username === testProfile.username &&\r\n                   snapshot.followers === testProfile.followersCount &&\r\n                   snapshot.engagement_signals?.avg_likes === testProfile.engagement.avgLikes;\r\n    \r\n    results.push({\r\n      phase: 'micro_snapshot',\r\n      success: isValid,\r\n      cost: 0,\r\n      duration_ms: snapshotDuration\r\n    });\r\n  } catch (error: any) {\r\n    results.push({\r\n      phase: 'micro_snapshot',\r\n      success: false,\r\n      cost: 0,\r\n      duration_ms: Date.now() - snapshotStart,\r\n      error: error.message\r\n    });\r\n  }\r\n\r\n  return results;\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { getEnhancedConfigManager } from '../services/enhanced-config-manager.js';\r\nimport { getAWSSecretsManager } from '../services/aws-secrets-manager.js';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js';\r\nimport { fetchJson } from '../utils/helpers.js';\r\n\r\ninterface ConfigUpdateRequest {\r\n  keyName: string;\r\n  newValue: string;\r\n  adminToken?: string;\r\n}\r\n\r\ninterface MigrationRequest {\r\n  keyNames?: string[];\r\n  migrateAll?: boolean;\r\n  adminToken?: string;\r\n}\r\n\r\n// Admin authentication middleware\r\nfunction verifyAdminAccess(c: Context): boolean {\r\n  const authHeader = c.req.header('Authorization');\r\n  const adminToken = c.env.ADMIN_TOKEN;\r\n  \r\n  if (!adminToken) {\r\n    logger('error', 'ADMIN_TOKEN not configured in environment');\r\n    return false;\r\n  }\r\n  \r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return false;\r\n  }\r\n  \r\n  const token = authHeader.substring(7);\r\n  return token === adminToken;\r\n}\r\n\r\nexport async function handleUpdateApiKey(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      logger('warn', 'Unauthorized admin access attempt', { requestId });\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const body = await c.req.json() as ConfigUpdateRequest;\r\n    const { keyName, newValue } = body;\r\n    \r\n    // Validate input\r\n    if (!keyName || !newValue) {\r\n      return c.json(createStandardResponse(false, undefined, 'keyName and newValue are required', requestId), 400);\r\n    }\r\n    \r\n    // Validate keyName against allowed keys\r\n    const allowedKeys = [\r\n      'OPENAI_API_KEY', \r\n      'CLAUDE_API_KEY', \r\n      'APIFY_API_TOKEN', \r\n      'STRIPE_SECRET_KEY', \r\n      'STRIPE_WEBHOOK_SECRET',\r\n      'STRIPE_PUBLISHABLE_KEY',\r\n      'WORKER_URL',\r\n      'NETLIFY_BUILD_HOOK_URL'\r\n    ];\r\n    \r\n    if (!allowedKeys.includes(keyName)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Invalid key name', requestId), 400);\r\n    }\r\n    \r\n    // Validate key format\r\n    const keyValidation = validateApiKeyFormat(keyName, newValue);\r\n    if (!keyValidation.valid) {\r\n      return c.json(createStandardResponse(false, undefined, keyValidation.error, requestId), 400);\r\n    }\r\n    \r\n    // Get user info from session if available\r\n    const userEmail = c.req.header('X-User-Email') || 'admin-panel';\r\n    \r\n    // Update configuration using enhanced config manager\r\n    const configManager = getEnhancedConfigManager(c.env);\r\n    await configManager.updateConfig(keyName, newValue, userEmail);\r\n    \r\n    // Test the key to ensure it's working\r\n    const testResult = await testApiKey(keyName, newValue, c.env);\r\n    \r\n    logger('info', 'API key updated via enhanced admin panel', { \r\n      keyName, \r\n      updatedBy: userEmail,\r\n      testResult: testResult.success,\r\n      usedAWS: isAWSManagedKey(keyName),\r\n      requestId \r\n    });\r\n    \r\n    return c.json(createStandardResponse(true, {\r\n      message: `${keyName} updated successfully`,\r\n      testResult: testResult,\r\n      storage: isAWSManagedKey(keyName) ? 'AWS Secrets Manager + Supabase backup' : 'Supabase only',\r\n      autoSyncTriggered: true\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Enhanced admin key update failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleGetConfigStatus(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const configManager = getEnhancedConfigManager(c.env);\r\n    const status = await configManager.getConfigStatus();\r\n    \r\n    // Add AWS connectivity status\r\n    let awsStatus = 'not_configured';\r\n    try {\r\n      const awsSecrets = getAWSSecretsManager(c.env);\r\n      const awsSecretsList = await awsSecrets.listSecrets();\r\n      awsStatus = 'connected';\r\n      \r\n      // Add migration recommendations\r\n      Object.keys(status).forEach(keyName => {\r\n        if (isAWSManagedKey(keyName)) {\r\n          status[keyName].migration_recommended = status[keyName].aws.status !== 'configured';\r\n          status[keyName].in_aws = awsSecretsList.includes(keyName);\r\n        }\r\n      });\r\n      \r\n    } catch (awsError: any) {\r\n      awsStatus = `error: ${awsError.message}`;\r\n    }\r\n    \r\n    logger('info', 'Enhanced config status retrieved', { requestId, awsStatus });\r\n    \r\n    return c.json(createStandardResponse(true, { \r\n      status,\r\n      aws_connectivity: awsStatus,\r\n      migration_summary: {\r\n        total_keys: Object.keys(status).length,\r\n        aws_managed_keys: Object.keys(status).filter(k => isAWSManagedKey(k)).length,\r\n        migration_needed: Object.values(status).filter((s: any) => s.migration_recommended).length\r\n      }\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Failed to get enhanced config status', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleMigrateToAWS(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const body = await c.req.json() as MigrationRequest;\r\n    const { keyNames, migrateAll } = body;\r\n    \r\n    const configManager = getEnhancedConfigManager(c.env);\r\n    \r\n    // Determine which keys to migrate\r\n    const awsManagedKeys = ['OPENAI_API_KEY', 'CLAUDE_API_KEY', 'APIFY_API_TOKEN', 'STRIPE_SECRET_KEY', 'STRIPE_WEBHOOK_SECRET'];\r\n    const keysToMigrate = migrateAll ? awsManagedKeys : (keyNames || []);\r\n    \r\n    if (keysToMigrate.length === 0) {\r\n      return c.json(createStandardResponse(false, undefined, 'No keys specified for migration', requestId), 400);\r\n    }\r\n    \r\n    const results = [];\r\n    \r\n    for (const keyName of keysToMigrate) {\r\n      try {\r\n        await configManager.migrateToAWS(keyName);\r\n        results.push({\r\n          keyName,\r\n          success: true,\r\n          message: 'Successfully migrated to AWS Secrets Manager'\r\n        });\r\n        \r\n        logger('info', 'Key migrated to AWS', { keyName, requestId });\r\n        \r\n      } catch (migrationError: any) {\r\n        results.push({\r\n          keyName,\r\n          success: false,\r\n          error: migrationError.message\r\n        });\r\n        \r\n        logger('error', 'Key migration failed', { \r\n          keyName, \r\n          error: migrationError.message, \r\n          requestId \r\n        });\r\n      }\r\n    }\r\n    \r\n    const successCount = results.filter(r => r.success).length;\r\n    const failureCount = results.filter(r => !r.success).length;\r\n    \r\n    return c.json(createStandardResponse(true, {\r\n      message: `Migration completed: ${successCount} successful, ${failureCount} failed`,\r\n      results,\r\n      summary: {\r\n        total: keysToMigrate.length,\r\n        successful: successCount,\r\n        failed: failureCount\r\n      }\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Migration process failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\n\r\nexport async function handleTestApiKey(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const { keyName, keyValue } = await c.req.json();\r\n    \r\n    if (!keyName) {\r\n      return c.json(createStandardResponse(false, undefined, 'keyName is required', requestId), 400);\r\n    }\r\n    \r\n    // If keyValue is provided, test that value, otherwise get from enhanced config\r\n    let valueToTest = keyValue;\r\n    if (!valueToTest) {\r\n      const configManager = getEnhancedConfigManager(c.env);\r\n      valueToTest = await configManager.getConfig(keyName);\r\n    }\r\n    \r\n    if (!valueToTest) {\r\n      return c.json(createStandardResponse(false, undefined, 'No key value to test', requestId), 400);\r\n    }\r\n    \r\n    const testResult = await testApiKey(keyName, valueToTest, c.env);\r\n    \r\n    logger('info', 'API key tested via enhanced admin', { \r\n      keyName, \r\n      success: testResult.success, \r\n      requestId \r\n    });\r\n    \r\n    return c.json(createStandardResponse(true, testResult, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Enhanced API key test failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleGetAuditLog(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const limit = parseInt(c.req.query('limit') || '50');\r\n    const offset = parseInt(c.req.query('offset') || '0');\r\n    \r\n    const headers = {\r\n      apikey: c.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${c.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // Get audit log from app_config table\r\n    const auditLog = await fetchJson<any[]>(\r\n      `${c.env.SUPABASE_URL}/rest/v1/app_config?environment=eq.production&select=key_name,updated_at,updated_by&order=updated_at.desc&limit=${limit}&offset=${offset}`,\r\n      { headers }\r\n    );\r\n    \r\n    const formattedLog = auditLog.map(entry => ({\r\n      keyName: entry.key_name,\r\n      action: 'UPDATE',\r\n      timestamp: entry.updated_at,\r\n      user: entry.updated_by || 'system',\r\n      id: `${entry.key_name}-${entry.updated_at}`,\r\n      storage: isAWSManagedKey(entry.key_name) ? 'AWS + Supabase' : 'Supabase'\r\n    }));\r\n    \r\n    return c.json(createStandardResponse(true, { \r\n      log: formattedLog,\r\n      total: formattedLog.length,\r\n      limit,\r\n      offset,\r\n      hasAWSIntegration: true\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Failed to get enhanced audit log', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\n// =======================================================================================\r\n// HELPER FUNCTIONS - PASTE THESE AT THE END OF THE FILE\r\n// =======================================================================================\r\n\r\nfunction isAWSManagedKey(keyName: string): boolean {\r\n  const awsManagedKeys = [\r\n    'OPENAI_API_KEY',\r\n    'CLAUDE_API_KEY',\r\n    'APIFY_API_TOKEN',\r\n    'STRIPE_SECRET_KEY',\r\n    'STRIPE_WEBHOOK_SECRET'\r\n  ];\r\n  \r\n  return awsManagedKeys.includes(keyName);\r\n}\r\n\r\nfunction validateApiKeyFormat(keyName: string, keyValue: string): { valid: boolean; error?: string } {\r\n  const validations: Record<string, (key: string) => boolean> = {\r\n    'OPENAI_API_KEY': (key) => key.startsWith('sk-') && key.length > 20,\r\n    'CLAUDE_API_KEY': (key) => key.startsWith('sk-ant-') && key.length > 30,\r\n    'APIFY_API_TOKEN': (key) => key.startsWith('apify_api_') && key.length > 20,\r\n    'STRIPE_SECRET_KEY': (key) => (key.startsWith('sk_live_') || key.startsWith('sk_test_')) && key.length > 20,\r\n    'STRIPE_WEBHOOK_SECRET': (key) => key.startsWith('whsec_') && key.length > 20,\r\n    'STRIPE_PUBLISHABLE_KEY': (key) => (key.startsWith('pk_live_') || key.startsWith('pk_test_')) && key.length > 20,\r\n    'WORKER_URL': (key) => key.startsWith('https://') && key.includes('.workers.dev'),\r\n    'NETLIFY_BUILD_HOOK_URL': (key) => key.startsWith('https://api.netlify.com/build_hooks/')\r\n  };\r\n  \r\n  const validator = validations[keyName];\r\n  if (!validator) {\r\n    return { valid: true }; // Allow unknown key types\r\n  }\r\n  \r\n  if (!validator(keyValue)) {\r\n    return { valid: false, error: `Invalid format for ${keyName}` };\r\n  }\r\n  \r\n  return { valid: true };\r\n}\r\n\r\nasync function testApiKey(keyName: string, keyValue: string, env: any): Promise<{ success: boolean; message: string; details?: any }> {\r\n  try {\r\n    switch (keyName) {\r\n      case 'OPENAI_API_KEY':\r\n        const openaiResponse = await fetch('https://api.openai.com/v1/models', {\r\n          headers: { 'Authorization': `Bearer ${keyValue}` }\r\n        });\r\n        return {\r\n          success: openaiResponse.ok,\r\n          message: openaiResponse.ok ? 'OpenAI API key is valid' : 'OpenAI API key is invalid',\r\n          details: { status: openaiResponse.status, source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'CLAUDE_API_KEY':\r\n        const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n          method: 'POST',\r\n          headers: {\r\n            'x-api-key': keyValue,\r\n            'anthropic-version': '2023-06-01',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            model: 'claude-3-haiku-20240307',\r\n            messages: [{ role: 'user', content: 'test' }],\r\n            max_tokens: 1\r\n          })\r\n        });\r\n        return {\r\n          success: claudeResponse.status !== 401 && claudeResponse.status !== 403,\r\n          message: claudeResponse.status !== 401 && claudeResponse.status !== 403 ? 'Claude API key is valid' : 'Claude API key is invalid',\r\n          details: { status: claudeResponse.status, source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'APIFY_API_TOKEN':\r\n        const apifyResponse = await fetch(`https://api.apify.com/v2/key-value-stores?token=${keyValue}&limit=1`);\r\n        return {\r\n          success: apifyResponse.ok,\r\n          message: apifyResponse.ok ? 'Apify API token is valid' : 'Apify API token is invalid',\r\n          details: { status: apifyResponse.status, source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'STRIPE_SECRET_KEY':\r\n        const stripeResponse = await fetch('https://api.stripe.com/v1/charges?limit=1', {\r\n          headers: { 'Authorization': `Bearer ${keyValue}` }\r\n        });\r\n        return {\r\n          success: stripeResponse.ok,\r\n          message: stripeResponse.ok ? 'Stripe secret key is valid' : 'Stripe secret key is invalid',\r\n          details: { status: stripeResponse.status, source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'STRIPE_WEBHOOK_SECRET':\r\n        return {\r\n          success: keyValue.startsWith('whsec_'),\r\n          message: keyValue.startsWith('whsec_') ? 'Webhook secret format is valid' : 'Invalid webhook secret format',\r\n          details: { source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'STRIPE_PUBLISHABLE_KEY':\r\n        return {\r\n          success: keyValue.startsWith('pk_live_') || keyValue.startsWith('pk_test_'),\r\n          message: (keyValue.startsWith('pk_live_') || keyValue.startsWith('pk_test_')) ? 'Stripe publishable key format is valid' : 'Invalid publishable key format',\r\n          details: { source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'WORKER_URL':\r\n        const workerResponse = await fetch(`${keyValue}/health`);\r\n        return {\r\n          success: workerResponse.ok,\r\n          message: workerResponse.ok ? 'Worker URL is accessible' : 'Worker URL is not accessible',\r\n          details: { status: workerResponse.status, source: 'enhanced_admin' }\r\n        };\r\n        \r\n      case 'NETLIFY_BUILD_HOOK_URL':\r\n        return {\r\n          success: keyValue.includes('api.netlify.com/build_hooks/'),\r\n          message: keyValue.includes('api.netlify.com/build_hooks/') ? 'Netlify build hook URL format is valid' : 'Invalid Netlify build hook URL',\r\n          details: { source: 'enhanced_admin' }\r\n        };\r\n        \r\n      default:\r\n        return {\r\n          success: false,\r\n          message: 'Testing not implemented for this key type',\r\n          details: { source: 'enhanced_admin' }\r\n        };\r\n    }\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: `Test failed: ${error.message}`,\r\n      details: { error: error.message, source: 'enhanced_admin' }\r\n    };\r\n  }\r\n}\r\n", "import type { Context } from 'hono';\r\nimport { getEnhancedConfigManager } from '../services/enhanced-config-manager.js';\r\nimport { generateRequestId, logger } from '../utils/logger.js';\r\nimport { createStandardResponse } from '../utils/response.js'; \r\nimport { fetchJson } from '../utils/helpers.js';\r\n \r\ninterface ConfigUpdateRequest {\r\n  keyName: string; \r\n  newValue: string;\r\n  adminToken?: string;\r\n}\r\n\r\ninterface ConfigStatusResponse {\r\n  success: boolean;\r\n  status?: Record<string, {\r\n    configured: boolean;\r\n    lastUpdated: string;\r\n    updatedBy: string;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\n// Admin authentication middleware\r\nfunction verifyAdminAccess(c: Context): boolean {\r\n  const authHeader = c.req.header('Authorization');\r\n  const adminToken = c.env.ADMIN_TOKEN;\r\n  \r\n  if (!adminToken) {\r\n    logger('error', 'ADMIN_TOKEN not configured in environment');\r\n    return false;\r\n  }\r\n  \r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return false;\r\n  }\r\n  \r\n  const token = authHeader.substring(7);\r\n  return token === adminToken;\r\n}\r\n\r\nexport async function handleUpdateApiKey(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n\r\n    const sensitiveKeys = ['OPENAI_API_KEY', 'CLAUDE_API_KEY', 'APIFY_API_TOKEN', 'STRIPE_SECRET_KEY'];\r\n  \r\n  if (sensitiveKeys.includes(keyName)) {\r\n    // Store in AWS Secrets Manager\r\n    const awsSecrets = new AWSSecretsManager(c.env);\r\n    await awsSecrets.putSecret(keyName, newValue);\r\n    \r\n    // Also update Supabase as backup\r\n    const configManager = getConfigManager(c.env);\r\n    await configManager.updateConfig(keyName, newValue, userEmail);\r\n  } else {\r\n    // Non-sensitive keys only go to Supabase\r\n    const configManager = getConfigManager(c.env);\r\n    await configManager.updateConfig(keyName, newValue, userEmail);\r\n  }\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      logger('warn', 'Unauthorized admin access attempt', { requestId });\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const body = await c.req.json() as ConfigUpdateRequest;\r\n    const { keyName, newValue } = body;\r\n    \r\n    // Validate input\r\n    if (!keyName || !newValue) {\r\n      return c.json(createStandardResponse(false, undefined, 'keyName and newValue are required', requestId), 400);\r\n    }\r\n    \r\n    // Validate keyName against allowed keys\r\n    const allowedKeys = [\r\n  'OPENAI_API_KEY', \r\n  'CLAUDE_API_KEY', \r\n  'APIFY_API_TOKEN', \r\n  'STRIPE_SECRET_KEY', \r\n  'STRIPE_WEBHOOK_SECRET',\r\n  'STRIPE_PUBLISHABLE_KEY',\r\n  'WORKER_URL',\r\n  'NETLIFY_BUILD_HOOK_URL',\r\n  'SUPABASE_SERVICE_ROLE',\r\n  'SUPABASE_ANON_KEY'  // \u2705 ADD THIS\r\n];\r\n    \r\n    if (!allowedKeys.includes(keyName)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Invalid key name', requestId), 400);\r\n    }\r\n    \r\n    // Validate key format\r\n    const keyValidation = validateApiKeyFormat(keyName, newValue);\r\n    if (!keyValidation.valid) {\r\n      return c.json(createStandardResponse(false, undefined, keyValidation.error, requestId), 400);\r\n    }\r\n    \r\n    // Get user info from session if available\r\n    const userEmail = c.req.header('X-User-Email') || 'admin-panel';\r\n    \r\n    // Update configuration\r\n    const configManager = getEnhancedConfigManager(c.env);\r\n    await configManager.updateConfig(keyName, newValue, userEmail);\r\n    \r\n    // Trigger auto-sync to other services\r\n    await triggerAutoSync(keyName, userEmail, c.env);\r\n    \r\n    // Test the key to ensure it's working (optional)\r\n    const testResult = await testApiKey(keyName, newValue, c.env);\r\n    \r\n    logger('info', 'API key updated via admin panel', { \r\n      keyName, \r\n      updatedBy: userEmail,\r\n      testResult: testResult.success,\r\n      requestId \r\n    });\r\n    \r\n    return c.json(createStandardResponse(true, {\r\n      message: `${keyName} updated successfully`,\r\n      testResult: testResult\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Admin key update failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\n// Auto-sync function to trigger updates across all services\r\nasync function triggerAutoSync(keyName: string, updatedBy: string, env: any): Promise<void> {\r\n  const promises: Promise<any>[] = [];\r\n\r\n  // 1. Trigger Netlify rebuild\r\n  if (env.NETLIFY_BUILD_HOOK_URL) {\r\n    promises.push(\r\n      fetch(env.NETLIFY_BUILD_HOOK_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          trigger: 'config_update',\r\n          keyName,\r\n          updatedBy,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n      }).then(response => {\r\n        if (response.ok) {\r\n          logger('info', 'Netlify rebuild triggered', { keyName });\r\n        } else {\r\n          logger('error', 'Netlify rebuild failed', { keyName, status: response.status });\r\n        }\r\n      }).catch(error => {\r\n        logger('error', 'Netlify rebuild request failed', { keyName, error: error.message });\r\n      })\r\n    );\r\n  }\r\n\r\n  // 2. Clear Cloudflare Worker cache (if using KV storage)\r\n  if (env.CONFIG_KV_NAMESPACE) {\r\n    promises.push(\r\n      env.CONFIG_KV_NAMESPACE.delete(`config:${keyName}`)\r\n        .then(() => logger('info', 'Cloudflare KV cache cleared', { keyName }))\r\n        .catch((error: any) => logger('warn', 'Failed to clear KV cache', { keyName, error: error.message }))\r\n    );\r\n  }\r\n\r\n  // 3. Purge CDN cache for config endpoints\r\n  if (env.CLOUDFLARE_ZONE_ID && env.CLOUDFLARE_API_TOKEN) {\r\n    promises.push(\r\n      fetch(`https://api.cloudflare.com/client/v4/zones/${env.CLOUDFLARE_ZONE_ID}/purge_cache`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${env.CLOUDFLARE_API_TOKEN}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          files: [\r\n            `${env.WORKER_URL}/config`,\r\n            `${env.WORKER_URL}/v1/config`\r\n          ]\r\n        })\r\n      }).then(() => logger('info', 'CDN cache purged', { keyName }))\r\n        .catch(error => logger('warn', 'CDN cache purge failed', { keyName, error: error.message }))\r\n    );\r\n  }\r\n\r\n  // 4. Send notifications\r\n  if (env.SLACK_WEBHOOK_URL) {\r\n    promises.push(\r\n      fetch(env.SLACK_WEBHOOK_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          text: `\uD83D\uDD11 Config Updated: \\`${keyName}\\` was updated by ${updatedBy}`,\r\n          channel: '#alerts'\r\n        })\r\n      }).catch(error => logger('warn', 'Slack notification failed', { error: error.message }))\r\n    );\r\n  }\r\n\r\n  // Execute all sync operations in parallel\r\n  await Promise.allSettled(promises);\r\n  \r\n  logger('info', 'Auto-sync completed', { \r\n    keyName, \r\n    updatedBy,\r\n    syncOperations: promises.length\r\n  });\r\n}\r\n\r\nexport async function handleGetConfigStatus(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const headers = {\r\n      apikey: c.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${c.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // Get all configuration keys\r\n    const configKeys = await fetchJson<any[]>(\r\n      `${c.env.SUPABASE_URL}/rest/v1/app_config?environment=eq.production&select=key_name,updated_at,updated_by,key_value`,\r\n      { headers }\r\n    );\r\n    \r\n    const allowedKeys = [\r\n      'OPENAI_API_KEY', \r\n      'CLAUDE_API_KEY', \r\n      'APIFY_API_TOKEN', \r\n      'STRIPE_SECRET_KEY', \r\n      'STRIPE_WEBHOOK_SECRET'\r\n    ];\r\n    \r\n    const status: Record<string, any> = {};\r\n    \r\n    for (const keyName of allowedKeys) {\r\n      const configItem = configKeys.find(item => item.key_name === keyName);\r\n      \r\n      if (configItem) {\r\n        // Don't expose the actual key value, just check if it exists and has content\r\n        const hasValue = configItem.key_value && configItem.key_value.length > 0;\r\n        \r\n        status[keyName] = {\r\n          configured: hasValue,\r\n          lastUpdated: configItem.updated_at,\r\n          updatedBy: configItem.updated_by || 'system',\r\n          status: hasValue ? 'CONFIGURED' : 'EMPTY'\r\n        };\r\n      } else {\r\n        // Check if key exists in environment variables as fallback\r\n        const envValue = c.env[keyName as keyof typeof c.env];\r\n        status[keyName] = {\r\n          configured: !!envValue,\r\n          lastUpdated: 'N/A',\r\n          updatedBy: 'environment',\r\n          status: envValue ? 'ENV_FALLBACK' : 'MISSING'\r\n        };\r\n      }\r\n    }\r\n    \r\n    logger('info', 'Config status retrieved', { requestId });\r\n    \r\n    return c.json(createStandardResponse(true, { status }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Failed to get config status', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleTestApiKey(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const { keyName, keyValue } = await c.req.json();\r\n    \r\n    if (!keyName) {\r\n      return c.json(createStandardResponse(false, undefined, 'keyName is required', requestId), 400);\r\n    }\r\n    \r\n    // If keyValue is provided, test that value, otherwise get from config\r\n    let valueToTest = keyValue;\r\n    if (!valueToTest) {\r\n      const configManager = getConfigManager(c.env);\r\n      valueToTest = await configManager.getConfig(keyName);\r\n    }\r\n    \r\n    if (!valueToTest) {\r\n      return c.json(createStandardResponse(false, undefined, 'No key value to test', requestId), 400);\r\n    }\r\n    \r\n    const testResult = await testApiKey(keyName, valueToTest, c.env);\r\n    \r\n    logger('info', 'API key tested', { keyName, success: testResult.success, requestId });\r\n    \r\n    return c.json(createStandardResponse(true, testResult, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'API key test failed', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n\r\nexport async function handleGetAuditLog(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const limit = parseInt(c.req.query('limit') || '50');\r\n    const offset = parseInt(c.req.query('offset') || '0');\r\n    \r\n    const headers = {\r\n      apikey: c.env.SUPABASE_SERVICE_ROLE,\r\n      Authorization: `Bearer ${c.env.SUPABASE_SERVICE_ROLE}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    \r\n    // Get audit log from app_config table\r\n    const auditLog = await fetchJson<any[]>(\r\n      `${c.env.SUPABASE_URL}/rest/v1/app_config?environment=eq.production&select=key_name,updated_at,updated_by&order=updated_at.desc&limit=${limit}&offset=${offset}`,\r\n      { headers }\r\n    );\r\n    \r\n    const formattedLog = auditLog.map(entry => ({\r\n      keyName: entry.key_name,\r\n      action: 'UPDATE',\r\n      timestamp: entry.updated_at,\r\n      user: entry.updated_by || 'system',\r\n      id: `${entry.key_name}-${entry.updated_at}`\r\n    }));\r\n    \r\n    return c.json(createStandardResponse(true, { \r\n      log: formattedLog,\r\n      total: formattedLog.length,\r\n      limit,\r\n      offset\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Failed to get audit log', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n// Helper function to test API keys\r\nasync function testApiKey(keyName: string, keyValue: string, env: any): Promise<{ success: boolean; message: string; details?: any }> {\r\n  try {\r\n    switch (keyName) {\r\n      case 'OPENAI_API_KEY':\r\n        const openaiResponse = await fetch('https://api.openai.com/v1/models', {\r\n          headers: { 'Authorization': `Bearer ${keyValue}` }\r\n        });\r\n        return {\r\n          success: openaiResponse.ok,\r\n          message: openaiResponse.ok ? 'OpenAI API key is valid' : 'OpenAI API key test failed',\r\n          details: { status: openaiResponse.status }\r\n        };\r\n        \r\n      case 'CLAUDE_API_KEY':\r\n        const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {\r\n          method: 'POST',\r\n          headers: {\r\n            'x-api-key': keyValue,\r\n            'anthropic-version': '2023-06-01',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            model: 'claude-3-haiku-20240307',\r\n            messages: [{ role: 'user', content: 'test' }],\r\n            max_tokens: 1\r\n          })\r\n        });\r\n        return {\r\n          success: claudeResponse.ok,\r\n          message: claudeResponse.ok ? 'Claude API key is valid' : 'Claude API key test failed',\r\n          details: { status: claudeResponse.status }\r\n        };\r\n        \r\n      case 'APIFY_API_TOKEN':\r\n        const apifyResponse = await fetch(`https://api.apify.com/v2/key-value-stores?token=${keyValue}&limit=1`);\r\n        return {\r\n          success: apifyResponse.ok,\r\n          message: apifyResponse.ok ? 'Apify API token is valid' : 'Apify API token test failed',\r\n          details: { status: apifyResponse.status }\r\n        };\r\n        \r\n      case 'STRIPE_SECRET_KEY':\r\n        const stripeResponse = await fetch('https://api.stripe.com/v1/customers?limit=1', {\r\n          headers: { 'Authorization': `Bearer ${keyValue}` }\r\n        });\r\n        return {\r\n          success: stripeResponse.ok,\r\n          message: stripeResponse.ok ? 'Stripe secret key is valid' : 'Stripe secret key test failed',\r\n          details: { status: stripeResponse.status }\r\n        };\r\n        \r\n      // \u2705 ADD THIS NEW CASE:\r\n      case 'SUPABASE_SERVICE_ROLE':\r\n        const supabaseResponse = await fetch(`${env.SUPABASE_URL}/rest/v1/users?limit=1`, {\r\n          headers: {\r\n            'apikey': keyValue,\r\n            'Authorization': `Bearer ${keyValue}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        return {\r\n          success: supabaseResponse.ok,\r\n          message: supabaseResponse.ok ? 'Supabase service role is valid' : 'Supabase service role test failed',\r\n          details: { \r\n            status: supabaseResponse.status,\r\n            supabaseUrl: env.SUPABASE_URL\r\n          }\r\n        };\r\n        \r\n      case 'STRIPE_WEBHOOK_SECRET':\r\n        return {\r\n          success: true,\r\n          message: 'Webhook secret format validation passed (cannot test without webhook event)',\r\n          details: { format: 'whsec_*', length: keyValue.length }\r\n        };\r\n        \r\n      default:\r\n        return {\r\n          success: false,\r\n          message: `Testing not implemented for ${keyName}`,\r\n          details: { keyName, available: ['OPENAI_API_KEY', 'CLAUDE_API_KEY', 'APIFY_API_TOKEN', 'STRIPE_SECRET_KEY', 'SUPABASE_SERVICE_ROLE', 'STRIPE_WEBHOOK_SECRET'] }\r\n        };\r\n    }\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      message: `Test failed: ${error.message}`,\r\n      details: { error: error.message, keyName }\r\n    };\r\n  }\r\n}\r\n\r\n// Also update the validation function to include SUPABASE_SERVICE_ROLE:\r\nfunction validateApiKeyFormat(keyName: string, keyValue: string): { valid: boolean; error?: string } {\r\n  const validations: Record<string, (key: string) => boolean> = {\r\n    'OPENAI_API_KEY': (key) => key.startsWith('sk-') && key.length > 20,\r\n    'CLAUDE_API_KEY': (key) => key.startsWith('sk-ant-') && key.length > 30,\r\n    'APIFY_API_TOKEN': (key) => key.startsWith('apify_api_') && key.length > 20,\r\n    'STRIPE_SECRET_KEY': (key) => (key.startsWith('sk_live_') || key.startsWith('sk_test_')) && key.length > 20,\r\n    'STRIPE_WEBHOOK_SECRET': (key) => key.startsWith('whsec_') && key.length > 20,\r\n    'STRIPE_PUBLISHABLE_KEY': (key) => (key.startsWith('pk_live_') || key.startsWith('pk_test_')) && key.length > 20,\r\n    'WORKER_URL': (key) => key.startsWith('https://') && key.includes('.workers.dev'),\r\n    'NETLIFY_BUILD_HOOK_URL': (key) => key.startsWith('https://api.netlify.com/build_hooks/'),\r\n    'SUPABASE_SERVICE_ROLE': (key) => key.startsWith('eyJ') && key.includes('.') && key.length > 100, // JWT format\r\n    'SUPABASE_ANON_KEY': (key) => key.startsWith('eyJ') && key.includes('.') && key.length > 100  // \u2705 ADD THIS - JWT format\r\n  };\r\n  \r\n  const validator = validations[keyName];\r\n  if (!validator) {\r\n    return { valid: true }; // Allow unknown key types\r\n  }\r\n  \r\n  if (!validator(keyValue)) {\r\n    return { valid: false, error: `Invalid format for ${keyName}` };\r\n  }\r\n  \r\n  return { valid: true };\r\n}\r\n\r\n// Also update the allowedKeys array in handleUpdateApiKey:\r\nconst allowedKeys = [\r\n  'OPENAI_API_KEY', \r\n  'CLAUDE_API_KEY', \r\n  'APIFY_API_TOKEN', \r\n  'STRIPE_SECRET_KEY', \r\n  'STRIPE_WEBHOOK_SECRET',\r\n  'STRIPE_PUBLISHABLE_KEY',\r\n  'WORKER_URL',\r\n  'NETLIFY_BUILD_HOOK_URL',\r\n  'SUPABASE_SERVICE_ROLE'  // \u2705 ADD THIS\r\n];\r\n\r\n// And update the isAWSManagedKey function:\r\nfunction isAWSManagedKey(keyName: string): boolean {\r\n  const awsManagedKeys = [\r\n    'OPENAI_API_KEY',\r\n    'CLAUDE_API_KEY',\r\n    'APIFY_API_TOKEN',\r\n    'STRIPE_SECRET_KEY',\r\n    'STRIPE_WEBHOOK_SECRET',\r\n    'SUPABASE_SERVICE_ROLE',\r\n    'SUPABASE_ANON_KEY'  // \u2705 ADD THIS\r\n  ];\r\n  \r\n  return awsManagedKeys.includes(keyName);\r\n}\r\n\r\nexport async function handleGetConfig(c: Context): Promise<Response> {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    // Verify admin access\r\n    if (!verifyAdminAccess(c)) {\r\n      return c.json(createStandardResponse(false, undefined, 'Unauthorized access', requestId), 401);\r\n    }\r\n    \r\n    const { keyName } = await c.req.json();\r\n    \r\n    if (!keyName) {\r\n      return c.json(createStandardResponse(false, undefined, 'keyName is required', requestId), 400);\r\n    }\r\n    \r\n    // Get value using enhanced config manager\r\n    const configManager = getEnhancedConfigManager(c.env);\r\n    const value = await configManager.getConfig(keyName);\r\n    \r\n    if (!value) {\r\n      return c.json(createStandardResponse(false, undefined, `${keyName} not found`, requestId), 404);\r\n    }\r\n    \r\n    logger('info', 'Config value retrieved via admin API', { keyName, requestId });\r\n    \r\n    return c.json(createStandardResponse(true, {\r\n      keyName,\r\n      value,\r\n      source: isAWSManagedKey(keyName) ? 'aws' : 'supabase'\r\n    }, undefined, requestId));\r\n    \r\n  } catch (error: any) {\r\n    logger('error', 'Failed to get config value', { error: error.message, requestId });\r\n    return c.json(createStandardResponse(false, undefined, error.message, requestId), 500);\r\n  }\r\n}\r\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\n    \"/\",\n    url.charCodeAt(9) === 58 ? 13 : 8\n  );\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/middleware/cors/index.ts\nvar cors = (options) => {\n  const defaults = {\n    origin: \"*\",\n    allowMethods: [\"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\", \"PATCH\"],\n    allowHeaders: [],\n    exposeHeaders: []\n  };\n  const opts = {\n    ...defaults,\n    ...options\n  };\n  const findAllowOrigin = ((optsOrigin) => {\n    if (typeof optsOrigin === \"string\") {\n      if (optsOrigin === \"*\") {\n        return () => optsOrigin;\n      } else {\n        return (origin) => optsOrigin === origin ? origin : null;\n      }\n    } else if (typeof optsOrigin === \"function\") {\n      return optsOrigin;\n    } else {\n      return (origin) => optsOrigin.includes(origin) ? origin : null;\n    }\n  })(opts.origin);\n  const findAllowMethods = ((optsAllowMethods) => {\n    if (typeof optsAllowMethods === \"function\") {\n      return optsAllowMethods;\n    } else if (Array.isArray(optsAllowMethods)) {\n      return () => optsAllowMethods;\n    } else {\n      return () => [];\n    }\n  })(opts.allowMethods);\n  return async function cors2(c, next) {\n    function set(key, value) {\n      c.res.headers.set(key, value);\n    }\n    const allowOrigin = findAllowOrigin(c.req.header(\"origin\") || \"\", c);\n    if (allowOrigin) {\n      set(\"Access-Control-Allow-Origin\", allowOrigin);\n    }\n    if (opts.origin !== \"*\") {\n      const existingVary = c.req.header(\"Vary\");\n      if (existingVary) {\n        set(\"Vary\", existingVary);\n      } else {\n        set(\"Vary\", \"Origin\");\n      }\n    }\n    if (opts.credentials) {\n      set(\"Access-Control-Allow-Credentials\", \"true\");\n    }\n    if (opts.exposeHeaders?.length) {\n      set(\"Access-Control-Expose-Headers\", opts.exposeHeaders.join(\",\"));\n    }\n    if (c.req.method === \"OPTIONS\") {\n      if (opts.maxAge != null) {\n        set(\"Access-Control-Max-Age\", opts.maxAge.toString());\n      }\n      const allowMethods = findAllowMethods(c.req.header(\"origin\") || \"\", c);\n      if (allowMethods.length) {\n        set(\"Access-Control-Allow-Methods\", allowMethods.join(\",\"));\n      }\n      let headers = opts.allowHeaders;\n      if (!headers?.length) {\n        const requestHeaders = c.req.header(\"Access-Control-Request-Headers\");\n        if (requestHeaders) {\n          headers = requestHeaders.split(/\\s*,\\s*/);\n        }\n      }\n      if (headers?.length) {\n        set(\"Access-Control-Allow-Headers\", headers.join(\",\"));\n        c.res.headers.append(\"Vary\", \"Access-Control-Request-Headers\");\n      }\n      c.res.headers.delete(\"Content-Length\");\n      c.res.headers.delete(\"Content-Type\");\n      return new Response(null, {\n        headers: c.res.headers,\n        status: 204,\n        statusText: \"No Content\"\n      });\n    }\n    await next();\n  };\n};\nexport {\n  cors\n};\n", "import { Hono } from 'hono';\r\nimport { cors } from 'hono/cors';\r\nimport type { Env } from './types/interfaces.js';\r\nimport { generateRequestId, logger } from './utils/logger.js';\r\nimport { createStandardResponse } from './utils/response.js';\r\n\r\nconst app = new Hono<{ Bindings: Env }>();\r\n\r\napp.use('*', cors({\r\n  origin: '*',  // Allow all origins temporarily for debugging\r\n  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n  credentials: false  // Set to false when using wildcard origin\r\n}));\r\n\r\napp.get('/debug/raw-env', async (c) => {\r\n  return c.json({\r\n    allEnvKeys: Object.keys(c.env),\r\n    awsKeys: {\r\n      AWS_ACCESS_KEY_ID: typeof c.env.AWS_ACCESS_KEY_ID,\r\n      AWS_SECRET_ACCESS_KEY: typeof c.env.AWS_SECRET_ACCESS_KEY,\r\n    },\r\n    rawAccess: {\r\n      directAccessKeyId: c.env['AWS_ACCESS_KEY_ID'],\r\n      directSecretKey: c.env['AWS_SECRET_ACCESS_KEY']\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/test-pipeline-config', async (c) => {\r\n  try {\r\n    const { ANALYSIS_PIPELINE_CONFIG } = await import('./config/analysis-pipeline.js');\r\n    const { UniversalAIAdapter, selectModel } = await import('./services/universal-ai-adapter.js');\r\n    \r\n    // Test model selection\r\n    const tests = {\r\n      triage_economy: selectModel('triage', 'economy'),\r\n      light_balanced: selectModel('light', 'balanced'),\r\n      deep_premium: selectModel('deep', 'premium'),\r\n      xray_with_upgrade: selectModel('xray', 'balanced', { triage: { lead_score: 85 } })\r\n    };\r\n    \r\n    return c.json({\r\n      success: true,\r\n      config_loaded: true,\r\n      available_workflows: Object.keys(ANALYSIS_PIPELINE_CONFIG.workflows),\r\n      available_models: Object.keys(ANALYSIS_PIPELINE_CONFIG.models),\r\n      model_selection_tests: tests,\r\n      sample_workflow: ANALYSIS_PIPELINE_CONFIG.workflows.auto\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ success: false, error: error.message }, 500);\r\n  }\r\n});\r\n\r\n// Add this endpoint to your index.ts file\r\n\r\napp.get('/test-gpt5', async (c) => {\r\n  const requestId = generateRequestId();\r\n  \r\n  try {\r\n    const { testGPT5Direct } = await import('./test/gpt5-test.js');\r\n    const result = await testGPT5Direct(c.env, requestId);\r\n    \r\n    return c.json({\r\n      success: true,\r\n      test_result: result,\r\n      requestId\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({\r\n      success: false,\r\n      error: error.message,\r\n      requestId\r\n    }, 500);\r\n  }\r\n});\r\n\r\n// ===============================================================================\r\n// BASIC ENDPOINTS\r\n// ===============================================================================\r\n\r\napp.get('/', (c) => {\r\n  return c.json({\r\n    status: 'healthy',\r\n    service: 'OSLIRA Enterprise Analysis API - MODULAR VERSION',\r\n    version: 'v3.1.0-modular',\r\n    timestamp: new Date().toISOString(),\r\n    features: [\r\n      'modular_architecture',\r\n      'lazy_loading',\r\n      'real_engagement_calculation',\r\n      'enterprise_analytics'\r\n    ]\r\n  });\r\n});\r\n\r\napp.get('/health', (c) => c.json({ status: 'healthy', timestamp: new Date().toISOString() }));\r\n\r\n// ===============================================================================\r\n// LAZY LOADED ENDPOINTS\r\n// ===============================================================================\r\n\r\n// Main analysis endpoints\r\napp.post('/v1/analyze', async (c) => {\r\n  const { handleAnalyze } = await import('./handlers/analyze.js');\r\n  return handleAnalyze(c);\r\n});\r\n\r\napp.post('/v1/bulk-analyze', async (c) => {\r\n  const { handleBulkAnalyze } = await import('./handlers/bulk-analyze.js');\r\n  return handleBulkAnalyze(c);\r\n});\r\n\r\n// Legacy redirects\r\napp.post('/analyze', async (c) => {\r\n  const { handleLegacyAnalyze } = await import('./handlers/legacy.js');\r\n  return handleLegacyAnalyze(c);\r\n});\r\n\r\napp.post('/bulk-analyze', async (c) => {\r\n  const { handleLegacyBulkAnalyze } = await import('./handlers/legacy.js');\r\n  return handleLegacyBulkAnalyze(c);\r\n});\r\n\r\n// Billing endpoints\r\napp.post('/stripe-webhook', async (c) => {\r\n  const { handleStripeWebhook } = await import('./handlers/billing.js');\r\n  return handleStripeWebhook(c);\r\n});\r\n\r\napp.post('/billing/create-checkout-session', async (c) => {\r\n  const { handleCreateCheckoutSession } = await import('./handlers/billing.js');\r\n  return handleCreateCheckoutSession(c);\r\n});\r\n\r\napp.post('/billing/create-portal-session', async (c) => {\r\n  const { handleCreatePortalSession } = await import('./handlers/billing.js');\r\n  return handleCreatePortalSession(c);\r\n});\r\n\r\n// Analytics endpoints\r\napp.get('/analytics/summary', async (c) => {\r\n  const { handleAnalyticsSummary } = await import('./handlers/analytics.js');\r\n  return handleAnalyticsSummary(c);\r\n});\r\n\r\napp.post('/ai/generate-insights', async (c) => {\r\n  const { handleGenerateInsights } = await import('./handlers/analytics.js');\r\n  return handleGenerateInsights(c);\r\n});\r\n\r\n// Debug endpoints\r\napp.get('/debug-engagement/:username', async (c) => {\r\n  const { handleDebugEngagement } = await import('./handlers/debug.js');\r\n  return handleDebugEngagement(c);\r\n});\r\n\r\napp.get('/debug-scrape/:username', async (c) => {\r\n  const { handleDebugScrape } = await import('./handlers/debug.js');\r\n  return handleDebugScrape(c);\r\n});\r\n\r\napp.get('/debug-parsing/:username', async (c) => {\r\n  const { handleDebugParsing } = await import('./handlers/debug.js');\r\n  return handleDebugParsing(c);\r\n});\r\n\r\napp.get('/debug-env', async (c) => {\r\n  const { handleDebugEnv } = await import('./handlers/test.js');\r\n  return handleDebugEnv(c);\r\n});\r\n\r\napp.get('/test-orchestration', async (c) => {\r\n  const { runIntegrationTests } = await import('./test/orchestration-integration.js');\r\n  try {\r\n    const results = await runIntegrationTests(c.env);\r\n    const totalCost = results.reduce((sum, r) => sum + r.cost, 0);\r\n    const totalDuration = results.reduce((sum, r) => sum + r.duration_ms, 0);\r\n    const successCount = results.filter(r => r.success).length;\r\n    \r\n    return c.json({\r\n      success: true,\r\n      summary: {\r\n        total_tests: results.length,\r\n        passed: successCount,\r\n        failed: results.length - successCount,\r\n        total_cost: totalCost,\r\n        total_duration_ms: totalDuration\r\n      },\r\n      results\r\n    });\r\n  } catch (error: any) {\r\n    return c.json({ success: false, error: error.message }, 500);\r\n  }\r\n});\r\n// Test endpoints\r\napp.get('/test-supabase', async (c) => {\r\n  const { handleTestSupabase } = await import('./handlers/test.js');\r\n  return handleTestSupabase(c);\r\n});\r\n\r\napp.get('/test-apify', async (c) => {\r\n  const { handleTestApify } = await import('./handlers/test.js');\r\n  return handleTestApify(c);\r\n});\r\n\r\napp.get('/test-openai', async (c) => {\r\n  const { handleTestOpenAI } = await import('./handlers/test.js');\r\n  return handleTestOpenAI(c);\r\n});\r\n\r\napp.post('/test-post', async (c) => {\r\n  const { handleTestPost } = await import('./handlers/test.js');\r\n  return handleTestPost(c);\r\n});\r\n\r\n// Add these enhanced admin endpoints to your existing routes\r\napp.post('/admin/migrate-to-aws', async (c) => {\r\n  const { handleMigrateToAWS } = await import('./handlers/enhanced-admin.js');\r\n  return handleMigrateToAWS(c);\r\n});\r\n\r\n// Replace existing admin routes with enhanced versions\r\napp.post('/admin/update-key', async (c) => {\r\n  const { handleUpdateApiKey } = await import('./handlers/enhanced-admin.js');\r\n  return handleUpdateApiKey(c);\r\n});\r\n\r\napp.get('/admin/config-status', async (c) => {\r\n  const { handleGetConfigStatus } = await import('./handlers/enhanced-admin.js');\r\n  return handleGetConfigStatus(c);\r\n});\r\n\r\napp.get('/admin/audit-log', async (c) => {\r\n  const { handleGetAuditLog } = await import('./handlers/enhanced-admin.js');\r\n  return handleGetAuditLog(c);\r\n});\r\n\r\napp.post('/admin/test-key', async (c) => {\r\n  const { handleTestApiKey } = await import('./handlers/enhanced-admin.js');\r\n  return handleTestApiKey(c);\r\n});\r\n\r\napp.post('/admin/get-config', async (c) => {\r\n  const { handleGetConfig } = await import('./handlers/admin.js');\r\n  return handleGetConfig(c);\r\n});\r\n\r\n// ===============================================================================\r\n// ERROR HANDLING\r\n// ===============================================================================\r\n\r\napp.onError((err, c) => {\r\n  const requestId = generateRequestId();\r\n  logger('error', 'Unhandled enterprise worker error', { \r\n    error: err.message, \r\n    stack: err.stack, \r\n    requestId \r\n  });\r\n  \r\n  return c.json(createStandardResponse(false, undefined, 'Internal server error', requestId), 500);\r\n});\r\n\r\napp.notFound(c => {\r\n  const requestId = generateRequestId();\r\n  \r\n  return c.json({\r\n    success: false,\r\n    error: 'Endpoint not found',\r\n    requestId,\r\n    timestamp: new Date().toISOString(),\r\n    version: 'v3.1.0-modular',\r\n    architecture: 'modular_with_lazy_loading',\r\n    available_endpoints: [\r\n      'GET / - Health check',\r\n      'GET /health - Simple health status',\r\n      'GET /config - Configuration',\r\n      'POST /v1/analyze - Main analysis endpoint',\r\n      'POST /v1/bulk-analyze - Bulk analysis',\r\n      'POST /billing/* - Stripe endpoints',\r\n      'GET /analytics/* - Analytics endpoints',\r\n      'GET /debug-* - Debug endpoints',\r\n      'GET /test-* - Test endpoints'\r\n    ]\r\n  }, 404);\r\n});\r\n\r\nexport default app;\r\n"],
  "mappings": "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",
  "names": ["logger", "AWSSecretsManager", "logger", "keyName", "newValue", "body", "analysisResult", "scrapeInstagramProfile", "analysisResult", "calculateCreditCost", "scrapeInstagramProfile", "performAIAnalysis", "analysisResult", "init_analytics", "keyName", "newValue", "userEmail", "handleGetAuditLog", "handleGetConfigStatus", "handleTestApiKey", "handleUpdateApiKey", "verifyAdminAccess", "keyName", "newValue", "validateApiKeyFormat", "userEmail", "testApiKey", "isAWSManagedKey", "raw", "app", "Node", "Node", "Hono", "Hono", "ANALYSIS_PIPELINE_CONFIG", "UniversalAIAdapter", "selectModel", "testGPT5Direct", "handleAnalyze", "handleBulkAnalyze", "handleLegacyAnalyze", "handleLegacyBulkAnalyze", "handleStripeWebhook", "handleCreateCheckoutSession", "handleCreatePortalSession", "handleAnalyticsSummary", "handleGenerateInsights", "handleDebugEngagement", "handleDebugScrape", "handleDebugParsing", "handleDebugEnv", "runIntegrationTests", "handleTestSupabase", "handleTestApify", "handleTestOpenAI", "handleTestPost", "handleMigrateToAWS", "handleUpdateApiKey", "handleGetConfigStatus", "handleGetAuditLog", "handleTestApiKey", "handleGetConfig"]
}
